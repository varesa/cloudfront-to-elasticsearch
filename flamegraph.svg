<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1077.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1077.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0508%" y="997" width="0.0169%" height="15" fill="rgb(227,0,7)"/><text x="0.3008%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0508%" y="981" width="0.0169%" height="15" fill="rgb(217,0,24)"/><text x="0.3008%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0508%" y="965" width="0.0169%" height="15" fill="rgb(221,193,54)"/><text x="0.3008%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0508%" y="949" width="0.0169%" height="15" fill="rgb(248,212,6)"/><text x="0.3008%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0508%" y="933" width="0.0169%" height="15" fill="rgb(208,68,35)"/><text x="0.3008%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="981" width="0.0169%" height="15" fill="rgb(232,128,0)"/><text x="0.3347%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="965" width="0.0169%" height="15" fill="rgb(207,160,47)"/><text x="0.3347%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="949" width="0.0169%" height="15" fill="rgb(228,23,34)"/><text x="0.3347%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="933" width="0.0169%" height="15" fill="rgb(218,30,26)"/><text x="0.3347%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="917" width="0.0169%" height="15" fill="rgb(220,122,19)"/><text x="0.3347%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="901" width="0.0169%" height="15" fill="rgb(250,228,42)"/><text x="0.3347%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0847%" y="885" width="0.0169%" height="15" fill="rgb(240,193,28)"/><text x="0.3347%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="0.1016%" y="965" width="0.0339%" height="15" fill="rgb(216,20,37)"/><text x="0.3516%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="0.1016%" y="949" width="0.0339%" height="15" fill="rgb(206,188,39)"/><text x="0.3516%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="0.1016%" y="933" width="0.0339%" height="15" fill="rgb(217,207,13)"/><text x="0.3516%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="0.1016%" y="917" width="0.0339%" height="15" fill="rgb(231,73,38)"/><text x="0.3516%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="901" width="0.0169%" height="15" fill="rgb(225,20,46)"/><text x="0.3686%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="885" width="0.0169%" height="15" fill="rgb(210,31,41)"/><text x="0.3686%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="869" width="0.0169%" height="15" fill="rgb(221,200,47)"/><text x="0.3686%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="853" width="0.0169%" height="15" fill="rgb(226,26,5)"/><text x="0.3686%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="837" width="0.0169%" height="15" fill="rgb(249,33,26)"/><text x="0.3686%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1186%" y="821" width="0.0169%" height="15" fill="rgb(235,183,28)"/><text x="0.3686%" y="831.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.02%)</title><rect x="0.1355%" y="965" width="0.0169%" height="15" fill="rgb(221,5,38)"/><text x="0.3855%" y="975.50"></text></g><g><title>.annobin_rtld.c (7 samples, 0.12%)</title><rect x="0.0508%" y="1013" width="0.1186%" height="15" fill="rgb(247,18,42)"/><text x="0.3008%" y="1023.50"></text></g><g><title>_dl_start (6 samples, 0.10%)</title><rect x="0.0678%" y="997" width="0.1016%" height="15" fill="rgb(241,131,45)"/><text x="0.3178%" y="1007.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.07%)</title><rect x="0.1016%" y="981" width="0.0678%" height="15" fill="rgb(249,31,29)"/><text x="0.3516%" y="991.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="0.1524%" y="965" width="0.0169%" height="15" fill="rgb(225,111,53)"/><text x="0.4024%" y="975.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.02%)</title><rect x="0.1524%" y="949" width="0.0169%" height="15" fill="rgb(238,160,17)"/><text x="0.4024%" y="959.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect x="0.1524%" y="933" width="0.0169%" height="15" fill="rgb(214,148,48)"/><text x="0.4024%" y="943.50"></text></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect x="0.1524%" y="917" width="0.0169%" height="15" fill="rgb(232,36,49)"/><text x="0.4024%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="0.1694%" y="821" width="0.0169%" height="15" fill="rgb(209,103,24)"/><text x="0.4194%" y="831.50"></text></g><g><title>hyper::client::pool::Checkout&lt;T&gt;::checkout::{{closure}} (1 samples, 0.02%)</title><rect x="0.1694%" y="805" width="0.0169%" height="15" fill="rgb(229,88,8)"/><text x="0.4194%" y="815.50"></text></g><g><title>hyper::client::pool::Pool&lt;T&gt;::reuse (1 samples, 0.02%)</title><rect x="0.1694%" y="789" width="0.0169%" height="15" fill="rgb(213,181,19)"/><text x="0.4194%" y="799.50"></text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.02%)</title><rect x="0.1694%" y="773" width="0.0169%" height="15" fill="rgb(254,191,54)"/><text x="0.4194%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="0.1694%" y="757" width="0.0169%" height="15" fill="rgb(241,83,37)"/><text x="0.4194%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="0.1694%" y="741" width="0.0169%" height="15" fill="rgb(233,36,39)"/><text x="0.4194%" y="751.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="1013" width="0.0339%" height="15" fill="rgb(226,3,54)"/><text x="0.4194%" y="1023.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="997" width="0.0339%" height="15" fill="rgb(245,192,40)"/><text x="0.4194%" y="1007.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="981" width="0.0339%" height="15" fill="rgb(238,167,29)"/><text x="0.4194%" y="991.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (2 samples, 0.03%)</title><rect x="0.1694%" y="965" width="0.0339%" height="15" fill="rgb(232,182,51)"/><text x="0.4194%" y="975.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="949" width="0.0339%" height="15" fill="rgb(231,60,39)"/><text x="0.4194%" y="959.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="933" width="0.0339%" height="15" fill="rgb(208,69,12)"/><text x="0.4194%" y="943.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="917" width="0.0339%" height="15" fill="rgb(235,93,37)"/><text x="0.4194%" y="927.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="901" width="0.0339%" height="15" fill="rgb(213,116,39)"/><text x="0.4194%" y="911.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="885" width="0.0339%" height="15" fill="rgb(222,207,29)"/><text x="0.4194%" y="895.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (2 samples, 0.03%)</title><rect x="0.1694%" y="869" width="0.0339%" height="15" fill="rgb(206,96,30)"/><text x="0.4194%" y="879.50"></text></g><g><title>&lt;hyper::client::pool::Checkout&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.1694%" y="853" width="0.0339%" height="15" fill="rgb(218,138,4)"/><text x="0.4194%" y="863.50"></text></g><g><title>hyper::client::pool::Checkout&lt;T&gt;::checkout (2 samples, 0.03%)</title><rect x="0.1694%" y="837" width="0.0339%" height="15" fill="rgb(250,191,14)"/><text x="0.4194%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.02%)</title><rect x="0.1863%" y="821" width="0.0169%" height="15" fill="rgb(239,60,40)"/><text x="0.4363%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.02%)</title><rect x="0.1863%" y="805" width="0.0169%" height="15" fill="rgb(206,27,48)"/><text x="0.4363%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.1863%" y="789" width="0.0169%" height="15" fill="rgb(225,35,8)"/><text x="0.4363%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.1863%" y="773" width="0.0169%" height="15" fill="rgb(250,213,24)"/><text x="0.4363%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.1863%" y="757" width="0.0169%" height="15" fill="rgb(247,123,22)"/><text x="0.4363%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.1863%" y="741" width="0.0169%" height="15" fill="rgb(231,138,38)"/><text x="0.4363%" y="751.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.1863%" y="725" width="0.0169%" height="15" fill="rgb(231,145,46)"/><text x="0.4363%" y="735.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="0.1863%" y="709" width="0.0169%" height="15" fill="rgb(251,118,11)"/><text x="0.4363%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="0.2541%" y="693" width="0.0169%" height="15" fill="rgb(217,147,25)"/><text x="0.5041%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="0.2541%" y="677" width="0.0169%" height="15" fill="rgb(247,81,37)"/><text x="0.5041%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.2541%" y="661" width="0.0169%" height="15" fill="rgb(209,12,38)"/><text x="0.5041%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="0.2541%" y="645" width="0.0169%" height="15" fill="rgb(227,1,9)"/><text x="0.5041%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.02%)</title><rect x="0.2710%" y="693" width="0.0169%" height="15" fill="rgb(248,47,43)"/><text x="0.5210%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.02%)</title><rect x="0.2710%" y="677" width="0.0169%" height="15" fill="rgb(221,10,30)"/><text x="0.5210%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.02%)</title><rect x="0.2710%" y="661" width="0.0169%" height="15" fill="rgb(210,229,1)"/><text x="0.5210%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (1 samples, 0.02%)</title><rect x="0.2710%" y="645" width="0.0169%" height="15" fill="rgb(222,148,37)"/><text x="0.5210%" y="655.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="0.2710%" y="629" width="0.0169%" height="15" fill="rgb(234,67,33)"/><text x="0.5210%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="0.2710%" y="613" width="0.0169%" height="15" fill="rgb(247,98,35)"/><text x="0.5210%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.02%)</title><rect x="0.2710%" y="597" width="0.0169%" height="15" fill="rgb(247,138,52)"/><text x="0.5210%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.02%)</title><rect x="0.2710%" y="581" width="0.0169%" height="15" fill="rgb(213,79,30)"/><text x="0.5210%" y="591.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.02%)</title><rect x="0.2710%" y="565" width="0.0169%" height="15" fill="rgb(246,177,23)"/><text x="0.5210%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.02%)</title><rect x="0.3049%" y="613" width="0.0169%" height="15" fill="rgb(230,62,27)"/><text x="0.5549%" y="623.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.02%)</title><rect x="0.3049%" y="597" width="0.0169%" height="15" fill="rgb(216,154,8)"/><text x="0.5549%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.3049%" y="581" width="0.0169%" height="15" fill="rgb(244,35,45)"/><text x="0.5549%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.3049%" y="565" width="0.0169%" height="15" fill="rgb(251,115,12)"/><text x="0.5549%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.3049%" y="549" width="0.0169%" height="15" fill="rgb(240,54,50)"/><text x="0.5549%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.05%)</title><rect x="0.2879%" y="693" width="0.0508%" height="15" fill="rgb(233,84,52)"/><text x="0.5379%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.05%)</title><rect x="0.2879%" y="677" width="0.0508%" height="15" fill="rgb(207,117,47)"/><text x="0.5379%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.03%)</title><rect x="0.3049%" y="661" width="0.0339%" height="15" fill="rgb(249,43,39)"/><text x="0.5549%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (2 samples, 0.03%)</title><rect x="0.3049%" y="645" width="0.0339%" height="15" fill="rgb(209,38,44)"/><text x="0.5549%" y="655.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::hash::Hash&gt;::hash (2 samples, 0.03%)</title><rect x="0.3049%" y="629" width="0.0339%" height="15" fill="rgb(236,212,23)"/><text x="0.5549%" y="639.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (1 samples, 0.02%)</title><rect x="0.3218%" y="613" width="0.0169%" height="15" fill="rgb(242,79,21)"/><text x="0.5718%" y="623.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (1 samples, 0.02%)</title><rect x="0.3218%" y="597" width="0.0169%" height="15" fill="rgb(211,96,35)"/><text x="0.5718%" y="607.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="0.3388%" y="693" width="0.0169%" height="15" fill="rgb(253,215,40)"/><text x="0.5888%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="0.3388%" y="677" width="0.0169%" height="15" fill="rgb(211,81,21)"/><text x="0.5888%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.02%)</title><rect x="0.3388%" y="661" width="0.0169%" height="15" fill="rgb(208,190,38)"/><text x="0.5888%" y="671.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (11 samples, 0.19%)</title><rect x="0.2033%" y="837" width="0.1863%" height="15" fill="rgb(235,213,38)"/><text x="0.4533%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (11 samples, 0.19%)</title><rect x="0.2033%" y="821" width="0.1863%" height="15" fill="rgb(237,122,38)"/><text x="0.4533%" y="831.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (11 samples, 0.19%)</title><rect x="0.2033%" y="805" width="0.1863%" height="15" fill="rgb(244,218,35)"/><text x="0.4533%" y="815.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (11 samples, 0.19%)</title><rect x="0.2033%" y="789" width="0.1863%" height="15" fill="rgb(240,68,47)"/><text x="0.4533%" y="799.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}}::{{closure}} (11 samples, 0.19%)</title><rect x="0.2033%" y="773" width="0.1863%" height="15" fill="rgb(210,16,53)"/><text x="0.4533%" y="783.50"></text></g><g><title>core::mem::drop (11 samples, 0.19%)</title><rect x="0.2033%" y="757" width="0.1863%" height="15" fill="rgb(235,124,12)"/><text x="0.4533%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.19%)</title><rect x="0.2033%" y="741" width="0.1863%" height="15" fill="rgb(224,169,11)"/><text x="0.4533%" y="751.50"></text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.19%)</title><rect x="0.2033%" y="725" width="0.1863%" height="15" fill="rgb(250,166,2)"/><text x="0.4533%" y="735.50"></text></g><g><title>hyper::client::pool::PoolInner&lt;T&gt;::put (11 samples, 0.19%)</title><rect x="0.2033%" y="709" width="0.1863%" height="15" fill="rgb(242,216,29)"/><text x="0.4533%" y="719.50"></text></g><g><title>tracing_core::metadata::LevelFilter::current (2 samples, 0.03%)</title><rect x="0.3557%" y="693" width="0.0339%" height="15" fill="rgb(230,116,27)"/><text x="0.6057%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.03%)</title><rect x="0.3557%" y="677" width="0.0339%" height="15" fill="rgb(228,99,48)"/><text x="0.6057%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="0.3557%" y="661" width="0.0339%" height="15" fill="rgb(253,11,6)"/><text x="0.6057%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3726%" y="645" width="0.0169%" height="15" fill="rgb(247,143,39)"/><text x="0.6226%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3726%" y="629" width="0.0169%" height="15" fill="rgb(236,97,10)"/><text x="0.6226%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3726%" y="613" width="0.0169%" height="15" fill="rgb(233,208,19)"/><text x="0.6226%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3726%" y="597" width="0.0169%" height="15" fill="rgb(216,164,2)"/><text x="0.6226%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.3726%" y="581" width="0.0169%" height="15" fill="rgb(220,129,5)"/><text x="0.6226%" y="591.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.2033%" y="917" width="0.2541%" height="15" fill="rgb(242,17,10)"/><text x="0.4533%" y="927.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.2033%" y="901" width="0.2541%" height="15" fill="rgb(242,107,0)"/><text x="0.4533%" y="911.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.2033%" y="885" width="0.2541%" height="15" fill="rgb(251,28,31)"/><text x="0.4533%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.2033%" y="869" width="0.2541%" height="15" fill="rgb(233,223,10)"/><text x="0.4533%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.2033%" y="853" width="0.2541%" height="15" fill="rgb(215,21,27)"/><text x="0.4533%" y="863.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="837" width="0.0678%" height="15" fill="rgb(232,23,21)"/><text x="0.6396%" y="847.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (4 samples, 0.07%)</title><rect x="0.3896%" y="821" width="0.0678%" height="15" fill="rgb(244,5,23)"/><text x="0.6396%" y="831.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="805" width="0.0678%" height="15" fill="rgb(226,81,46)"/><text x="0.6396%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="789" width="0.0678%" height="15" fill="rgb(247,70,30)"/><text x="0.6396%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="773" width="0.0678%" height="15" fill="rgb(212,68,19)"/><text x="0.6396%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="757" width="0.0678%" height="15" fill="rgb(240,187,13)"/><text x="0.6396%" y="767.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (4 samples, 0.07%)</title><rect x="0.3896%" y="741" width="0.0678%" height="15" fill="rgb(223,113,26)"/><text x="0.6396%" y="751.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="725" width="0.0678%" height="15" fill="rgb(206,192,2)"/><text x="0.6396%" y="735.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="709" width="0.0678%" height="15" fill="rgb(241,108,4)"/><text x="0.6396%" y="719.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="693" width="0.0678%" height="15" fill="rgb(247,173,49)"/><text x="0.6396%" y="703.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="677" width="0.0678%" height="15" fill="rgb(224,114,35)"/><text x="0.6396%" y="687.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (4 samples, 0.07%)</title><rect x="0.3896%" y="661" width="0.0678%" height="15" fill="rgb(245,159,27)"/><text x="0.6396%" y="671.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="645" width="0.0678%" height="15" fill="rgb(245,172,44)"/><text x="0.6396%" y="655.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="629" width="0.0678%" height="15" fill="rgb(236,23,11)"/><text x="0.6396%" y="639.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="613" width="0.0678%" height="15" fill="rgb(205,117,38)"/><text x="0.6396%" y="623.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="0.3896%" y="597" width="0.0678%" height="15" fill="rgb(237,72,25)"/><text x="0.6396%" y="607.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.4404%" y="581" width="0.0169%" height="15" fill="rgb(244,70,9)"/><text x="0.6904%" y="591.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.4404%" y="565" width="0.0169%" height="15" fill="rgb(217,125,39)"/><text x="0.6904%" y="575.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (1 samples, 0.02%)</title><rect x="0.4404%" y="549" width="0.0169%" height="15" fill="rgb(235,36,10)"/><text x="0.6904%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.4404%" y="533" width="0.0169%" height="15" fill="rgb(251,123,47)"/><text x="0.6904%" y="543.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeOverwriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.4404%" y="517" width="0.0169%" height="15" fill="rgb(221,13,13)"/><text x="0.6904%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="0.4404%" y="501" width="0.0169%" height="15" fill="rgb(238,131,9)"/><text x="0.6904%" y="511.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.4743%" y="789" width="0.0169%" height="15" fill="rgb(211,50,8)"/><text x="0.7243%" y="799.50"></text></g><g><title>&lt;hyper::client::connect::Extra as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.4743%" y="773" width="0.0169%" height="15" fill="rgb(245,182,24)"/><text x="0.7243%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="0.4912%" y="789" width="0.0169%" height="15" fill="rgb(242,14,37)"/><text x="0.7412%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="0.5251%" y="549" width="0.0169%" height="15" fill="rgb(246,228,12)"/><text x="0.7751%" y="559.50"></text></g><g><title>http::header::map::VacantEntry&lt;T&gt;::insert (4 samples, 0.07%)</title><rect x="0.5251%" y="773" width="0.0678%" height="15" fill="rgb(213,55,15)"/><text x="0.7751%" y="783.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_phase_two (4 samples, 0.07%)</title><rect x="0.5251%" y="757" width="0.0678%" height="15" fill="rgb(209,9,3)"/><text x="0.7751%" y="767.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (4 samples, 0.07%)</title><rect x="0.5251%" y="741" width="0.0678%" height="15" fill="rgb(230,59,30)"/><text x="0.7751%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.07%)</title><rect x="0.5251%" y="725" width="0.0678%" height="15" fill="rgb(209,121,21)"/><text x="0.7751%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.07%)</title><rect x="0.5251%" y="709" width="0.0678%" height="15" fill="rgb(220,109,13)"/><text x="0.7751%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.07%)</title><rect x="0.5251%" y="693" width="0.0678%" height="15" fill="rgb(232,18,1)"/><text x="0.7751%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.07%)</title><rect x="0.5251%" y="677" width="0.0678%" height="15" fill="rgb(215,41,42)"/><text x="0.7751%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.07%)</title><rect x="0.5251%" y="661" width="0.0678%" height="15" fill="rgb(224,123,36)"/><text x="0.7751%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.07%)</title><rect x="0.5251%" y="645" width="0.0678%" height="15" fill="rgb(240,125,3)"/><text x="0.7751%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.07%)</title><rect x="0.5251%" y="629" width="0.0678%" height="15" fill="rgb(205,98,50)"/><text x="0.7751%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.07%)</title><rect x="0.5251%" y="613" width="0.0678%" height="15" fill="rgb(205,185,37)"/><text x="0.7751%" y="623.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.07%)</title><rect x="0.5251%" y="597" width="0.0678%" height="15" fill="rgb(238,207,15)"/><text x="0.7751%" y="607.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.07%)</title><rect x="0.5251%" y="581" width="0.0678%" height="15" fill="rgb(213,199,42)"/><text x="0.7751%" y="591.50"></text></g><g><title>_int_realloc (4 samples, 0.07%)</title><rect x="0.5251%" y="565" width="0.0678%" height="15" fill="rgb(235,201,11)"/><text x="0.7751%" y="575.50"></text></g><g><title>_int_malloc (3 samples, 0.05%)</title><rect x="0.5420%" y="549" width="0.0508%" height="15" fill="rgb(207,46,11)"/><text x="0.7920%" y="559.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.02%)</title><rect x="0.5928%" y="741" width="0.0169%" height="15" fill="rgb(241,35,35)"/><text x="0.8428%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.02%)</title><rect x="0.5928%" y="725" width="0.0169%" height="15" fill="rgb(243,32,47)"/><text x="0.8428%" y="735.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.02%)</title><rect x="0.5928%" y="709" width="0.0169%" height="15" fill="rgb(247,202,23)"/><text x="0.8428%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.5928%" y="693" width="0.0169%" height="15" fill="rgb(219,102,11)"/><text x="0.8428%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="0.5928%" y="677" width="0.0169%" height="15" fill="rgb(243,110,44)"/><text x="0.8428%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.5928%" y="661" width="0.0169%" height="15" fill="rgb(222,74,54)"/><text x="0.8428%" y="671.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (2 samples, 0.03%)</title><rect x="0.6098%" y="709" width="0.0339%" height="15" fill="rgb(216,99,12)"/><text x="0.8598%" y="719.50"></text></g><g><title>alloc::fmt::format (4 samples, 0.07%)</title><rect x="0.5928%" y="757" width="0.0678%" height="15" fill="rgb(226,22,26)"/><text x="0.8428%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.05%)</title><rect x="0.6098%" y="741" width="0.0508%" height="15" fill="rgb(217,163,10)"/><text x="0.8598%" y="751.50"></text></g><g><title>core::fmt::write (3 samples, 0.05%)</title><rect x="0.6098%" y="725" width="0.0508%" height="15" fill="rgb(213,25,53)"/><text x="0.8598%" y="735.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (1 samples, 0.02%)</title><rect x="0.6436%" y="709" width="0.0169%" height="15" fill="rgb(252,105,26)"/><text x="0.8936%" y="719.50"></text></g><g><title>&lt;u16 as core::fmt::num::Int&gt;::to_u64 (1 samples, 0.02%)</title><rect x="0.6436%" y="693" width="0.0169%" height="15" fill="rgb(220,39,43)"/><text x="0.8936%" y="703.50"></text></g><g><title>http::header::value::HeaderValue::from_str (1 samples, 0.02%)</title><rect x="0.6606%" y="757" width="0.0169%" height="15" fill="rgb(229,68,48)"/><text x="0.9106%" y="767.50"></text></g><g><title>http::header::value::HeaderValue::try_from_generic (1 samples, 0.02%)</title><rect x="0.6606%" y="741" width="0.0169%" height="15" fill="rgb(252,8,32)"/><text x="0.9106%" y="751.50"></text></g><g><title>http::header::value::HeaderValue::from_str::{{closure}} (1 samples, 0.02%)</title><rect x="0.6606%" y="725" width="0.0169%" height="15" fill="rgb(223,20,43)"/><text x="0.9106%" y="735.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.02%)</title><rect x="0.6606%" y="709" width="0.0169%" height="15" fill="rgb(229,81,49)"/><text x="0.9106%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="0.6606%" y="693" width="0.0169%" height="15" fill="rgb(236,28,36)"/><text x="0.9106%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="0.6606%" y="677" width="0.0169%" height="15" fill="rgb(249,185,26)"/><text x="0.9106%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.6606%" y="661" width="0.0169%" height="15" fill="rgb(249,174,33)"/><text x="0.9106%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.6606%" y="645" width="0.0169%" height="15" fill="rgb(233,201,37)"/><text x="0.9106%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="0.6606%" y="629" width="0.0169%" height="15" fill="rgb(221,78,26)"/><text x="0.9106%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="0.6606%" y="613" width="0.0169%" height="15" fill="rgb(250,127,30)"/><text x="0.9106%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="0.6606%" y="597" width="0.0169%" height="15" fill="rgb(230,49,44)"/><text x="0.9106%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="0.6606%" y="581" width="0.0169%" height="15" fill="rgb(229,67,23)"/><text x="0.9106%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="0.6606%" y="565" width="0.0169%" height="15" fill="rgb(249,83,47)"/><text x="0.9106%" y="575.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="0.6606%" y="549" width="0.0169%" height="15" fill="rgb(215,43,3)"/><text x="0.9106%" y="559.50"></text></g><g><title>http::header::map::Entry&lt;T&gt;::or_insert_with (11 samples, 0.19%)</title><rect x="0.5081%" y="789" width="0.1863%" height="15" fill="rgb(238,154,13)"/><text x="0.7581%" y="799.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}}::{{closure}} (6 samples, 0.10%)</title><rect x="0.5928%" y="773" width="0.1016%" height="15" fill="rgb(219,56,2)"/><text x="0.8428%" y="783.50"></text></g><g><title>http::uri::Uri::host (1 samples, 0.02%)</title><rect x="0.6775%" y="757" width="0.0169%" height="15" fill="rgb(233,0,4)"/><text x="0.9275%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="0.6775%" y="741" width="0.0169%" height="15" fill="rgb(235,30,7)"/><text x="0.9275%" y="751.50"></text></g><g><title>http::uri::Uri::host::{{closure}} (1 samples, 0.02%)</title><rect x="0.6775%" y="725" width="0.0169%" height="15" fill="rgb(250,79,13)"/><text x="0.9275%" y="735.50"></text></g><g><title>http::uri::authority::Authority::host (1 samples, 0.02%)</title><rect x="0.6775%" y="709" width="0.0169%" height="15" fill="rgb(211,146,34)"/><text x="0.9275%" y="719.50"></text></g><g><title>http::uri::authority::host (1 samples, 0.02%)</title><rect x="0.6775%" y="693" width="0.0169%" height="15" fill="rgb(228,22,38)"/><text x="0.9275%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::rsplitn (1 samples, 0.02%)</title><rect x="0.6775%" y="677" width="0.0169%" height="15" fill="rgb(235,168,5)"/><text x="0.9275%" y="687.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (15 samples, 0.25%)</title><rect x="0.4573%" y="869" width="0.2541%" height="15" fill="rgb(221,155,16)"/><text x="0.7073%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (15 samples, 0.25%)</title><rect x="0.4573%" y="853" width="0.2541%" height="15" fill="rgb(215,215,53)"/><text x="0.7073%" y="863.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (15 samples, 0.25%)</title><rect x="0.4573%" y="837" width="0.2541%" height="15" fill="rgb(223,4,10)"/><text x="0.7073%" y="847.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (15 samples, 0.25%)</title><rect x="0.4573%" y="821" width="0.2541%" height="15" fill="rgb(234,103,6)"/><text x="0.7073%" y="831.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}} (14 samples, 0.24%)</title><rect x="0.4743%" y="805" width="0.2371%" height="15" fill="rgb(227,97,0)"/><text x="0.7243%" y="815.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::entry (1 samples, 0.02%)</title><rect x="0.6944%" y="789" width="0.0169%" height="15" fill="rgb(234,150,53)"/><text x="0.9444%" y="799.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::entry (1 samples, 0.02%)</title><rect x="0.6944%" y="773" width="0.0169%" height="15" fill="rgb(228,201,54)"/><text x="0.9444%" y="783.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::entry2 (1 samples, 0.02%)</title><rect x="0.6944%" y="757" width="0.0169%" height="15" fill="rgb(222,22,37)"/><text x="0.9444%" y="767.50"></text></g><g><title>http::header::map::desired_pos (1 samples, 0.02%)</title><rect x="0.6944%" y="741" width="0.0169%" height="15" fill="rgb(237,53,32)"/><text x="0.9444%" y="751.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.7114%" y="805" width="0.0169%" height="15" fill="rgb(233,25,53)"/><text x="0.9614%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.7283%" y="789" width="0.0169%" height="15" fill="rgb(210,40,34)"/><text x="0.9783%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.7283%" y="805" width="0.0508%" height="15" fill="rgb(241,220,44)"/><text x="0.9783%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="0.7453%" y="789" width="0.0339%" height="15" fill="rgb(235,28,35)"/><text x="0.9953%" y="799.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (2 samples, 0.03%)</title><rect x="0.7453%" y="773" width="0.0339%" height="15" fill="rgb(210,56,17)"/><text x="0.9953%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="0.7453%" y="757" width="0.0339%" height="15" fill="rgb(224,130,29)"/><text x="0.9953%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="0.7453%" y="741" width="0.0339%" height="15" fill="rgb(235,212,8)"/><text x="0.9953%" y="751.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="0.7453%" y="725" width="0.0339%" height="15" fill="rgb(223,33,50)"/><text x="0.9953%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="0.7453%" y="709" width="0.0339%" height="15" fill="rgb(219,149,13)"/><text x="0.9953%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="0.7453%" y="693" width="0.0339%" height="15" fill="rgb(250,156,29)"/><text x="0.9953%" y="703.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.61%)</title><rect x="0.2033%" y="1013" width="0.6098%" height="15" fill="rgb(216,193,19)"/><text x="0.4533%" y="1023.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (36 samples, 0.61%)</title><rect x="0.2033%" y="997" width="0.6098%" height="15" fill="rgb(216,135,14)"/><text x="0.4533%" y="1007.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (36 samples, 0.61%)</title><rect x="0.2033%" y="981" width="0.6098%" height="15" fill="rgb(241,47,5)"/><text x="0.4533%" y="991.50"></text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (36 samples, 0.61%)</title><rect x="0.2033%" y="965" width="0.6098%" height="15" fill="rgb(233,42,35)"/><text x="0.4533%" y="975.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (36 samples, 0.61%)</title><rect x="0.2033%" y="949" width="0.6098%" height="15" fill="rgb(231,13,6)"/><text x="0.4533%" y="959.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (36 samples, 0.61%)</title><rect x="0.2033%" y="933" width="0.6098%" height="15" fill="rgb(207,181,40)"/><text x="0.4533%" y="943.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.36%)</title><rect x="0.4573%" y="917" width="0.3557%" height="15" fill="rgb(254,173,49)"/><text x="0.7073%" y="927.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.36%)</title><rect x="0.4573%" y="901" width="0.3557%" height="15" fill="rgb(221,1,38)"/><text x="0.7073%" y="911.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (21 samples, 0.36%)</title><rect x="0.4573%" y="885" width="0.3557%" height="15" fill="rgb(206,124,46)"/><text x="0.7073%" y="895.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="0.7114%" y="869" width="0.1016%" height="15" fill="rgb(249,21,11)"/><text x="0.9614%" y="879.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (6 samples, 0.10%)</title><rect x="0.7114%" y="853" width="0.1016%" height="15" fill="rgb(222,201,40)"/><text x="0.9614%" y="863.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="0.7114%" y="837" width="0.1016%" height="15" fill="rgb(235,61,29)"/><text x="0.9614%" y="847.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="0.7114%" y="821" width="0.1016%" height="15" fill="rgb(219,207,3)"/><text x="0.9614%" y="831.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (2 samples, 0.03%)</title><rect x="0.7791%" y="805" width="0.0339%" height="15" fill="rgb(222,56,46)"/><text x="1.0291%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="0.7791%" y="789" width="0.0339%" height="15" fill="rgb(239,76,54)"/><text x="1.0291%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="0.8130%" y="597" width="0.0169%" height="15" fill="rgb(231,124,27)"/><text x="1.0630%" y="607.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="981" width="0.0508%" height="15" fill="rgb(249,195,6)"/><text x="1.0630%" y="991.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="965" width="0.0508%" height="15" fill="rgb(237,174,47)"/><text x="1.0630%" y="975.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="949" width="0.0508%" height="15" fill="rgb(206,201,31)"/><text x="1.0630%" y="959.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="933" width="0.0508%" height="15" fill="rgb(231,57,52)"/><text x="1.0630%" y="943.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="917" width="0.0508%" height="15" fill="rgb(248,177,22)"/><text x="1.0630%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="901" width="0.0508%" height="15" fill="rgb(215,211,37)"/><text x="1.0630%" y="911.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (3 samples, 0.05%)</title><rect x="0.8130%" y="885" width="0.0508%" height="15" fill="rgb(241,128,51)"/><text x="1.0630%" y="895.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="869" width="0.0508%" height="15" fill="rgb(227,165,31)"/><text x="1.0630%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="853" width="0.0508%" height="15" fill="rgb(228,167,24)"/><text x="1.0630%" y="863.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="837" width="0.0508%" height="15" fill="rgb(228,143,12)"/><text x="1.0630%" y="847.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="821" width="0.0508%" height="15" fill="rgb(249,149,8)"/><text x="1.0630%" y="831.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (3 samples, 0.05%)</title><rect x="0.8130%" y="805" width="0.0508%" height="15" fill="rgb(243,35,44)"/><text x="1.0630%" y="815.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="789" width="0.0508%" height="15" fill="rgb(246,89,9)"/><text x="1.0630%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="773" width="0.0508%" height="15" fill="rgb(233,213,13)"/><text x="1.0630%" y="783.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="757" width="0.0508%" height="15" fill="rgb(233,141,41)"/><text x="1.0630%" y="767.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="741" width="0.0508%" height="15" fill="rgb(239,167,4)"/><text x="1.0630%" y="751.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (3 samples, 0.05%)</title><rect x="0.8130%" y="725" width="0.0508%" height="15" fill="rgb(209,217,16)"/><text x="1.0630%" y="735.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="709" width="0.0508%" height="15" fill="rgb(219,88,35)"/><text x="1.0630%" y="719.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="693" width="0.0508%" height="15" fill="rgb(220,193,23)"/><text x="1.0630%" y="703.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="677" width="0.0508%" height="15" fill="rgb(230,90,52)"/><text x="1.0630%" y="687.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="661" width="0.0508%" height="15" fill="rgb(252,106,19)"/><text x="1.0630%" y="671.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="645" width="0.0508%" height="15" fill="rgb(206,74,20)"/><text x="1.0630%" y="655.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="629" width="0.0508%" height="15" fill="rgb(230,138,44)"/><text x="1.0630%" y="639.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="0.8130%" y="613" width="0.0508%" height="15" fill="rgb(235,182,43)"/><text x="1.0630%" y="623.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (2 samples, 0.03%)</title><rect x="0.8299%" y="597" width="0.0339%" height="15" fill="rgb(242,16,51)"/><text x="1.0799%" y="607.50"></text></g><g><title>tokio::sync::oneshot::State::load (1 samples, 0.02%)</title><rect x="0.8469%" y="581" width="0.0169%" height="15" fill="rgb(248,9,4)"/><text x="1.0969%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.02%)</title><rect x="0.8469%" y="565" width="0.0169%" height="15" fill="rgb(210,31,22)"/><text x="1.0969%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="0.8469%" y="549" width="0.0169%" height="15" fill="rgb(239,54,39)"/><text x="1.0969%" y="559.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (2 samples, 0.03%)</title><rect x="0.8638%" y="805" width="0.0339%" height="15" fill="rgb(230,99,41)"/><text x="1.1138%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,tokio::loom::std::atomic_usize::AtomicUsize&gt;::send_unbounded (2 samples, 0.03%)</title><rect x="0.8638%" y="789" width="0.0339%" height="15" fill="rgb(253,106,12)"/><text x="1.1138%" y="799.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::try_send (2 samples, 0.03%)</title><rect x="0.8638%" y="773" width="0.0339%" height="15" fill="rgb(213,46,41)"/><text x="1.1138%" y="783.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.02%)</title><rect x="0.8808%" y="757" width="0.0169%" height="15" fill="rgb(215,133,35)"/><text x="1.1308%" y="767.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (6 samples, 0.10%)</title><rect x="0.8638%" y="933" width="0.1016%" height="15" fill="rgb(213,28,5)"/><text x="1.1138%" y="943.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 0.10%)</title><rect x="0.8638%" y="917" width="0.1016%" height="15" fill="rgb(215,77,49)"/><text x="1.1138%" y="927.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (6 samples, 0.10%)</title><rect x="0.8638%" y="901" width="0.1016%" height="15" fill="rgb(248,100,22)"/><text x="1.1138%" y="911.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (6 samples, 0.10%)</title><rect x="0.8638%" y="885" width="0.1016%" height="15" fill="rgb(208,67,9)"/><text x="1.1138%" y="895.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}} (6 samples, 0.10%)</title><rect x="0.8638%" y="869" width="0.1016%" height="15" fill="rgb(219,133,21)"/><text x="1.1138%" y="879.50"></text></g><g><title>hyper::client::PoolClient&lt;B&gt;::send_request_retryable (6 samples, 0.10%)</title><rect x="0.8638%" y="853" width="0.1016%" height="15" fill="rgb(246,46,29)"/><text x="1.1138%" y="863.50"></text></g><g><title>hyper::client::conn::SendRequest&lt;B&gt;::send_request_retryable (6 samples, 0.10%)</title><rect x="0.8638%" y="837" width="0.1016%" height="15" fill="rgb(246,185,52)"/><text x="1.1138%" y="847.50"></text></g><g><title>hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (6 samples, 0.10%)</title><rect x="0.8638%" y="821" width="0.1016%" height="15" fill="rgb(252,136,11)"/><text x="1.1138%" y="831.50"></text></g><g><title>tokio::sync::oneshot::channel (4 samples, 0.07%)</title><rect x="0.8977%" y="805" width="0.0678%" height="15" fill="rgb(219,138,53)"/><text x="1.1477%" y="815.50"></text></g><g><title>tokio::loom::std::atomic_usize::AtomicUsize::new (4 samples, 0.07%)</title><rect x="0.8977%" y="789" width="0.0678%" height="15" fill="rgb(211,51,23)"/><text x="1.1477%" y="799.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="0.9654%" y="837" width="0.0339%" height="15" fill="rgb(247,221,28)"/><text x="1.2154%" y="847.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::connection_for::{{closure}} (2 samples, 0.03%)</title><rect x="0.9654%" y="821" width="0.0339%" height="15" fill="rgb(251,222,45)"/><text x="1.2154%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.9824%" y="805" width="0.0169%" height="15" fill="rgb(217,162,53)"/><text x="1.2324%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.9824%" y="789" width="0.0169%" height="15" fill="rgb(229,93,14)"/><text x="1.2324%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.9824%" y="773" width="0.0169%" height="15" fill="rgb(209,67,49)"/><text x="1.2324%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="0.9824%" y="757" width="0.0169%" height="15" fill="rgb(213,87,29)"/><text x="1.2324%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="1.0163%" y="821" width="0.0339%" height="15" fill="rgb(205,151,52)"/><text x="1.2663%" y="831.50"></text></g><g><title>&lt;hyper::client::pool::Checkout&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="1.0163%" y="805" width="0.0339%" height="15" fill="rgb(253,215,39)"/><text x="1.2663%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="1.0332%" y="789" width="0.0169%" height="15" fill="rgb(221,220,41)"/><text x="1.2832%" y="799.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="1.0332%" y="773" width="0.0169%" height="15" fill="rgb(218,133,21)"/><text x="1.2832%" y="783.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="1.0332%" y="757" width="0.0169%" height="15" fill="rgb(221,193,43)"/><text x="1.2832%" y="767.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="1.0332%" y="741" width="0.0169%" height="15" fill="rgb(240,128,52)"/><text x="1.2832%" y="751.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="1.0332%" y="725" width="0.0169%" height="15" fill="rgb(253,114,12)"/><text x="1.2832%" y="735.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="1.0332%" y="709" width="0.0169%" height="15" fill="rgb(215,223,47)"/><text x="1.2832%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1.0332%" y="693" width="0.0169%" height="15" fill="rgb(248,225,23)"/><text x="1.2832%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.03%)</title><rect x="1.0501%" y="773" width="0.0339%" height="15" fill="rgb(250,108,0)"/><text x="1.3001%" y="783.50"></text></g><g><title>hyper::client::pool::Checkout&lt;T&gt;::checkout::{{closure}} (2 samples, 0.03%)</title><rect x="1.0501%" y="757" width="0.0339%" height="15" fill="rgb(228,208,7)"/><text x="1.3001%" y="767.50"></text></g><g><title>hyper::client::pool::IdlePopper&lt;T&gt;::pop (2 samples, 0.03%)</title><rect x="1.0501%" y="741" width="0.0339%" height="15" fill="rgb(244,45,10)"/><text x="1.3001%" y="751.50"></text></g><g><title>&lt;hyper::client::PoolClient&lt;B&gt; as hyper::client::pool::Poolable&gt;::reserve (1 samples, 0.02%)</title><rect x="1.0671%" y="725" width="0.0169%" height="15" fill="rgb(207,125,25)"/><text x="1.3171%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="1.0840%" y="677" width="0.0169%" height="15" fill="rgb(210,195,18)"/><text x="1.3340%" y="687.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (18 samples, 0.30%)</title><rect x="0.8130%" y="1013" width="0.3049%" height="15" fill="rgb(249,80,12)"/><text x="1.0630%" y="1023.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (18 samples, 0.30%)</title><rect x="0.8130%" y="997" width="0.3049%" height="15" fill="rgb(221,65,9)"/><text x="1.0630%" y="1007.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.8638%" y="981" width="0.2541%" height="15" fill="rgb(235,49,36)"/><text x="1.1138%" y="991.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.8638%" y="965" width="0.2541%" height="15" fill="rgb(225,32,20)"/><text x="1.1138%" y="975.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="0.8638%" y="949" width="0.2541%" height="15" fill="rgb(215,141,46)"/><text x="1.1138%" y="959.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="0.9654%" y="933" width="0.1524%" height="15" fill="rgb(250,160,47)"/><text x="1.2154%" y="943.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (9 samples, 0.15%)</title><rect x="0.9654%" y="917" width="0.1524%" height="15" fill="rgb(216,222,40)"/><text x="1.2154%" y="927.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="0.9654%" y="901" width="0.1524%" height="15" fill="rgb(234,217,39)"/><text x="1.2154%" y="911.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="0.9654%" y="885" width="0.1524%" height="15" fill="rgb(207,178,40)"/><text x="1.2154%" y="895.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="0.9654%" y="869" width="0.1524%" height="15" fill="rgb(221,136,13)"/><text x="1.2154%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (9 samples, 0.15%)</title><rect x="0.9654%" y="853" width="0.1524%" height="15" fill="rgb(249,199,10)"/><text x="1.2154%" y="863.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (7 samples, 0.12%)</title><rect x="0.9993%" y="837" width="0.1186%" height="15" fill="rgb(249,222,13)"/><text x="1.2493%" y="847.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4 samples, 0.07%)</title><rect x="1.0501%" y="821" width="0.0678%" height="15" fill="rgb(244,185,38)"/><text x="1.3001%" y="831.50"></text></g><g><title>&lt;hyper::client::pool::Checkout&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.07%)</title><rect x="1.0501%" y="805" width="0.0678%" height="15" fill="rgb(236,202,9)"/><text x="1.3001%" y="815.50"></text></g><g><title>hyper::client::pool::Checkout&lt;T&gt;::checkout (4 samples, 0.07%)</title><rect x="1.0501%" y="789" width="0.0678%" height="15" fill="rgb(250,229,37)"/><text x="1.3001%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="1.0840%" y="773" width="0.0339%" height="15" fill="rgb(206,174,23)"/><text x="1.3340%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="1.0840%" y="757" width="0.0339%" height="15" fill="rgb(211,33,43)"/><text x="1.3340%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="1.0840%" y="741" width="0.0339%" height="15" fill="rgb(245,58,50)"/><text x="1.3340%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="1.0840%" y="725" width="0.0339%" height="15" fill="rgb(244,68,36)"/><text x="1.3340%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.03%)</title><rect x="1.0840%" y="709" width="0.0339%" height="15" fill="rgb(232,229,15)"/><text x="1.3340%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="1.0840%" y="693" width="0.0339%" height="15" fill="rgb(254,30,23)"/><text x="1.3340%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="1.1009%" y="677" width="0.0169%" height="15" fill="rgb(235,160,14)"/><text x="1.3509%" y="687.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="1.1009%" y="661" width="0.0169%" height="15" fill="rgb(212,155,44)"/><text x="1.3509%" y="671.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.02%)</title><rect x="1.1348%" y="869" width="0.0169%" height="15" fill="rgb(226,2,50)"/><text x="1.3848%" y="879.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.1348%" y="853" width="0.0169%" height="15" fill="rgb(234,177,6)"/><text x="1.3848%" y="863.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.1348%" y="837" width="0.0169%" height="15" fill="rgb(217,24,9)"/><text x="1.3848%" y="847.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.1348%" y="821" width="0.0169%" height="15" fill="rgb(220,13,46)"/><text x="1.3848%" y="831.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.1348%" y="805" width="0.0169%" height="15" fill="rgb(239,221,27)"/><text x="1.3848%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.1348%" y="789" width="0.0169%" height="15" fill="rgb(222,198,25)"/><text x="1.3848%" y="799.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project (1 samples, 0.02%)</title><rect x="1.1348%" y="773" width="0.0169%" height="15" fill="rgb(211,99,13)"/><text x="1.3848%" y="783.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="1013" width="0.0508%" height="15" fill="rgb(232,111,31)"/><text x="1.3679%" y="1023.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="997" width="0.0508%" height="15" fill="rgb(245,82,37)"/><text x="1.3679%" y="1007.50"></text></g><g><title>&lt;hyper::client::ResponseFuture as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="981" width="0.0508%" height="15" fill="rgb(227,149,46)"/><text x="1.3679%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="965" width="0.0508%" height="15" fill="rgb(218,36,50)"/><text x="1.3679%" y="975.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="949" width="0.0508%" height="15" fill="rgb(226,80,48)"/><text x="1.3679%" y="959.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (3 samples, 0.05%)</title><rect x="1.1179%" y="933" width="0.0508%" height="15" fill="rgb(238,224,15)"/><text x="1.3679%" y="943.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="917" width="0.0508%" height="15" fill="rgb(241,136,10)"/><text x="1.3679%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="901" width="0.0508%" height="15" fill="rgb(208,32,45)"/><text x="1.3679%" y="911.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.1179%" y="885" width="0.0508%" height="15" fill="rgb(207,135,9)"/><text x="1.3679%" y="895.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (1 samples, 0.02%)</title><rect x="1.1518%" y="869" width="0.0169%" height="15" fill="rgb(206,86,44)"/><text x="1.4018%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="1.1518%" y="853" width="0.0169%" height="15" fill="rgb(245,177,15)"/><text x="1.4018%" y="863.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.02%)</title><rect x="1.2026%" y="661" width="0.0169%" height="15" fill="rgb(206,64,50)"/><text x="1.4526%" y="671.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="1.1687%" y="789" width="0.0678%" height="15" fill="rgb(234,36,40)"/><text x="1.4187%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.07%)</title><rect x="1.1687%" y="773" width="0.0678%" height="15" fill="rgb(213,64,8)"/><text x="1.4187%" y="783.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (4 samples, 0.07%)</title><rect x="1.1687%" y="757" width="0.0678%" height="15" fill="rgb(210,75,36)"/><text x="1.4187%" y="767.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="1.1687%" y="741" width="0.0678%" height="15" fill="rgb(229,88,21)"/><text x="1.4187%" y="751.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}}::{{closure}} (3 samples, 0.05%)</title><rect x="1.1856%" y="725" width="0.0508%" height="15" fill="rgb(252,204,47)"/><text x="1.4356%" y="735.50"></text></g><g><title>core::mem::drop (3 samples, 0.05%)</title><rect x="1.1856%" y="709" width="0.0508%" height="15" fill="rgb(208,77,27)"/><text x="1.4356%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="1.1856%" y="693" width="0.0508%" height="15" fill="rgb(221,76,26)"/><text x="1.4356%" y="703.50"></text></g><g><title>&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="1.2026%" y="677" width="0.0339%" height="15" fill="rgb(225,139,18)"/><text x="1.4526%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="1.2195%" y="661" width="0.0169%" height="15" fill="rgb(230,137,11)"/><text x="1.4695%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="1.2195%" y="645" width="0.0169%" height="15" fill="rgb(212,28,1)"/><text x="1.4695%" y="655.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="1.2195%" y="629" width="0.0169%" height="15" fill="rgb(248,164,17)"/><text x="1.4695%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1.2195%" y="613" width="0.0169%" height="15" fill="rgb(222,171,42)"/><text x="1.4695%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="1.2703%" y="597" width="0.0169%" height="15" fill="rgb(243,84,45)"/><text x="1.5203%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="1.2703%" y="581" width="0.0169%" height="15" fill="rgb(252,49,23)"/><text x="1.5203%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="1.2703%" y="565" width="0.0169%" height="15" fill="rgb(215,19,7)"/><text x="1.5203%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="1.2703%" y="549" width="0.0169%" height="15" fill="rgb(238,81,41)"/><text x="1.5203%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="1.2703%" y="533" width="0.0169%" height="15" fill="rgb(210,199,37)"/><text x="1.5203%" y="543.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="1.2703%" y="517" width="0.0169%" height="15" fill="rgb(244,192,49)"/><text x="1.5203%" y="527.50"></text></g><g><title>&lt;hyper::client::connect::ExtraEnvelope&lt;T&gt; as hyper::client::connect::ExtraInner&gt;::set (3 samples, 0.05%)</title><rect x="1.2534%" y="629" width="0.0508%" height="15" fill="rgb(226,211,11)"/><text x="1.5034%" y="639.50"></text></g><g><title>http::extensions::Extensions::insert (3 samples, 0.05%)</title><rect x="1.2534%" y="613" width="0.0508%" height="15" fill="rgb(236,162,54)"/><text x="1.5034%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="1.2873%" y="597" width="0.0169%" height="15" fill="rgb(220,229,9)"/><text x="1.5373%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="1.2873%" y="581" width="0.0169%" height="15" fill="rgb(250,87,22)"/><text x="1.5373%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="1.2873%" y="565" width="0.0169%" height="15" fill="rgb(239,43,17)"/><text x="1.5373%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="1.2873%" y="549" width="0.0169%" height="15" fill="rgb(231,177,25)"/><text x="1.5373%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="1.2873%" y="533" width="0.0169%" height="15" fill="rgb(219,179,1)"/><text x="1.5373%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (1 samples, 0.02%)</title><rect x="1.2873%" y="517" width="0.0169%" height="15" fill="rgb(238,219,53)"/><text x="1.5373%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.02%)</title><rect x="1.2873%" y="501" width="0.0169%" height="15" fill="rgb(232,167,36)"/><text x="1.5373%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (1 samples, 0.02%)</title><rect x="1.2873%" y="485" width="0.0169%" height="15" fill="rgb(244,19,51)"/><text x="1.5373%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="1.2873%" y="469" width="0.0169%" height="15" fill="rgb(224,6,22)"/><text x="1.5373%" y="479.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="1.2873%" y="453" width="0.0169%" height="15" fill="rgb(224,145,5)"/><text x="1.5373%" y="463.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="1.2534%" y="709" width="0.0678%" height="15" fill="rgb(234,130,49)"/><text x="1.5034%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.07%)</title><rect x="1.2534%" y="693" width="0.0678%" height="15" fill="rgb(254,6,2)"/><text x="1.5034%" y="703.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (4 samples, 0.07%)</title><rect x="1.2534%" y="677" width="0.0678%" height="15" fill="rgb(208,96,46)"/><text x="1.5034%" y="687.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (4 samples, 0.07%)</title><rect x="1.2534%" y="661" width="0.0678%" height="15" fill="rgb(239,3,39)"/><text x="1.5034%" y="671.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request::{{closure}}::{{closure}} (4 samples, 0.07%)</title><rect x="1.2534%" y="645" width="0.0678%" height="15" fill="rgb(233,210,1)"/><text x="1.5034%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="1.3042%" y="629" width="0.0169%" height="15" fill="rgb(244,137,37)"/><text x="1.5542%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="1.3042%" y="613" width="0.0169%" height="15" fill="rgb(240,136,2)"/><text x="1.5542%" y="623.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="1.1687%" y="869" width="0.1694%" height="15" fill="rgb(239,18,37)"/><text x="1.4187%" y="879.50"></text></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="1.1687%" y="853" width="0.1694%" height="15" fill="rgb(218,185,22)"/><text x="1.4187%" y="863.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="1.1687%" y="837" width="0.1694%" height="15" fill="rgb(225,218,4)"/><text x="1.4187%" y="847.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="1.1687%" y="821" width="0.1694%" height="15" fill="rgb(230,182,32)"/><text x="1.4187%" y="831.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="1.1687%" y="805" width="0.1694%" height="15" fill="rgb(242,56,43)"/><text x="1.4187%" y="815.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="1.2364%" y="789" width="0.1016%" height="15" fill="rgb(233,99,24)"/><text x="1.4864%" y="799.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (6 samples, 0.10%)</title><rect x="1.2364%" y="773" width="0.1016%" height="15" fill="rgb(234,209,42)"/><text x="1.4864%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="1.2364%" y="757" width="0.1016%" height="15" fill="rgb(227,7,12)"/><text x="1.4864%" y="767.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="1.2364%" y="741" width="0.1016%" height="15" fill="rgb(245,203,43)"/><text x="1.4864%" y="751.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.10%)</title><rect x="1.2364%" y="725" width="0.1016%" height="15" fill="rgb(238,205,33)"/><text x="1.4864%" y="735.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3211%" y="709" width="0.0169%" height="15" fill="rgb(231,56,7)"/><text x="1.5711%" y="719.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.02%)</title><rect x="1.3211%" y="693" width="0.0169%" height="15" fill="rgb(244,186,29)"/><text x="1.5711%" y="703.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3211%" y="677" width="0.0169%" height="15" fill="rgb(234,111,31)"/><text x="1.5711%" y="687.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3211%" y="661" width="0.0169%" height="15" fill="rgb(241,149,10)"/><text x="1.5711%" y="671.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="1.3381%" y="821" width="0.0339%" height="15" fill="rgb(249,206,44)"/><text x="1.5881%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.03%)</title><rect x="1.3381%" y="805" width="0.0339%" height="15" fill="rgb(251,153,30)"/><text x="1.5881%" y="815.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnOnce1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_once::{{closure}} (2 samples, 0.03%)</title><rect x="1.3381%" y="789" width="0.0339%" height="15" fill="rgb(239,152,38)"/><text x="1.5881%" y="799.50"></text></g><g><title>&lt;T as futures_util::fns::FnOnce1&lt;A&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="1.3381%" y="773" width="0.0339%" height="15" fill="rgb(249,139,47)"/><text x="1.5881%" y="783.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="1013" width="0.2202%" height="15" fill="rgb(244,64,35)"/><text x="1.4187%" y="1023.50"></text></g><g><title>&lt;hyper::client::ResponseFuture as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="997" width="0.2202%" height="15" fill="rgb(216,46,15)"/><text x="1.4187%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="981" width="0.2202%" height="15" fill="rgb(250,74,19)"/><text x="1.4187%" y="991.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="965" width="0.2202%" height="15" fill="rgb(249,42,33)"/><text x="1.4187%" y="975.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (13 samples, 0.22%)</title><rect x="1.1687%" y="949" width="0.2202%" height="15" fill="rgb(242,149,17)"/><text x="1.4187%" y="959.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="933" width="0.2202%" height="15" fill="rgb(244,29,21)"/><text x="1.4187%" y="943.50"></text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="917" width="0.2202%" height="15" fill="rgb(220,130,37)"/><text x="1.4187%" y="927.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (13 samples, 0.22%)</title><rect x="1.1687%" y="901" width="0.2202%" height="15" fill="rgb(211,67,2)"/><text x="1.4187%" y="911.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (13 samples, 0.22%)</title><rect x="1.1687%" y="885" width="0.2202%" height="15" fill="rgb(235,68,52)"/><text x="1.4187%" y="895.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.3381%" y="869" width="0.0508%" height="15" fill="rgb(246,142,3)"/><text x="1.5881%" y="879.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.3381%" y="853" width="0.0508%" height="15" fill="rgb(241,25,7)"/><text x="1.5881%" y="863.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.05%)</title><rect x="1.3381%" y="837" width="0.0508%" height="15" fill="rgb(242,119,39)"/><text x="1.5881%" y="847.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3720%" y="821" width="0.0169%" height="15" fill="rgb(241,98,45)"/><text x="1.6220%" y="831.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.02%)</title><rect x="1.3720%" y="805" width="0.0169%" height="15" fill="rgb(254,28,30)"/><text x="1.6220%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Then&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3720%" y="789" width="0.0169%" height="15" fill="rgb(241,142,54)"/><text x="1.6220%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="1.3720%" y="773" width="0.0169%" height="15" fill="rgb(222,85,15)"/><text x="1.6220%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4058%" y="981" width="0.0169%" height="15" fill="rgb(210,85,47)"/><text x="1.6558%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4058%" y="965" width="0.0169%" height="15" fill="rgb(224,206,25)"/><text x="1.6558%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4058%" y="949" width="0.0169%" height="15" fill="rgb(243,201,19)"/><text x="1.6558%" y="959.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.02%)</title><rect x="1.4397%" y="901" width="0.0169%" height="15" fill="rgb(236,59,4)"/><text x="1.6897%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4397%" y="885" width="0.0169%" height="15" fill="rgb(254,179,45)"/><text x="1.6897%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4397%" y="869" width="0.0169%" height="15" fill="rgb(226,14,10)"/><text x="1.6897%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4397%" y="853" width="0.0169%" height="15" fill="rgb(244,27,41)"/><text x="1.6897%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.4397%" y="837" width="0.0169%" height="15" fill="rgb(235,35,32)"/><text x="1.6897%" y="847.50"></text></g><g><title>__GI___clone (5 samples, 0.08%)</title><rect x="1.3889%" y="1013" width="0.0847%" height="15" fill="rgb(218,68,31)"/><text x="1.6389%" y="1023.50"></text></g><g><title>start_thread (5 samples, 0.08%)</title><rect x="1.3889%" y="997" width="0.0847%" height="15" fill="rgb(207,120,37)"/><text x="1.6389%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 0.05%)</title><rect x="1.4228%" y="981" width="0.0508%" height="15" fill="rgb(227,98,0)"/><text x="1.6728%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.03%)</title><rect x="1.4397%" y="965" width="0.0339%" height="15" fill="rgb(207,7,3)"/><text x="1.6897%" y="975.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.03%)</title><rect x="1.4397%" y="949" width="0.0339%" height="15" fill="rgb(206,98,19)"/><text x="1.6897%" y="959.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 0.03%)</title><rect x="1.4397%" y="933" width="0.0339%" height="15" fill="rgb(217,5,26)"/><text x="1.6897%" y="943.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 0.03%)</title><rect x="1.4397%" y="917" width="0.0339%" height="15" fill="rgb(235,190,38)"/><text x="1.6897%" y="927.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.02%)</title><rect x="1.4566%" y="901" width="0.0169%" height="15" fill="rgb(247,86,24)"/><text x="1.7066%" y="911.50"></text></g><g><title>__GI___sysconf (1 samples, 0.02%)</title><rect x="1.4566%" y="885" width="0.0169%" height="15" fill="rgb(205,101,16)"/><text x="1.7066%" y="895.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="1.4736%" y="1013" width="0.0169%" height="15" fill="rgb(246,168,33)"/><text x="1.7236%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="1.5413%" y="901" width="0.0169%" height="15" fill="rgb(231,114,1)"/><text x="1.7913%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="1.5413%" y="885" width="0.0169%" height="15" fill="rgb(207,184,53)"/><text x="1.7913%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="1.5413%" y="869" width="0.0169%" height="15" fill="rgb(224,95,51)"/><text x="1.7913%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="1.5413%" y="853" width="0.0169%" height="15" fill="rgb(212,188,45)"/><text x="1.7913%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="1.5413%" y="837" width="0.0169%" height="15" fill="rgb(223,154,38)"/><text x="1.7913%" y="847.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.12%)</title><rect x="1.5752%" y="789" width="0.1186%" height="15" fill="rgb(251,22,52)"/><text x="1.8252%" y="799.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="1.6260%" y="773" width="0.0678%" height="15" fill="rgb(229,209,22)"/><text x="1.8760%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.20%)</title><rect x="1.5413%" y="949" width="0.2033%" height="15" fill="rgb(234,138,34)"/><text x="1.7913%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.20%)</title><rect x="1.5413%" y="933" width="0.2033%" height="15" fill="rgb(212,95,11)"/><text x="1.7913%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.20%)</title><rect x="1.5413%" y="917" width="0.2033%" height="15" fill="rgb(240,179,47)"/><text x="1.7913%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.19%)</title><rect x="1.5583%" y="901" width="0.1863%" height="15" fill="rgb(240,163,11)"/><text x="1.8083%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.19%)</title><rect x="1.5583%" y="885" width="0.1863%" height="15" fill="rgb(236,37,12)"/><text x="1.8083%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.19%)</title><rect x="1.5583%" y="869" width="0.1863%" height="15" fill="rgb(232,164,16)"/><text x="1.8083%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.19%)</title><rect x="1.5583%" y="853" width="0.1863%" height="15" fill="rgb(244,205,15)"/><text x="1.8083%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.19%)</title><rect x="1.5583%" y="837" width="0.1863%" height="15" fill="rgb(223,117,47)"/><text x="1.8083%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.19%)</title><rect x="1.5583%" y="821" width="0.1863%" height="15" fill="rgb(244,107,35)"/><text x="1.8083%" y="831.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.19%)</title><rect x="1.5583%" y="805" width="0.1863%" height="15" fill="rgb(205,140,8)"/><text x="1.8083%" y="815.50"></text></g><g><title>__rdl_alloc (3 samples, 0.05%)</title><rect x="1.6938%" y="789" width="0.0508%" height="15" fill="rgb(228,84,46)"/><text x="1.9438%" y="799.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.30%)</title><rect x="1.5075%" y="997" width="0.3049%" height="15" fill="rgb(254,188,9)"/><text x="1.7575%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (16 samples, 0.27%)</title><rect x="1.5413%" y="981" width="0.2710%" height="15" fill="rgb(206,112,54)"/><text x="1.7913%" y="991.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (16 samples, 0.27%)</title><rect x="1.5413%" y="965" width="0.2710%" height="15" fill="rgb(216,84,49)"/><text x="1.7913%" y="975.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (4 samples, 0.07%)</title><rect x="1.7446%" y="949" width="0.0678%" height="15" fill="rgb(214,194,35)"/><text x="1.9946%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="1.8123%" y="933" width="0.0169%" height="15" fill="rgb(249,28,3)"/><text x="2.0623%" y="943.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.02%)</title><rect x="1.8123%" y="917" width="0.0169%" height="15" fill="rgb(222,56,52)"/><text x="2.0623%" y="927.50"></text></g><g><title>alloc::collections::btree::navigate::replace (1 samples, 0.02%)</title><rect x="1.8123%" y="901" width="0.0169%" height="15" fill="rgb(245,217,50)"/><text x="2.0623%" y="911.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (1 samples, 0.02%)</title><rect x="1.8123%" y="885" width="0.0169%" height="15" fill="rgb(213,201,24)"/><text x="2.0623%" y="895.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.02%)</title><rect x="1.8123%" y="869" width="0.0169%" height="15" fill="rgb(248,116,28)"/><text x="2.0623%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.07%)</title><rect x="1.8462%" y="773" width="0.0678%" height="15" fill="rgb(219,72,43)"/><text x="2.0962%" y="783.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (1 samples, 0.02%)</title><rect x="1.8970%" y="757" width="0.0169%" height="15" fill="rgb(209,138,14)"/><text x="2.1470%" y="767.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.02%)</title><rect x="1.8970%" y="741" width="0.0169%" height="15" fill="rgb(222,18,33)"/><text x="2.1470%" y="751.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,HandleType&gt;::reborrow (1 samples, 0.02%)</title><rect x="2.0156%" y="661" width="0.0169%" height="15" fill="rgb(213,199,7)"/><text x="2.2656%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="1.9817%" y="725" width="0.1186%" height="15" fill="rgb(250,110,10)"/><text x="2.2317%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.12%)</title><rect x="1.9817%" y="709" width="0.1186%" height="15" fill="rgb(248,123,6)"/><text x="2.2317%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::replace (7 samples, 0.12%)</title><rect x="1.9817%" y="693" width="0.1186%" height="15" fill="rgb(206,91,31)"/><text x="2.2317%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (7 samples, 0.12%)</title><rect x="1.9817%" y="677" width="0.1186%" height="15" fill="rgb(211,154,13)"/><text x="2.2317%" y="687.50"></text></g><g><title>core::ptr::read (4 samples, 0.07%)</title><rect x="2.0325%" y="661" width="0.0678%" height="15" fill="rgb(225,148,7)"/><text x="2.2825%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (4 samples, 0.07%)</title><rect x="2.1003%" y="725" width="0.0678%" height="15" fill="rgb(220,160,43)"/><text x="2.3503%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (4 samples, 0.07%)</title><rect x="2.1003%" y="709" width="0.0678%" height="15" fill="rgb(213,52,39)"/><text x="2.3503%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.07%)</title><rect x="2.1003%" y="693" width="0.0678%" height="15" fill="rgb(243,137,7)"/><text x="2.3503%" y="703.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="2.1003%" y="677" width="0.0678%" height="15" fill="rgb(230,79,13)"/><text x="2.3503%" y="687.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="2.1511%" y="661" width="0.0169%" height="15" fill="rgb(247,105,23)"/><text x="2.4011%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.03%)</title><rect x="2.1680%" y="677" width="0.0339%" height="15" fill="rgb(223,179,41)"/><text x="2.4180%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (1 samples, 0.02%)</title><rect x="2.1850%" y="661" width="0.0169%" height="15" fill="rgb(218,9,34)"/><text x="2.4350%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.02%)</title><rect x="2.1850%" y="645" width="0.0169%" height="15" fill="rgb(222,106,8)"/><text x="2.4350%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1 samples, 0.02%)</title><rect x="2.6762%" y="565" width="0.0169%" height="15" fill="rgb(211,220,0)"/><text x="2.9262%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (1 samples, 0.02%)</title><rect x="2.6762%" y="549" width="0.0169%" height="15" fill="rgb(229,52,16)"/><text x="2.9262%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.02%)</title><rect x="2.6762%" y="533" width="0.0169%" height="15" fill="rgb(212,155,18)"/><text x="2.9262%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (9 samples, 0.15%)</title><rect x="2.6931%" y="565" width="0.1524%" height="15" fill="rgb(242,21,14)"/><text x="2.9431%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (3 samples, 0.05%)</title><rect x="2.7947%" y="549" width="0.0508%" height="15" fill="rgb(222,19,48)"/><text x="3.0447%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (2 samples, 0.03%)</title><rect x="2.8117%" y="533" width="0.0339%" height="15" fill="rgb(232,45,27)"/><text x="3.0617%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,HandleType&gt;::reborrow (1 samples, 0.02%)</title><rect x="2.8455%" y="565" width="0.0169%" height="15" fill="rgb(249,103,42)"/><text x="3.0955%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (26 samples, 0.44%)</title><rect x="2.5068%" y="581" width="0.4404%" height="15" fill="rgb(246,81,33)"/><text x="2.7568%" y="591.50"></text></g><g><title>core::ptr::read (5 samples, 0.08%)</title><rect x="2.8625%" y="565" width="0.0847%" height="15" fill="rgb(252,33,42)"/><text x="3.1125%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (27 samples, 0.46%)</title><rect x="2.5068%" y="613" width="0.4573%" height="15" fill="rgb(209,212,41)"/><text x="2.7568%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::replace (27 samples, 0.46%)</title><rect x="2.5068%" y="597" width="0.4573%" height="15" fill="rgb(207,154,6)"/><text x="2.7568%" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="2.9472%" y="581" width="0.0169%" height="15" fill="rgb(223,64,47)"/><text x="3.1972%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.49%)</title><rect x="2.4898%" y="629" width="0.4912%" height="15" fill="rgb(211,161,38)"/><text x="2.7398%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.02%)</title><rect x="2.9641%" y="613" width="0.0169%" height="15" fill="rgb(219,138,40)"/><text x="3.2141%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (3 samples, 0.05%)</title><rect x="2.9810%" y="629" width="0.0508%" height="15" fill="rgb(241,228,46)"/><text x="3.2310%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.05%)</title><rect x="2.9810%" y="613" width="0.0508%" height="15" fill="rgb(223,209,38)"/><text x="3.2310%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="2.9810%" y="597" width="0.0508%" height="15" fill="rgb(236,164,45)"/><text x="3.2310%" y="607.50"></text></g><g><title>_int_free (3 samples, 0.05%)</title><rect x="2.9810%" y="581" width="0.0508%" height="15" fill="rgb(231,15,5)"/><text x="3.2310%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.03%)</title><rect x="3.0318%" y="581" width="0.0339%" height="15" fill="rgb(252,35,15)"/><text x="3.2818%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (1 samples, 0.02%)</title><rect x="3.0488%" y="565" width="0.0169%" height="15" fill="rgb(248,181,18)"/><text x="3.2988%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (1 samples, 0.02%)</title><rect x="3.0488%" y="549" width="0.0169%" height="15" fill="rgb(233,39,42)"/><text x="3.2988%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (1 samples, 0.02%)</title><rect x="3.0488%" y="533" width="0.0169%" height="15" fill="rgb(238,110,33)"/><text x="3.2988%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.02%)</title><rect x="3.0488%" y="517" width="0.0169%" height="15" fill="rgb(233,195,10)"/><text x="3.2988%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="3.0657%" y="549" width="0.0169%" height="15" fill="rgb(254,105,3)"/><text x="3.3157%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.02%)</title><rect x="3.2182%" y="469" width="0.0169%" height="15" fill="rgb(221,225,9)"/><text x="3.4682%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,HandleType&gt;::reborrow (1 samples, 0.02%)</title><rect x="3.2351%" y="469" width="0.0169%" height="15" fill="rgb(224,227,45)"/><text x="3.4851%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (12 samples, 0.20%)</title><rect x="3.1673%" y="485" width="0.2033%" height="15" fill="rgb(229,198,43)"/><text x="3.4173%" y="495.50"></text></g><g><title>core::ptr::read (7 samples, 0.12%)</title><rect x="3.2520%" y="469" width="0.1186%" height="15" fill="rgb(206,209,35)"/><text x="3.5020%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.22%)</title><rect x="3.1673%" y="533" width="0.2202%" height="15" fill="rgb(245,195,53)"/><text x="3.4173%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (13 samples, 0.22%)</title><rect x="3.1673%" y="517" width="0.2202%" height="15" fill="rgb(240,92,26)"/><text x="3.4173%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::replace (13 samples, 0.22%)</title><rect x="3.1673%" y="501" width="0.2202%" height="15" fill="rgb(207,40,23)"/><text x="3.4173%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="3.3706%" y="485" width="0.0169%" height="15" fill="rgb(223,111,35)"/><text x="3.6206%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="3.3875%" y="485" width="0.0169%" height="15" fill="rgb(229,147,28)"/><text x="3.6375%" y="495.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="3.4045%" y="485" width="0.0169%" height="15" fill="rgb(211,29,28)"/><text x="3.6545%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="3.4045%" y="469" width="0.0169%" height="15" fill="rgb(228,72,33)"/><text x="3.6545%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (7 samples, 0.12%)</title><rect x="3.3875%" y="533" width="0.1186%" height="15" fill="rgb(205,214,31)"/><text x="3.6375%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (7 samples, 0.12%)</title><rect x="3.3875%" y="517" width="0.1186%" height="15" fill="rgb(224,111,15)"/><text x="3.6375%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.12%)</title><rect x="3.3875%" y="501" width="0.1186%" height="15" fill="rgb(253,21,26)"/><text x="3.6375%" y="511.50"></text></g><g><title>_int_free (5 samples, 0.08%)</title><rect x="3.4214%" y="485" width="0.0847%" height="15" fill="rgb(245,139,43)"/><text x="3.6714%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.53%)</title><rect x="3.0318%" y="597" width="0.5251%" height="15" fill="rgb(252,170,7)"/><text x="3.2818%" y="607.50"></text></g><g><title>core::mem::drop (29 samples, 0.49%)</title><rect x="3.0657%" y="581" width="0.4912%" height="15" fill="rgb(231,118,14)"/><text x="3.3157%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.49%)</title><rect x="3.0657%" y="565" width="0.4912%" height="15" fill="rgb(238,83,0)"/><text x="3.3157%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.47%)</title><rect x="3.0827%" y="549" width="0.4743%" height="15" fill="rgb(221,39,39)"/><text x="3.3327%" y="559.50"></text></g><g><title>core::mem::drop (3 samples, 0.05%)</title><rect x="3.5061%" y="533" width="0.0508%" height="15" fill="rgb(222,119,46)"/><text x="3.7561%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="3.5061%" y="517" width="0.0508%" height="15" fill="rgb(222,165,49)"/><text x="3.7561%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="3.5061%" y="501" width="0.0508%" height="15" fill="rgb(219,113,52)"/><text x="3.7561%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="3.5230%" y="485" width="0.0339%" height="15" fill="rgb(214,7,15)"/><text x="3.7730%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="3.5230%" y="469" width="0.0339%" height="15" fill="rgb(235,32,4)"/><text x="3.7730%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="3.5230%" y="453" width="0.0339%" height="15" fill="rgb(238,90,54)"/><text x="3.7730%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.03%)</title><rect x="3.5230%" y="437" width="0.0339%" height="15" fill="rgb(213,208,19)"/><text x="3.7730%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="3.5230%" y="421" width="0.0339%" height="15" fill="rgb(233,156,4)"/><text x="3.7730%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="3.5230%" y="405" width="0.0339%" height="15" fill="rgb(207,194,5)"/><text x="3.7730%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="3.5569%" y="597" width="0.0169%" height="15" fill="rgb(206,111,30)"/><text x="3.8069%" y="607.50"></text></g><g><title>_int_free (13 samples, 0.22%)</title><rect x="3.5738%" y="597" width="0.2202%" height="15" fill="rgb(243,70,54)"/><text x="3.8238%" y="607.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="3.8110%" y="501" width="0.0169%" height="15" fill="rgb(242,28,8)"/><text x="4.0610%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 1.86%)</title><rect x="2.1680%" y="693" width="1.8631%" height="15" fill="rgb(219,106,18)"/><text x="2.4180%" y="703.50">&lt;..</text></g><g><title>core::mem::drop (108 samples, 1.83%)</title><rect x="2.2019%" y="677" width="1.8293%" height="15" fill="rgb(244,222,10)"/><text x="2.4519%" y="687.50">c..</text></g><g><title>core::ptr::drop_in_place (108 samples, 1.83%)</title><rect x="2.2019%" y="661" width="1.8293%" height="15" fill="rgb(236,179,52)"/><text x="2.4519%" y="671.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 1.83%)</title><rect x="2.2019%" y="645" width="1.8293%" height="15" fill="rgb(213,23,39)"/><text x="2.4519%" y="655.50">&lt;..</text></g><g><title>core::mem::drop (59 samples, 1.00%)</title><rect x="3.0318%" y="629" width="0.9993%" height="15" fill="rgb(238,48,10)"/><text x="3.2818%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (59 samples, 1.00%)</title><rect x="3.0318%" y="613" width="0.9993%" height="15" fill="rgb(251,196,23)"/><text x="3.2818%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.24%)</title><rect x="3.7940%" y="597" width="0.2371%" height="15" fill="rgb(250,152,24)"/><text x="4.0440%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.24%)</title><rect x="3.7940%" y="581" width="0.2371%" height="15" fill="rgb(209,150,17)"/><text x="4.0440%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.24%)</title><rect x="3.7940%" y="565" width="0.2371%" height="15" fill="rgb(234,202,34)"/><text x="4.0440%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.24%)</title><rect x="3.7940%" y="549" width="0.2371%" height="15" fill="rgb(253,148,53)"/><text x="4.0440%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (13 samples, 0.22%)</title><rect x="3.8110%" y="533" width="0.2202%" height="15" fill="rgb(218,129,16)"/><text x="4.0610%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.22%)</title><rect x="3.8110%" y="517" width="0.2202%" height="15" fill="rgb(216,85,19)"/><text x="4.0610%" y="527.50"></text></g><g><title>_int_free (12 samples, 0.20%)</title><rect x="3.8279%" y="501" width="0.2033%" height="15" fill="rgb(235,228,7)"/><text x="4.0779%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 2.29%)</title><rect x="1.8123%" y="997" width="2.2866%" height="15" fill="rgb(245,175,0)"/><text x="2.0623%" y="1007.50">&lt;..</text></g><g><title>core::mem::drop (135 samples, 2.29%)</title><rect x="1.8123%" y="981" width="2.2866%" height="15" fill="rgb(208,168,36)"/><text x="2.0623%" y="991.50">c..</text></g><g><title>core::ptr::drop_in_place (135 samples, 2.29%)</title><rect x="1.8123%" y="965" width="2.2866%" height="15" fill="rgb(246,171,24)"/><text x="2.0623%" y="975.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 2.29%)</title><rect x="1.8123%" y="949" width="2.2866%" height="15" fill="rgb(215,142,24)"/><text x="2.0623%" y="959.50">&lt;..</text></g><g><title>core::mem::drop (134 samples, 2.27%)</title><rect x="1.8293%" y="933" width="2.2696%" height="15" fill="rgb(250,187,7)"/><text x="2.0793%" y="943.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="917" width="2.2696%" height="15" fill="rgb(228,66,33)"/><text x="2.0793%" y="927.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="901" width="2.2696%" height="15" fill="rgb(234,215,21)"/><text x="2.0793%" y="911.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="885" width="2.2696%" height="15" fill="rgb(222,191,20)"/><text x="2.0793%" y="895.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 2.27%)</title><rect x="1.8293%" y="869" width="2.2696%" height="15" fill="rgb(245,79,54)"/><text x="2.0793%" y="879.50">&lt;..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="853" width="2.2696%" height="15" fill="rgb(240,10,37)"/><text x="2.0793%" y="863.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="837" width="2.2696%" height="15" fill="rgb(214,192,32)"/><text x="2.0793%" y="847.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="821" width="2.2696%" height="15" fill="rgb(209,36,54)"/><text x="2.0793%" y="831.50">c..</text></g><g><title>core::ptr::drop_in_place (134 samples, 2.27%)</title><rect x="1.8293%" y="805" width="2.2696%" height="15" fill="rgb(220,10,11)"/><text x="2.0793%" y="815.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 2.27%)</title><rect x="1.8293%" y="789" width="2.2696%" height="15" fill="rgb(221,106,17)"/><text x="2.0793%" y="799.50">&lt;..</text></g><g><title>core::mem::drop (129 samples, 2.18%)</title><rect x="1.9140%" y="773" width="2.1850%" height="15" fill="rgb(251,142,44)"/><text x="2.1640%" y="783.50">c..</text></g><g><title>core::ptr::drop_in_place (129 samples, 2.18%)</title><rect x="1.9140%" y="757" width="2.1850%" height="15" fill="rgb(238,13,15)"/><text x="2.1640%" y="767.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 2.18%)</title><rect x="1.9140%" y="741" width="2.1850%" height="15" fill="rgb(208,107,27)"/><text x="2.1640%" y="751.50">&lt;..</text></g><g><title>core::mem::drop (114 samples, 1.93%)</title><rect x="2.1680%" y="725" width="1.9309%" height="15" fill="rgb(205,136,37)"/><text x="2.4180%" y="735.50">c..</text></g><g><title>core::ptr::drop_in_place (114 samples, 1.93%)</title><rect x="2.1680%" y="709" width="1.9309%" height="15" fill="rgb(250,205,27)"/><text x="2.4180%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="4.0312%" y="693" width="0.0678%" height="15" fill="rgb(210,80,43)"/><text x="4.2812%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="4.0481%" y="677" width="0.0508%" height="15" fill="rgb(247,160,36)"/><text x="4.2981%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="4.0481%" y="661" width="0.0508%" height="15" fill="rgb(234,13,49)"/><text x="4.2981%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="4.0481%" y="645" width="0.0508%" height="15" fill="rgb(234,122,0)"/><text x="4.2981%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="4.0820%" y="629" width="0.0169%" height="15" fill="rgb(207,146,38)"/><text x="4.3320%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="4.0820%" y="613" width="0.0169%" height="15" fill="rgb(207,177,25)"/><text x="4.3320%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="4.0820%" y="597" width="0.0169%" height="15" fill="rgb(211,178,42)"/><text x="4.3320%" y="607.50"></text></g><g><title>miniz_oxide::MZFlush::new (2 samples, 0.03%)</title><rect x="4.1836%" y="629" width="0.0339%" height="15" fill="rgb(230,69,54)"/><text x="4.4336%" y="639.50"></text></g><g><title>&lt;miniz_oxide::MZFlush as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="4.2175%" y="613" width="0.0169%" height="15" fill="rgb(214,135,41)"/><text x="4.4675%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.02%)</title><rect x="4.3191%" y="581" width="0.0169%" height="15" fill="rgb(237,67,25)"/><text x="4.5691%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="4.3191%" y="565" width="0.0169%" height="15" fill="rgb(222,189,50)"/><text x="4.5691%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="4.3191%" y="549" width="0.0169%" height="15" fill="rgb(245,148,34)"/><text x="4.5691%" y="559.50"></text></g><g><title>miniz_oxide::inflate::core::decode_huffman_code (1 samples, 0.02%)</title><rect x="4.3360%" y="581" width="0.0169%" height="15" fill="rgb(222,29,6)"/><text x="4.5860%" y="591.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (6 samples, 0.10%)</title><rect x="4.3530%" y="581" width="0.1016%" height="15" fill="rgb(221,189,43)"/><text x="4.6030%" y="591.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.02%)</title><rect x="4.6409%" y="565" width="0.0169%" height="15" fill="rgb(207,36,27)"/><text x="4.8909%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.02%)</title><rect x="4.6409%" y="549" width="0.0169%" height="15" fill="rgb(217,90,24)"/><text x="4.8909%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="4.6579%" y="565" width="0.0169%" height="15" fill="rgb(224,66,35)"/><text x="4.9079%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="4.6748%" y="565" width="0.0508%" height="15" fill="rgb(221,13,50)"/><text x="4.9248%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (15 samples, 0.25%)</title><rect x="4.7256%" y="549" width="0.2541%" height="15" fill="rgb(236,68,49)"/><text x="4.9756%" y="559.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (16 samples, 0.27%)</title><rect x="4.7256%" y="565" width="0.2710%" height="15" fill="rgb(229,146,28)"/><text x="4.9756%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.02%)</title><rect x="4.9797%" y="549" width="0.0169%" height="15" fill="rgb(225,31,38)"/><text x="5.2297%" y="559.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (2 samples, 0.03%)</title><rect x="4.9966%" y="565" width="0.0339%" height="15" fill="rgb(250,208,3)"/><text x="5.2466%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (2 samples, 0.03%)</title><rect x="5.0305%" y="565" width="0.0339%" height="15" fill="rgb(246,54,23)"/><text x="5.2805%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::read_u32_le (2 samples, 0.03%)</title><rect x="5.0305%" y="549" width="0.0339%" height="15" fill="rgb(243,76,11)"/><text x="5.2805%" y="559.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (2 samples, 0.03%)</title><rect x="5.0305%" y="533" width="0.0339%" height="15" fill="rgb(245,21,50)"/><text x="5.2805%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (2 samples, 0.03%)</title><rect x="5.0305%" y="517" width="0.0339%" height="15" fill="rgb(228,9,43)"/><text x="5.2805%" y="527.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.03%)</title><rect x="5.0305%" y="501" width="0.0339%" height="15" fill="rgb(208,100,47)"/><text x="5.2805%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 0.03%)</title><rect x="5.0305%" y="485" width="0.0339%" height="15" fill="rgb(232,26,8)"/><text x="5.2805%" y="495.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (37 samples, 0.63%)</title><rect x="4.4546%" y="581" width="0.6267%" height="15" fill="rgb(216,166,38)"/><text x="4.7046%" y="591.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (1 samples, 0.02%)</title><rect x="5.0644%" y="565" width="0.0169%" height="15" fill="rgb(251,202,51)"/><text x="5.3144%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (1 samples, 0.02%)</title><rect x="5.0813%" y="581" width="0.0169%" height="15" fill="rgb(254,216,34)"/><text x="5.3313%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="5.1660%" y="565" width="0.0169%" height="15" fill="rgb(251,32,27)"/><text x="5.4160%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="5.1829%" y="565" width="0.0169%" height="15" fill="rgb(208,127,28)"/><text x="5.4329%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.02%)</title><rect x="5.1829%" y="549" width="0.0169%" height="15" fill="rgb(224,137,22)"/><text x="5.4329%" y="559.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (7 samples, 0.12%)</title><rect x="5.0982%" y="581" width="0.1186%" height="15" fill="rgb(254,70,32)"/><text x="5.3482%" y="591.50"></text></g><g><title>miniz_oxide::inflate::core::memset (1 samples, 0.02%)</title><rect x="5.1999%" y="565" width="0.0169%" height="15" fill="rgb(229,75,37)"/><text x="5.4499%" y="575.50"></text></g><g><title>__memset_avx2_unaligned (1 samples, 0.02%)</title><rect x="5.1999%" y="549" width="0.0169%" height="15" fill="rgb(252,64,23)"/><text x="5.4499%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="5.4031%" y="533" width="0.0339%" height="15" fill="rgb(232,162,48)"/><text x="5.6531%" y="543.50"></text></g><g><title>miniz_oxide::inflate::core::read_bits (15 samples, 0.25%)</title><rect x="5.2168%" y="581" width="0.2541%" height="15" fill="rgb(246,160,12)"/><text x="5.4668%" y="591.50"></text></g><g><title>miniz_oxide::inflate::core::decompress::{{closure}} (12 samples, 0.20%)</title><rect x="5.2676%" y="565" width="0.2033%" height="15" fill="rgb(247,166,0)"/><text x="5.5176%" y="575.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (12 samples, 0.20%)</title><rect x="5.2676%" y="549" width="0.2033%" height="15" fill="rgb(249,219,21)"/><text x="5.5176%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="5.4370%" y="533" width="0.0339%" height="15" fill="rgb(205,209,3)"/><text x="5.6870%" y="543.50"></text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (8 samples, 0.14%)</title><rect x="5.4709%" y="533" width="0.1355%" height="15" fill="rgb(243,44,1)"/><text x="5.7209%" y="543.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (8 samples, 0.14%)</title><rect x="5.4709%" y="517" width="0.1355%" height="15" fill="rgb(206,159,16)"/><text x="5.7209%" y="527.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (8 samples, 0.14%)</title><rect x="5.4709%" y="501" width="0.1355%" height="15" fill="rgb(244,77,30)"/><text x="5.7209%" y="511.50"></text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::RemAssign&lt;u32&gt;&gt;::rem_assign (1 samples, 0.02%)</title><rect x="5.6064%" y="533" width="0.0169%" height="15" fill="rgb(218,69,12)"/><text x="5.8564%" y="543.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (83 samples, 1.41%)</title><rect x="4.2344%" y="613" width="1.4058%" height="15" fill="rgb(212,87,7)"/><text x="4.4844%" y="623.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (82 samples, 1.39%)</title><rect x="4.2514%" y="597" width="1.3889%" height="15" fill="rgb(245,114,25)"/><text x="4.5014%" y="607.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (10 samples, 0.17%)</title><rect x="5.4709%" y="581" width="0.1694%" height="15" fill="rgb(210,61,42)"/><text x="5.7209%" y="591.50"></text></g><g><title>adler::Adler32::write_slice (10 samples, 0.17%)</title><rect x="5.4709%" y="565" width="0.1694%" height="15" fill="rgb(211,52,33)"/><text x="5.7209%" y="575.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (10 samples, 0.17%)</title><rect x="5.4709%" y="549" width="0.1694%" height="15" fill="rgb(234,58,33)"/><text x="5.7209%" y="559.50"></text></g><g><title>adler::algo::U32X4::from (1 samples, 0.02%)</title><rect x="5.6233%" y="533" width="0.0169%" height="15" fill="rgb(220,115,36)"/><text x="5.8733%" y="543.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode::{{closure}} (88 samples, 1.49%)</title><rect x="4.1836%" y="693" width="1.4905%" height="15" fill="rgb(243,153,54)"/><text x="4.4336%" y="703.50"></text></g><g><title>&lt;async_compression::codec::flate::decoder::FlateDecoder as async_compression::codec::Decode&gt;::decode (88 samples, 1.49%)</title><rect x="4.1836%" y="677" width="1.4905%" height="15" fill="rgb(251,47,18)"/><text x="4.4336%" y="687.50"></text></g><g><title>async_compression::codec::flate::decoder::FlateDecoder::decode (88 samples, 1.49%)</title><rect x="4.1836%" y="661" width="1.4905%" height="15" fill="rgb(242,102,42)"/><text x="4.4336%" y="671.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (88 samples, 1.49%)</title><rect x="4.1836%" y="645" width="1.4905%" height="15" fill="rgb(234,31,38)"/><text x="4.4336%" y="655.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (86 samples, 1.46%)</title><rect x="4.2175%" y="629" width="1.4566%" height="15" fill="rgb(221,117,51)"/><text x="4.4675%" y="639.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (2 samples, 0.03%)</title><rect x="5.6402%" y="613" width="0.0339%" height="15" fill="rgb(212,20,18)"/><text x="5.8902%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.03%)</title><rect x="5.6402%" y="597" width="0.0339%" height="15" fill="rgb(245,133,36)"/><text x="5.8902%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="5.6402%" y="581" width="0.0339%" height="15" fill="rgb(212,6,19)"/><text x="5.8902%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="5.6402%" y="565" width="0.0339%" height="15" fill="rgb(218,1,36)"/><text x="5.8902%" y="575.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.02%)</title><rect x="5.6741%" y="693" width="0.0169%" height="15" fill="rgb(246,84,54)"/><text x="5.9241%" y="703.50"></text></g><g><title>&lt;u8 as alloc::vec::SpecFromElem&gt;::from_elem (1 samples, 0.02%)</title><rect x="5.6741%" y="677" width="0.0169%" height="15" fill="rgb(242,110,6)"/><text x="5.9241%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity_zeroed (1 samples, 0.02%)</title><rect x="5.6741%" y="661" width="0.0169%" height="15" fill="rgb(214,47,5)"/><text x="5.9241%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.02%)</title><rect x="5.6741%" y="645" width="0.0169%" height="15" fill="rgb(218,159,25)"/><text x="5.9241%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="5.6741%" y="629" width="0.0169%" height="15" fill="rgb(215,211,28)"/><text x="5.9241%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc_zeroed (1 samples, 0.02%)</title><rect x="5.6741%" y="613" width="0.0169%" height="15" fill="rgb(238,59,32)"/><text x="5.9241%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="5.6741%" y="597" width="0.0169%" height="15" fill="rgb(226,82,3)"/><text x="5.9241%" y="607.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.02%)</title><rect x="5.6741%" y="581" width="0.0169%" height="15" fill="rgb(240,164,32)"/><text x="5.9241%" y="591.50"></text></g><g><title>__calloc (1 samples, 0.02%)</title><rect x="5.6741%" y="565" width="0.0169%" height="15" fill="rgb(232,46,7)"/><text x="5.9241%" y="575.50"></text></g><g><title>async_compression::codec::gzip::decoder::check_footer (1 samples, 0.02%)</title><rect x="5.6911%" y="693" width="0.0169%" height="15" fill="rgb(229,129,53)"/><text x="5.9411%" y="703.50"></text></g><g><title>flate2::crc::Crc::sum (1 samples, 0.02%)</title><rect x="5.6911%" y="677" width="0.0169%" height="15" fill="rgb(234,188,29)"/><text x="5.9411%" y="687.50"></text></g><g><title>crc32fast::Hasher::finalize (1 samples, 0.02%)</title><rect x="5.6911%" y="661" width="0.0169%" height="15" fill="rgb(246,141,4)"/><text x="5.9411%" y="671.50"></text></g><g><title>async_compression::codec::gzip::header::Parser::input (1 samples, 0.02%)</title><rect x="5.7080%" y="693" width="0.0169%" height="15" fill="rgb(229,23,39)"/><text x="5.9580%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="5.7080%" y="677" width="0.0169%" height="15" fill="rgb(206,12,3)"/><text x="5.9580%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="5.7249%" y="693" width="0.0169%" height="15" fill="rgb(252,226,20)"/><text x="5.9749%" y="703.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.02%)</title><rect x="5.7419%" y="661" width="0.0169%" height="15" fill="rgb(216,123,35)"/><text x="5.9919%" y="671.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.02%)</title><rect x="5.7419%" y="645" width="0.0169%" height="15" fill="rgb(212,68,40)"/><text x="5.9919%" y="655.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::get (2 samples, 0.03%)</title><rect x="5.7927%" y="645" width="0.0339%" height="15" fill="rgb(254,125,32)"/><text x="6.0427%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.03%)</title><rect x="5.7927%" y="629" width="0.0339%" height="15" fill="rgb(253,97,22)"/><text x="6.0427%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="5.7927%" y="613" width="0.0339%" height="15" fill="rgb(241,101,14)"/><text x="6.0427%" y="623.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (2 samples, 0.03%)</title><rect x="5.8266%" y="629" width="0.0339%" height="15" fill="rgb(238,103,29)"/><text x="6.0766%" y="639.50"></text></g><g><title>&lt;async_compression::codec::gzip::decoder::GzipDecoder as async_compression::codec::Decode&gt;::decode (100 samples, 1.69%)</title><rect x="4.1836%" y="725" width="1.6938%" height="15" fill="rgb(233,195,47)"/><text x="4.4336%" y="735.50"></text></g><g><title>async_compression::codec::gzip::decoder::GzipDecoder::process (100 samples, 1.69%)</title><rect x="4.1836%" y="709" width="1.6938%" height="15" fill="rgb(246,218,30)"/><text x="4.4336%" y="719.50"></text></g><g><title>crc32fast::Hasher::update (8 samples, 0.14%)</title><rect x="5.7419%" y="693" width="0.1355%" height="15" fill="rgb(219,145,47)"/><text x="5.9919%" y="703.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (8 samples, 0.14%)</title><rect x="5.7419%" y="677" width="0.1355%" height="15" fill="rgb(243,12,26)"/><text x="5.9919%" y="687.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (7 samples, 0.12%)</title><rect x="5.7588%" y="661" width="0.1186%" height="15" fill="rgb(214,87,16)"/><text x="6.0088%" y="671.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.05%)</title><rect x="5.8266%" y="645" width="0.0508%" height="15" fill="rgb(208,99,42)"/><text x="6.0766%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1 samples, 0.02%)</title><rect x="5.8604%" y="629" width="0.0169%" height="15" fill="rgb(253,99,2)"/><text x="6.1104%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="5.8774%" y="597" width="0.0169%" height="15" fill="rgb(220,168,23)"/><text x="6.1274%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="5.8774%" y="581" width="0.0169%" height="15" fill="rgb(242,38,24)"/><text x="6.1274%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="5.8774%" y="565" width="0.0169%" height="15" fill="rgb(225,182,9)"/><text x="6.1274%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="5.8774%" y="549" width="0.0169%" height="15" fill="rgb(243,178,37)"/><text x="6.1274%" y="559.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="5.8774%" y="533" width="0.0169%" height="15" fill="rgb(232,139,19)"/><text x="6.1274%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="5.8943%" y="517" width="0.0508%" height="15" fill="rgb(225,201,24)"/><text x="6.1443%" y="527.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="5.9451%" y="517" width="0.0339%" height="15" fill="rgb(221,47,46)"/><text x="6.1951%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (7 samples, 0.12%)</title><rect x="5.8774%" y="709" width="0.1186%" height="15" fill="rgb(249,23,13)"/><text x="6.1274%" y="719.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (7 samples, 0.12%)</title><rect x="5.8774%" y="693" width="0.1186%" height="15" fill="rgb(219,9,5)"/><text x="6.1274%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.12%)</title><rect x="5.8774%" y="677" width="0.1186%" height="15" fill="rgb(254,171,16)"/><text x="6.1274%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.12%)</title><rect x="5.8774%" y="661" width="0.1186%" height="15" fill="rgb(230,171,20)"/><text x="6.1274%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (7 samples, 0.12%)</title><rect x="5.8774%" y="645" width="0.1186%" height="15" fill="rgb(210,71,41)"/><text x="6.1274%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.12%)</title><rect x="5.8774%" y="629" width="0.1186%" height="15" fill="rgb(206,173,20)"/><text x="6.1274%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.12%)</title><rect x="5.8774%" y="613" width="0.1186%" height="15" fill="rgb(233,88,34)"/><text x="6.1274%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (6 samples, 0.10%)</title><rect x="5.8943%" y="597" width="0.1016%" height="15" fill="rgb(223,209,46)"/><text x="6.1443%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.10%)</title><rect x="5.8943%" y="581" width="0.1016%" height="15" fill="rgb(250,43,18)"/><text x="6.1443%" y="591.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.10%)</title><rect x="5.8943%" y="565" width="0.1016%" height="15" fill="rgb(208,13,10)"/><text x="6.1443%" y="575.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.10%)</title><rect x="5.8943%" y="549" width="0.1016%" height="15" fill="rgb(212,200,36)"/><text x="6.1443%" y="559.50"></text></g><g><title>_int_realloc (6 samples, 0.10%)</title><rect x="5.8943%" y="533" width="0.1016%" height="15" fill="rgb(225,90,30)"/><text x="6.1443%" y="543.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="5.9790%" y="517" width="0.0169%" height="15" fill="rgb(236,182,39)"/><text x="6.2290%" y="527.50"></text></g><g><title>&lt;async_compression::stream::generic::decoder::Decoder&lt;S,D&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (114 samples, 1.93%)</title><rect x="4.1836%" y="741" width="1.9309%" height="15" fill="rgb(212,144,35)"/><text x="4.4336%" y="751.50">&lt;..</text></g><g><title>bytes::bytes_mut::BytesMut::resize (14 samples, 0.24%)</title><rect x="5.8774%" y="725" width="0.2371%" height="15" fill="rgb(228,63,44)"/><text x="6.1274%" y="735.50"></text></g><g><title>core::intrinsics::write_bytes (7 samples, 0.12%)</title><rect x="5.9959%" y="709" width="0.1186%" height="15" fill="rgb(228,109,6)"/><text x="6.2459%" y="719.50"></text></g><g><title>__memset_avx2_unaligned_erms (6 samples, 0.10%)</title><rect x="6.0129%" y="693" width="0.1016%" height="15" fill="rgb(238,117,24)"/><text x="6.2629%" y="703.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (116 samples, 1.96%)</title><rect x="4.1667%" y="789" width="1.9648%" height="15" fill="rgb(242,26,26)"/><text x="4.4167%" y="799.50">&lt;..</text></g><g><title>&lt;async_compression::stream::GzipDecoder&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (116 samples, 1.96%)</title><rect x="4.1667%" y="773" width="1.9648%" height="15" fill="rgb(221,92,48)"/><text x="4.4167%" y="783.50">&lt;..</text></g><g><title>&lt;async_compression::stream::generic::decoder::Decoder&lt;S,D&gt; as futures_core::stream::Stream&gt;::poll_next (116 samples, 1.96%)</title><rect x="4.1667%" y="757" width="1.9648%" height="15" fill="rgb(209,209,32)"/><text x="4.4167%" y="767.50">&lt;..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.02%)</title><rect x="6.1145%" y="741" width="0.0169%" height="15" fill="rgb(221,70,22)"/><text x="6.3645%" y="751.50"></text></g><g><title>&lt;miniz_oxide::inflate::stream::InflateState as core::default::Default&gt;::default (7 samples, 0.12%)</title><rect x="6.1653%" y="661" width="0.1186%" height="15" fill="rgb(248,145,5)"/><text x="6.4153%" y="671.50"></text></g><g><title>__memset_avx2_unaligned_erms (7 samples, 0.12%)</title><rect x="6.1653%" y="645" width="0.1186%" height="15" fill="rgb(226,116,26)"/><text x="6.4153%" y="655.50"></text></g><g><title>async_compression::codec::flate::decoder::FlateDecoder::new (11 samples, 0.19%)</title><rect x="6.1484%" y="741" width="0.1863%" height="15" fill="rgb(244,5,17)"/><text x="6.3984%" y="751.50"></text></g><g><title>flate2::mem::Decompress::new (11 samples, 0.19%)</title><rect x="6.1484%" y="725" width="0.1863%" height="15" fill="rgb(252,159,33)"/><text x="6.3984%" y="735.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::make (11 samples, 0.19%)</title><rect x="6.1484%" y="709" width="0.1863%" height="15" fill="rgb(206,71,0)"/><text x="6.3984%" y="719.50"></text></g><g><title>miniz_oxide::inflate::stream::InflateState::new_boxed (11 samples, 0.19%)</title><rect x="6.1484%" y="693" width="0.1863%" height="15" fill="rgb(233,118,54)"/><text x="6.3984%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (10 samples, 0.17%)</title><rect x="6.1653%" y="677" width="0.1694%" height="15" fill="rgb(234,83,48)"/><text x="6.4153%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.05%)</title><rect x="6.2839%" y="661" width="0.0508%" height="15" fill="rgb(228,3,54)"/><text x="6.5339%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.05%)</title><rect x="6.2839%" y="645" width="0.0508%" height="15" fill="rgb(226,155,13)"/><text x="6.5339%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="6.2839%" y="629" width="0.0508%" height="15" fill="rgb(241,28,37)"/><text x="6.5339%" y="639.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.05%)</title><rect x="6.2839%" y="613" width="0.0508%" height="15" fill="rgb(233,93,10)"/><text x="6.5339%" y="623.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.05%)</title><rect x="6.2839%" y="597" width="0.0508%" height="15" fill="rgb(225,113,19)"/><text x="6.5339%" y="607.50"></text></g><g><title>_int_malloc (3 samples, 0.05%)</title><rect x="6.2839%" y="581" width="0.0508%" height="15" fill="rgb(241,2,18)"/><text x="6.5339%" y="591.50"></text></g><g><title>async_compression::stream::GzipDecoder&lt;S&gt;::new (13 samples, 0.22%)</title><rect x="6.1314%" y="773" width="0.2202%" height="15" fill="rgb(228,207,21)"/><text x="6.3814%" y="783.50"></text></g><g><title>async_compression::codec::gzip::decoder::GzipDecoder::new (13 samples, 0.22%)</title><rect x="6.1314%" y="757" width="0.2202%" height="15" fill="rgb(213,211,35)"/><text x="6.3814%" y="767.50"></text></g><g><title>flate2::crc::Crc::new (1 samples, 0.02%)</title><rect x="6.3347%" y="741" width="0.0169%" height="15" fill="rgb(209,83,10)"/><text x="6.5847%" y="751.50"></text></g><g><title>&lt;crc32fast::Hasher as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="6.3347%" y="725" width="0.0169%" height="15" fill="rgb(209,164,1)"/><text x="6.5847%" y="735.50"></text></g><g><title>crc32fast::Hasher::new (1 samples, 0.02%)</title><rect x="6.3347%" y="709" width="0.0169%" height="15" fill="rgb(213,184,43)"/><text x="6.5847%" y="719.50"></text></g><g><title>crc32fast::Hasher::new_with_initial (1 samples, 0.02%)</title><rect x="6.3347%" y="693" width="0.0169%" height="15" fill="rgb(231,61,34)"/><text x="6.5847%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.02%)</title><rect x="6.3347%" y="677" width="0.0169%" height="15" fill="rgb(235,75,3)"/><text x="6.5847%" y="687.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Pending as core::future::future::Future&gt;::poll (15 samples, 0.25%)</title><rect x="6.1314%" y="789" width="0.2541%" height="15" fill="rgb(220,106,47)"/><text x="6.3814%" y="799.50"></text></g><g><title>futures_util::stream::stream::peek::Peekable&lt;St&gt;::poll_peek (2 samples, 0.03%)</title><rect x="6.3516%" y="773" width="0.0339%" height="15" fill="rgb(210,196,33)"/><text x="6.6016%" y="783.50"></text></g><g><title>&lt;futures_util::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.03%)</title><rect x="6.3516%" y="757" width="0.0339%" height="15" fill="rgb(229,154,42)"/><text x="6.6016%" y="767.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::IoStream as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.03%)</title><rect x="6.3516%" y="741" width="0.0339%" height="15" fill="rgb(228,114,26)"/><text x="6.6016%" y="751.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as futures_core::stream::Stream&gt;::poll_next (2 samples, 0.03%)</title><rect x="6.3516%" y="725" width="0.0339%" height="15" fill="rgb(208,144,1)"/><text x="6.6016%" y="735.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (2 samples, 0.03%)</title><rect x="6.3516%" y="709" width="0.0339%" height="15" fill="rgb(239,112,37)"/><text x="6.6016%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="6.3686%" y="693" width="0.0169%" height="15" fill="rgb(210,96,50)"/><text x="6.6186%" y="703.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="6.3686%" y="677" width="0.0169%" height="15" fill="rgb(222,178,2)"/><text x="6.6186%" y="687.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.02%)</title><rect x="6.3686%" y="661" width="0.0169%" height="15" fill="rgb(226,74,18)"/><text x="6.6186%" y="671.50"></text></g><g><title>hyper::body::body::Body::poll_eof (1 samples, 0.02%)</title><rect x="6.3686%" y="645" width="0.0169%" height="15" fill="rgb(225,67,54)"/><text x="6.6186%" y="655.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.02%)</title><rect x="6.3686%" y="629" width="0.0169%" height="15" fill="rgb(251,92,32)"/><text x="6.6186%" y="639.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.02%)</title><rect x="6.3686%" y="613" width="0.0169%" height="15" fill="rgb(228,149,22)"/><text x="6.6186%" y="623.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.02%)</title><rect x="6.3686%" y="597" width="0.0169%" height="15" fill="rgb(243,54,13)"/><text x="6.6186%" y="607.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.02%)</title><rect x="6.3686%" y="581" width="0.0169%" height="15" fill="rgb(243,180,28)"/><text x="6.6186%" y="591.50"></text></g><g><title>&lt;http_body::next::Data&lt;T&gt; as core::future::future::Future&gt;::poll (136 samples, 2.30%)</title><rect x="4.0989%" y="869" width="2.3035%" height="15" fill="rgb(208,167,24)"/><text x="4.3489%" y="879.50">&lt;..</text></g><g><title>&lt;&amp;mut T as http_body::Body&gt;::poll_data (136 samples, 2.30%)</title><rect x="4.0989%" y="853" width="2.3035%" height="15" fill="rgb(245,73,45)"/><text x="4.3489%" y="863.50">&lt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (136 samples, 2.30%)</title><rect x="4.0989%" y="837" width="2.3035%" height="15" fill="rgb(237,203,48)"/><text x="4.3489%" y="847.50">&lt;..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (136 samples, 2.30%)</title><rect x="4.0989%" y="821" width="2.3035%" height="15" fill="rgb(211,197,16)"/><text x="4.3489%" y="831.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (135 samples, 2.29%)</title><rect x="4.1159%" y="805" width="2.2866%" height="15" fill="rgb(243,99,51)"/><text x="4.3659%" y="815.50">&lt;..</text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="789" width="0.0169%" height="15" fill="rgb(215,123,29)"/><text x="6.6355%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="773" width="0.0169%" height="15" fill="rgb(239,186,37)"/><text x="6.6355%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="757" width="0.0169%" height="15" fill="rgb(252,136,39)"/><text x="6.6355%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="741" width="0.0169%" height="15" fill="rgb(223,213,32)"/><text x="6.6355%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="725" width="0.0169%" height="15" fill="rgb(233,115,5)"/><text x="6.6355%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="709" width="0.0169%" height="15" fill="rgb(207,226,44)"/><text x="6.6355%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="693" width="0.0169%" height="15" fill="rgb(208,126,0)"/><text x="6.6355%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="677" width="0.0169%" height="15" fill="rgb(244,66,21)"/><text x="6.6355%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.3855%" y="661" width="0.0169%" height="15" fill="rgb(222,97,12)"/><text x="6.6355%" y="671.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="6.3855%" y="645" width="0.0169%" height="15" fill="rgb(219,213,19)"/><text x="6.6355%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (140 samples, 2.37%)</title><rect x="4.0989%" y="901" width="2.3713%" height="15" fill="rgb(252,169,30)"/><text x="4.3489%" y="911.50">&lt;c..</text></g><g><title>hyper::body::to_bytes::to_bytes::{{closure}} (140 samples, 2.37%)</title><rect x="4.0989%" y="885" width="2.3713%" height="15" fill="rgb(206,32,51)"/><text x="4.3489%" y="895.50">hy..</text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="869" width="0.0678%" height="15" fill="rgb(250,172,42)"/><text x="6.6524%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="853" width="0.0678%" height="15" fill="rgb(209,34,43)"/><text x="6.6524%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="837" width="0.0678%" height="15" fill="rgb(223,11,35)"/><text x="6.6524%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="821" width="0.0678%" height="15" fill="rgb(251,219,26)"/><text x="6.6524%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="805" width="0.0678%" height="15" fill="rgb(231,119,3)"/><text x="6.6524%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="789" width="0.0678%" height="15" fill="rgb(216,97,11)"/><text x="6.6524%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="773" width="0.0678%" height="15" fill="rgb(223,59,9)"/><text x="6.6524%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="757" width="0.0678%" height="15" fill="rgb(233,93,31)"/><text x="6.6524%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="741" width="0.0678%" height="15" fill="rgb(239,81,33)"/><text x="6.6524%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="725" width="0.0678%" height="15" fill="rgb(213,120,34)"/><text x="6.6524%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="709" width="0.0678%" height="15" fill="rgb(243,49,53)"/><text x="6.6524%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="693" width="0.0678%" height="15" fill="rgb(247,216,33)"/><text x="6.6524%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="6.4024%" y="677" width="0.0678%" height="15" fill="rgb(226,26,14)"/><text x="6.6524%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="6.4363%" y="661" width="0.0339%" height="15" fill="rgb(215,49,53)"/><text x="6.6863%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="6.4363%" y="645" width="0.0339%" height="15" fill="rgb(245,162,40)"/><text x="6.6863%" y="655.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="6.4363%" y="629" width="0.0339%" height="15" fill="rgb(229,68,17)"/><text x="6.6863%" y="639.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::close (2 samples, 0.03%)</title><rect x="6.4363%" y="613" width="0.0339%" height="15" fill="rgb(213,182,10)"/><text x="6.6863%" y="623.50"></text></g><g><title>futures_channel::mpsc::BoundedInner&lt;T&gt;::set_closed (1 samples, 0.02%)</title><rect x="6.4533%" y="597" width="0.0169%" height="15" fill="rgb(245,125,30)"/><text x="6.7033%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (143 samples, 2.42%)</title><rect x="4.0989%" y="933" width="2.4221%" height="15" fill="rgb(232,202,2)"/><text x="4.3489%" y="943.50">&lt;c..</text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (143 samples, 2.42%)</title><rect x="4.0989%" y="917" width="2.4221%" height="15" fill="rgb(237,140,51)"/><text x="4.3489%" y="927.50">re..</text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="6.4702%" y="901" width="0.0508%" height="15" fill="rgb(236,157,25)"/><text x="6.7202%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="6.4871%" y="885" width="0.0339%" height="15" fill="rgb(219,209,0)"/><text x="6.7371%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5041%" y="869" width="0.0169%" height="15" fill="rgb(240,116,54)"/><text x="6.7541%" y="879.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="6.5041%" y="853" width="0.0169%" height="15" fill="rgb(216,10,36)"/><text x="6.7541%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="6.5041%" y="837" width="0.0169%" height="15" fill="rgb(222,72,44)"/><text x="6.7541%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="6.5041%" y="821" width="0.0169%" height="15" fill="rgb(232,159,9)"/><text x="6.7541%" y="831.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="6.5041%" y="805" width="0.0169%" height="15" fill="rgb(210,39,32)"/><text x="6.7541%" y="815.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="6.5210%" y="933" width="0.0169%" height="15" fill="rgb(216,194,45)"/><text x="6.7710%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5379%" y="933" width="0.0169%" height="15" fill="rgb(218,18,35)"/><text x="6.7879%" y="943.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="6.5379%" y="917" width="0.0169%" height="15" fill="rgb(207,83,51)"/><text x="6.7879%" y="927.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.02%)</title><rect x="6.5379%" y="901" width="0.0169%" height="15" fill="rgb(225,63,43)"/><text x="6.7879%" y="911.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (1 samples, 0.02%)</title><rect x="6.5379%" y="885" width="0.0169%" height="15" fill="rgb(207,57,36)"/><text x="6.7879%" y="895.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::{{closure}} (1 samples, 0.02%)</title><rect x="6.5379%" y="869" width="0.0169%" height="15" fill="rgb(216,99,33)"/><text x="6.7879%" y="879.50"></text></g><g><title>bytes::bytes_mut::release_shared (1 samples, 0.02%)</title><rect x="6.5379%" y="853" width="0.0169%" height="15" fill="rgb(225,42,16)"/><text x="6.7879%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5379%" y="837" width="0.0169%" height="15" fill="rgb(220,201,45)"/><text x="6.7879%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5379%" y="821" width="0.0169%" height="15" fill="rgb(225,33,4)"/><text x="6.7879%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5379%" y="805" width="0.0169%" height="15" fill="rgb(224,33,50)"/><text x="6.7879%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="6.5379%" y="789" width="0.0169%" height="15" fill="rgb(246,198,51)"/><text x="6.7879%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="6.5379%" y="773" width="0.0169%" height="15" fill="rgb(205,22,4)"/><text x="6.7879%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="6.5379%" y="757" width="0.0169%" height="15" fill="rgb(206,3,8)"/><text x="6.7879%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="6.5379%" y="741" width="0.0169%" height="15" fill="rgb(251,23,15)"/><text x="6.7879%" y="751.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="6.5379%" y="725" width="0.0169%" height="15" fill="rgb(252,88,28)"/><text x="6.7879%" y="735.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="6.6396%" y="565" width="0.0169%" height="15" fill="rgb(212,127,14)"/><text x="6.8896%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.08%)</title><rect x="6.6057%" y="725" width="0.0847%" height="15" fill="rgb(247,145,37)"/><text x="6.8557%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.08%)</title><rect x="6.6057%" y="709" width="0.0847%" height="15" fill="rgb(209,117,53)"/><text x="6.8557%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.08%)</title><rect x="6.6057%" y="693" width="0.0847%" height="15" fill="rgb(212,90,42)"/><text x="6.8557%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.08%)</title><rect x="6.6057%" y="677" width="0.0847%" height="15" fill="rgb(218,164,37)"/><text x="6.8557%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.08%)</title><rect x="6.6057%" y="661" width="0.0847%" height="15" fill="rgb(246,65,34)"/><text x="6.8557%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (5 samples, 0.08%)</title><rect x="6.6057%" y="645" width="0.0847%" height="15" fill="rgb(231,100,33)"/><text x="6.8557%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.08%)</title><rect x="6.6057%" y="629" width="0.0847%" height="15" fill="rgb(228,126,14)"/><text x="6.8557%" y="639.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.08%)</title><rect x="6.6057%" y="613" width="0.0847%" height="15" fill="rgb(215,173,21)"/><text x="6.8557%" y="623.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.08%)</title><rect x="6.6057%" y="597" width="0.0847%" height="15" fill="rgb(210,6,40)"/><text x="6.8557%" y="607.50"></text></g><g><title>_int_realloc (5 samples, 0.08%)</title><rect x="6.6057%" y="581" width="0.0847%" height="15" fill="rgb(212,48,18)"/><text x="6.8557%" y="591.50"></text></g><g><title>_int_malloc (2 samples, 0.03%)</title><rect x="6.6565%" y="565" width="0.0339%" height="15" fill="rgb(230,214,11)"/><text x="6.9065%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.15%)</title><rect x="6.5888%" y="741" width="0.1524%" height="15" fill="rgb(254,105,39)"/><text x="6.8388%" y="751.50"></text></g><g><title>core::ptr::write (3 samples, 0.05%)</title><rect x="6.6904%" y="725" width="0.0508%" height="15" fill="rgb(245,158,5)"/><text x="6.9404%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="6.9275%" y="645" width="0.0169%" height="15" fill="rgb(249,208,11)"/><text x="7.1775%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect x="6.9783%" y="629" width="0.0169%" height="15" fill="rgb(210,39,28)"/><text x="7.2283%" y="639.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="7.0291%" y="565" width="0.0169%" height="15" fill="rgb(211,56,53)"/><text x="7.2791%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.02%)</title><rect x="7.1138%" y="517" width="0.0169%" height="15" fill="rgb(226,201,30)"/><text x="7.3638%" y="527.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (8 samples, 0.14%)</title><rect x="7.0122%" y="581" width="0.1355%" height="15" fill="rgb(239,101,34)"/><text x="7.2622%" y="591.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (6 samples, 0.10%)</title><rect x="7.0461%" y="565" width="0.1016%" height="15" fill="rgb(226,209,5)"/><text x="7.2961%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="7.1138%" y="549" width="0.0339%" height="15" fill="rgb(250,105,47)"/><text x="7.3638%" y="559.50"></text></g><g><title>serde_json::read::as_str (2 samples, 0.03%)</title><rect x="7.1138%" y="533" width="0.0339%" height="15" fill="rgb(230,72,3)"/><text x="7.3638%" y="543.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="7.1308%" y="517" width="0.0169%" height="15" fill="rgb(232,218,39)"/><text x="7.3808%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="7.1477%" y="485" width="0.0169%" height="15" fill="rgb(248,166,6)"/><text x="7.3977%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="7.1477%" y="469" width="0.0169%" height="15" fill="rgb(247,89,20)"/><text x="7.3977%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="7.1477%" y="453" width="0.0169%" height="15" fill="rgb(248,130,54)"/><text x="7.3977%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="7.1477%" y="437" width="0.0169%" height="15" fill="rgb(234,196,4)"/><text x="7.3977%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="7.1477%" y="421" width="0.0169%" height="15" fill="rgb(250,143,31)"/><text x="7.3977%" y="431.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.22%)</title><rect x="7.1646%" y="373" width="0.2202%" height="15" fill="rgb(211,110,34)"/><text x="7.4146%" y="383.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="7.3171%" y="357" width="0.0678%" height="15" fill="rgb(215,124,48)"/><text x="7.5671%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (24 samples, 0.41%)</title><rect x="6.9953%" y="629" width="0.4065%" height="15" fill="rgb(216,46,13)"/><text x="7.2453%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (24 samples, 0.41%)</title><rect x="6.9953%" y="613" width="0.4065%" height="15" fill="rgb(205,184,25)"/><text x="7.2453%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (24 samples, 0.41%)</title><rect x="6.9953%" y="597" width="0.4065%" height="15" fill="rgb(228,1,10)"/><text x="7.2453%" y="607.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (15 samples, 0.25%)</title><rect x="7.1477%" y="581" width="0.2541%" height="15" fill="rgb(213,116,27)"/><text x="7.3977%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (15 samples, 0.25%)</title><rect x="7.1477%" y="565" width="0.2541%" height="15" fill="rgb(241,95,50)"/><text x="7.3977%" y="575.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (15 samples, 0.25%)</title><rect x="7.1477%" y="549" width="0.2541%" height="15" fill="rgb(238,48,32)"/><text x="7.3977%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (15 samples, 0.25%)</title><rect x="7.1477%" y="533" width="0.2541%" height="15" fill="rgb(235,113,49)"/><text x="7.3977%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.25%)</title><rect x="7.1477%" y="517" width="0.2541%" height="15" fill="rgb(205,127,43)"/><text x="7.3977%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.25%)</title><rect x="7.1477%" y="501" width="0.2541%" height="15" fill="rgb(250,162,2)"/><text x="7.3977%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.24%)</title><rect x="7.1646%" y="485" width="0.2371%" height="15" fill="rgb(220,13,41)"/><text x="7.4146%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (14 samples, 0.24%)</title><rect x="7.1646%" y="469" width="0.2371%" height="15" fill="rgb(249,221,25)"/><text x="7.4146%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.24%)</title><rect x="7.1646%" y="453" width="0.2371%" height="15" fill="rgb(215,208,19)"/><text x="7.4146%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.24%)</title><rect x="7.1646%" y="437" width="0.2371%" height="15" fill="rgb(236,175,2)"/><text x="7.4146%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.24%)</title><rect x="7.1646%" y="421" width="0.2371%" height="15" fill="rgb(241,52,2)"/><text x="7.4146%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.24%)</title><rect x="7.1646%" y="405" width="0.2371%" height="15" fill="rgb(248,140,14)"/><text x="7.4146%" y="415.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.24%)</title><rect x="7.1646%" y="389" width="0.2371%" height="15" fill="rgb(253,22,42)"/><text x="7.4146%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="7.3848%" y="373" width="0.0169%" height="15" fill="rgb(234,61,47)"/><text x="7.6348%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="7.3848%" y="357" width="0.0169%" height="15" fill="rgb(208,226,15)"/><text x="7.6348%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="7.4018%" y="629" width="0.0169%" height="15" fill="rgb(217,221,4)"/><text x="7.6518%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (29 samples, 0.49%)</title><rect x="6.9444%" y="645" width="0.4912%" height="15" fill="rgb(212,174,34)"/><text x="7.1944%" y="655.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.02%)</title><rect x="7.4187%" y="629" width="0.0169%" height="15" fill="rgb(253,83,4)"/><text x="7.6687%" y="639.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="7.4187%" y="613" width="0.0169%" height="15" fill="rgb(250,195,49)"/><text x="7.6687%" y="623.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="7.4187%" y="597" width="0.0169%" height="15" fill="rgb(241,192,25)"/><text x="7.6687%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="7.4356%" y="645" width="0.0169%" height="15" fill="rgb(208,124,10)"/><text x="7.6856%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.02%)</title><rect x="7.4526%" y="645" width="0.0169%" height="15" fill="rgb(222,33,0)"/><text x="7.7026%" y="655.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.02%)</title><rect x="7.4526%" y="629" width="0.0169%" height="15" fill="rgb(234,209,28)"/><text x="7.7026%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect x="7.4526%" y="613" width="0.0169%" height="15" fill="rgb(224,11,23)"/><text x="7.7026%" y="623.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.02%)</title><rect x="7.4526%" y="597" width="0.0169%" height="15" fill="rgb(232,99,1)"/><text x="7.7026%" y="607.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="7.4526%" y="581" width="0.0169%" height="15" fill="rgb(237,95,45)"/><text x="7.7026%" y="591.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="7.4526%" y="565" width="0.0169%" height="15" fill="rgb(208,109,11)"/><text x="7.7026%" y="575.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="7.8421%" y="469" width="0.0169%" height="15" fill="rgb(216,190,48)"/><text x="8.0921%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.02%)</title><rect x="7.8930%" y="453" width="0.0169%" height="15" fill="rgb(251,171,36)"/><text x="8.1430%" y="463.50"></text></g><g><title>serde_json::read::as_str (1 samples, 0.02%)</title><rect x="7.8930%" y="437" width="0.0169%" height="15" fill="rgb(230,62,22)"/><text x="8.1430%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="7.8930%" y="421" width="0.0169%" height="15" fill="rgb(225,114,35)"/><text x="8.1430%" y="431.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.10%)</title><rect x="7.8421%" y="485" width="0.1016%" height="15" fill="rgb(215,118,42)"/><text x="8.0921%" y="495.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (5 samples, 0.08%)</title><rect x="7.8591%" y="469" width="0.0847%" height="15" fill="rgb(243,119,21)"/><text x="8.1091%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.03%)</title><rect x="7.9099%" y="453" width="0.0339%" height="15" fill="rgb(252,177,53)"/><text x="8.1599%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="7.9438%" y="389" width="0.0169%" height="15" fill="rgb(237,209,29)"/><text x="8.1938%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="7.9438%" y="373" width="0.0169%" height="15" fill="rgb(212,65,23)"/><text x="8.1938%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="7.9438%" y="357" width="0.0169%" height="15" fill="rgb(230,222,46)"/><text x="8.1938%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="7.9438%" y="341" width="0.0169%" height="15" fill="rgb(215,135,32)"/><text x="8.1938%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="7.9438%" y="325" width="0.0169%" height="15" fill="rgb(246,101,22)"/><text x="8.1938%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="7.9438%" y="309" width="0.0169%" height="15" fill="rgb(206,107,13)"/><text x="8.1938%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.02%)</title><rect x="7.9438%" y="293" width="0.0169%" height="15" fill="rgb(250,100,44)"/><text x="8.1938%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="7.9438%" y="277" width="0.0169%" height="15" fill="rgb(231,147,38)"/><text x="8.1938%" y="287.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="8.0285%" y="245" width="0.0169%" height="15" fill="rgb(229,8,40)"/><text x="8.2785%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.24%)</title><rect x="7.8421%" y="533" width="0.2371%" height="15" fill="rgb(221,135,30)"/><text x="8.0921%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (14 samples, 0.24%)</title><rect x="7.8421%" y="517" width="0.2371%" height="15" fill="rgb(249,193,18)"/><text x="8.0921%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 0.24%)</title><rect x="7.8421%" y="501" width="0.2371%" height="15" fill="rgb(209,133,39)"/><text x="8.0921%" y="511.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (8 samples, 0.14%)</title><rect x="7.9438%" y="485" width="0.1355%" height="15" fill="rgb(232,100,14)"/><text x="8.1938%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (8 samples, 0.14%)</title><rect x="7.9438%" y="469" width="0.1355%" height="15" fill="rgb(224,185,1)"/><text x="8.1938%" y="479.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 0.14%)</title><rect x="7.9438%" y="453" width="0.1355%" height="15" fill="rgb(223,139,8)"/><text x="8.1938%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 0.14%)</title><rect x="7.9438%" y="437" width="0.1355%" height="15" fill="rgb(232,213,38)"/><text x="8.1938%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.14%)</title><rect x="7.9438%" y="421" width="0.1355%" height="15" fill="rgb(207,94,22)"/><text x="8.1938%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.14%)</title><rect x="7.9438%" y="405" width="0.1355%" height="15" fill="rgb(219,183,54)"/><text x="8.1938%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.12%)</title><rect x="7.9607%" y="389" width="0.1186%" height="15" fill="rgb(216,185,54)"/><text x="8.2107%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.12%)</title><rect x="7.9607%" y="373" width="0.1186%" height="15" fill="rgb(254,217,39)"/><text x="8.2107%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.12%)</title><rect x="7.9607%" y="357" width="0.1186%" height="15" fill="rgb(240,178,23)"/><text x="8.2107%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.12%)</title><rect x="7.9607%" y="341" width="0.1186%" height="15" fill="rgb(218,11,47)"/><text x="8.2107%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.12%)</title><rect x="7.9607%" y="325" width="0.1186%" height="15" fill="rgb(218,51,51)"/><text x="8.2107%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.12%)</title><rect x="7.9607%" y="309" width="0.1186%" height="15" fill="rgb(238,126,27)"/><text x="8.2107%" y="319.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.12%)</title><rect x="7.9607%" y="293" width="0.1186%" height="15" fill="rgb(249,202,22)"/><text x="8.2107%" y="303.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.12%)</title><rect x="7.9607%" y="277" width="0.1186%" height="15" fill="rgb(254,195,49)"/><text x="8.2107%" y="287.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="7.9946%" y="261" width="0.0847%" height="15" fill="rgb(208,123,14)"/><text x="8.2446%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.03%)</title><rect x="8.0454%" y="245" width="0.0339%" height="15" fill="rgb(224,200,8)"/><text x="8.2954%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (17 samples, 0.29%)</title><rect x="7.8252%" y="549" width="0.2879%" height="15" fill="rgb(217,61,36)"/><text x="8.0752%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.03%)</title><rect x="8.0793%" y="533" width="0.0339%" height="15" fill="rgb(206,35,45)"/><text x="8.3293%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="8.1131%" y="549" width="0.0339%" height="15" fill="rgb(217,65,33)"/><text x="8.3631%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.12%)</title><rect x="9.0786%" y="309" width="0.1186%" height="15" fill="rgb(222,158,48)"/><text x="9.3286%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.12%)</title><rect x="9.0786%" y="293" width="0.1186%" height="15" fill="rgb(254,2,54)"/><text x="9.3286%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned (8 samples, 0.14%)</title><rect x="9.1972%" y="293" width="0.1355%" height="15" fill="rgb(250,143,38)"/><text x="9.4472%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (21 samples, 0.36%)</title><rect x="9.0617%" y="357" width="0.3557%" height="15" fill="rgb(248,25,0)"/><text x="9.3117%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 0.36%)</title><rect x="9.0617%" y="341" width="0.3557%" height="15" fill="rgb(206,152,27)"/><text x="9.3117%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (21 samples, 0.36%)</title><rect x="9.0617%" y="325" width="0.3557%" height="15" fill="rgb(240,77,30)"/><text x="9.3117%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.22%)</title><rect x="9.1972%" y="309" width="0.2202%" height="15" fill="rgb(231,5,3)"/><text x="9.4472%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.08%)</title><rect x="9.3327%" y="293" width="0.0847%" height="15" fill="rgb(207,226,32)"/><text x="9.5827%" y="303.50"></text></g><g><title>__GI___libc_malloc (64 samples, 1.08%)</title><rect x="9.4173%" y="245" width="1.0840%" height="15" fill="rgb(222,207,47)"/><text x="9.6673%" y="255.50"></text></g><g><title>_int_malloc (44 samples, 0.75%)</title><rect x="9.7561%" y="229" width="0.7453%" height="15" fill="rgb(229,115,45)"/><text x="10.0061%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.07%)</title><rect x="10.4336%" y="213" width="0.0678%" height="15" fill="rgb(224,191,6)"/><text x="10.6836%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (65 samples, 1.10%)</title><rect x="9.4173%" y="357" width="1.1009%" height="15" fill="rgb(230,227,24)"/><text x="9.6673%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (65 samples, 1.10%)</title><rect x="9.4173%" y="341" width="1.1009%" height="15" fill="rgb(228,80,19)"/><text x="9.6673%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 1.10%)</title><rect x="9.4173%" y="325" width="1.1009%" height="15" fill="rgb(247,229,0)"/><text x="9.6673%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 1.10%)</title><rect x="9.4173%" y="309" width="1.1009%" height="15" fill="rgb(237,194,15)"/><text x="9.6673%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (65 samples, 1.10%)</title><rect x="9.4173%" y="293" width="1.1009%" height="15" fill="rgb(219,203,20)"/><text x="9.6673%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 1.10%)</title><rect x="9.4173%" y="277" width="1.1009%" height="15" fill="rgb(234,128,8)"/><text x="9.6673%" y="287.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 1.10%)</title><rect x="9.4173%" y="261" width="1.1009%" height="15" fill="rgb(248,202,8)"/><text x="9.6673%" y="271.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="10.5014%" y="245" width="0.0169%" height="15" fill="rgb(206,104,37)"/><text x="10.7514%" y="255.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (88 samples, 1.49%)</title><rect x="9.0447%" y="437" width="1.4905%" height="15" fill="rgb(223,8,27)"/><text x="9.2947%" y="447.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (87 samples, 1.47%)</title><rect x="9.0617%" y="421" width="1.4736%" height="15" fill="rgb(216,217,28)"/><text x="9.3117%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (87 samples, 1.47%)</title><rect x="9.0617%" y="405" width="1.4736%" height="15" fill="rgb(249,199,1)"/><text x="9.3117%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (87 samples, 1.47%)</title><rect x="9.0617%" y="389" width="1.4736%" height="15" fill="rgb(240,85,17)"/><text x="9.3117%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (87 samples, 1.47%)</title><rect x="9.0617%" y="373" width="1.4736%" height="15" fill="rgb(206,108,45)"/><text x="9.3117%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.02%)</title><rect x="10.5183%" y="357" width="0.0169%" height="15" fill="rgb(245,210,41)"/><text x="10.7683%" y="367.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="10.6199%" y="421" width="0.0169%" height="15" fill="rgb(206,13,37)"/><text x="10.8699%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (2 samples, 0.03%)</title><rect x="10.8401%" y="405" width="0.0339%" height="15" fill="rgb(250,61,18)"/><text x="11.0901%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.02%)</title><rect x="10.8909%" y="373" width="0.0169%" height="15" fill="rgb(235,172,48)"/><text x="11.1409%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 0.32%)</title><rect x="10.8740%" y="405" width="0.3218%" height="15" fill="rgb(249,201,17)"/><text x="11.1240%" y="415.50"></text></g><g><title>serde_json::read::as_str (19 samples, 0.32%)</title><rect x="10.8740%" y="389" width="0.3218%" height="15" fill="rgb(219,208,6)"/><text x="11.1240%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (17 samples, 0.29%)</title><rect x="10.9079%" y="373" width="0.2879%" height="15" fill="rgb(248,31,23)"/><text x="11.1579%" y="383.50"></text></g><g><title>core::str::validations::run_utf8_validation (14 samples, 0.24%)</title><rect x="10.9587%" y="357" width="0.2371%" height="15" fill="rgb(245,15,42)"/><text x="11.2087%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="11.1789%" y="341" width="0.0169%" height="15" fill="rgb(222,217,39)"/><text x="11.4289%" y="351.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (54 samples, 0.91%)</title><rect x="10.5352%" y="437" width="0.9146%" height="15" fill="rgb(210,219,27)"/><text x="10.7852%" y="447.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (48 samples, 0.81%)</title><rect x="10.6369%" y="421" width="0.8130%" height="15" fill="rgb(252,166,36)"/><text x="10.8869%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (15 samples, 0.25%)</title><rect x="11.1958%" y="405" width="0.2541%" height="15" fill="rgb(245,132,34)"/><text x="11.4458%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (149 samples, 2.52%)</title><rect x="8.9431%" y="501" width="2.5237%" height="15" fill="rgb(236,54,3)"/><text x="9.1931%" y="511.50">&lt;c..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (149 samples, 2.52%)</title><rect x="8.9431%" y="485" width="2.5237%" height="15" fill="rgb(241,173,43)"/><text x="9.1931%" y="495.50">se..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (149 samples, 2.52%)</title><rect x="8.9431%" y="469" width="2.5237%" height="15" fill="rgb(215,190,9)"/><text x="9.1931%" y="479.50">&lt;s..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (149 samples, 2.52%)</title><rect x="8.9431%" y="453" width="2.5237%" height="15" fill="rgb(242,101,16)"/><text x="9.1931%" y="463.50">&lt;s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (1 samples, 0.02%)</title><rect x="11.4499%" y="437" width="0.0169%" height="15" fill="rgb(223,190,21)"/><text x="11.6999%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (1 samples, 0.02%)</title><rect x="11.4499%" y="421" width="0.0169%" height="15" fill="rgb(215,228,25)"/><text x="11.6999%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 0.10%)</title><rect x="11.4668%" y="501" width="0.1016%" height="15" fill="rgb(225,36,22)"/><text x="11.7168%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (164 samples, 2.78%)</title><rect x="8.9092%" y="517" width="2.7778%" height="15" fill="rgb(251,106,46)"/><text x="9.1592%" y="527.50">&lt;s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (7 samples, 0.12%)</title><rect x="11.5684%" y="501" width="0.1186%" height="15" fill="rgb(208,90,1)"/><text x="11.8184%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (5 samples, 0.08%)</title><rect x="11.6023%" y="485" width="0.0847%" height="15" fill="rgb(243,10,4)"/><text x="11.8523%" y="495.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (5 samples, 0.08%)</title><rect x="11.6023%" y="469" width="0.0847%" height="15" fill="rgb(212,137,27)"/><text x="11.8523%" y="479.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="11.8564%" y="437" width="0.0169%" height="15" fill="rgb(231,220,49)"/><text x="12.1064%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.02%)</title><rect x="12.0427%" y="389" width="0.0169%" height="15" fill="rgb(237,96,20)"/><text x="12.2927%" y="399.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (24 samples, 0.41%)</title><rect x="11.8564%" y="453" width="0.4065%" height="15" fill="rgb(239,229,30)"/><text x="12.1064%" y="463.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (23 samples, 0.39%)</title><rect x="11.8733%" y="437" width="0.3896%" height="15" fill="rgb(219,65,33)"/><text x="12.1233%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.22%)</title><rect x="12.0427%" y="421" width="0.2202%" height="15" fill="rgb(243,134,7)"/><text x="12.2927%" y="431.50"></text></g><g><title>serde_json::read::as_str (13 samples, 0.22%)</title><rect x="12.0427%" y="405" width="0.2202%" height="15" fill="rgb(216,177,54)"/><text x="12.2927%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.20%)</title><rect x="12.0596%" y="389" width="0.2033%" height="15" fill="rgb(211,160,20)"/><text x="12.3096%" y="399.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.12%)</title><rect x="12.1443%" y="373" width="0.1186%" height="15" fill="rgb(239,85,39)"/><text x="12.3943%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (2 samples, 0.03%)</title><rect x="12.3306%" y="437" width="0.0339%" height="15" fill="rgb(232,125,22)"/><text x="12.5806%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.07%)</title><rect x="12.4153%" y="341" width="0.0678%" height="15" fill="rgb(244,57,34)"/><text x="12.6653%" y="351.50"></text></g><g><title>serde_json::read::as_str (4 samples, 0.07%)</title><rect x="12.4153%" y="325" width="0.0678%" height="15" fill="rgb(214,203,32)"/><text x="12.6653%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.07%)</title><rect x="12.4153%" y="309" width="0.0678%" height="15" fill="rgb(207,58,43)"/><text x="12.6653%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.02%)</title><rect x="12.4661%" y="293" width="0.0169%" height="15" fill="rgb(215,193,15)"/><text x="12.7161%" y="303.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (8 samples, 0.14%)</title><rect x="12.3645%" y="373" width="0.1355%" height="15" fill="rgb(232,15,44)"/><text x="12.6145%" y="383.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (7 samples, 0.12%)</title><rect x="12.3814%" y="357" width="0.1186%" height="15" fill="rgb(212,3,48)"/><text x="12.6314%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="12.4831%" y="341" width="0.0169%" height="15" fill="rgb(218,128,7)"/><text x="12.7331%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="12.5000%" y="277" width="0.0169%" height="15" fill="rgb(226,216,39)"/><text x="12.7500%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="12.5000%" y="261" width="0.0169%" height="15" fill="rgb(243,47,51)"/><text x="12.7500%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="12.5000%" y="245" width="0.0169%" height="15" fill="rgb(241,183,40)"/><text x="12.7500%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="12.5000%" y="229" width="0.0169%" height="15" fill="rgb(231,217,32)"/><text x="12.7500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="12.5000%" y="213" width="0.0169%" height="15" fill="rgb(229,61,38)"/><text x="12.7500%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 0.29%)</title><rect x="12.3645%" y="389" width="0.2879%" height="15" fill="rgb(225,210,5)"/><text x="12.6145%" y="399.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (9 samples, 0.15%)</title><rect x="12.5000%" y="373" width="0.1524%" height="15" fill="rgb(231,79,45)"/><text x="12.7500%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (9 samples, 0.15%)</title><rect x="12.5000%" y="357" width="0.1524%" height="15" fill="rgb(224,100,7)"/><text x="12.7500%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (9 samples, 0.15%)</title><rect x="12.5000%" y="341" width="0.1524%" height="15" fill="rgb(241,198,18)"/><text x="12.7500%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (9 samples, 0.15%)</title><rect x="12.5000%" y="325" width="0.1524%" height="15" fill="rgb(252,97,53)"/><text x="12.7500%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.15%)</title><rect x="12.5000%" y="309" width="0.1524%" height="15" fill="rgb(220,88,7)"/><text x="12.7500%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.15%)</title><rect x="12.5000%" y="293" width="0.1524%" height="15" fill="rgb(213,176,14)"/><text x="12.7500%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.14%)</title><rect x="12.5169%" y="277" width="0.1355%" height="15" fill="rgb(246,73,7)"/><text x="12.7669%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.14%)</title><rect x="12.5169%" y="261" width="0.1355%" height="15" fill="rgb(245,64,36)"/><text x="12.7669%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="12.5169%" y="245" width="0.1355%" height="15" fill="rgb(245,80,10)"/><text x="12.7669%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.14%)</title><rect x="12.5169%" y="229" width="0.1355%" height="15" fill="rgb(232,107,50)"/><text x="12.7669%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.14%)</title><rect x="12.5169%" y="213" width="0.1355%" height="15" fill="rgb(253,3,0)"/><text x="12.7669%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.14%)</title><rect x="12.5169%" y="197" width="0.1355%" height="15" fill="rgb(212,99,53)"/><text x="12.7669%" y="207.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.14%)</title><rect x="12.5169%" y="181" width="0.1355%" height="15" fill="rgb(249,111,54)"/><text x="12.7669%" y="191.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.14%)</title><rect x="12.5169%" y="165" width="0.1355%" height="15" fill="rgb(249,55,30)"/><text x="12.7669%" y="175.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="12.5847%" y="149" width="0.0678%" height="15" fill="rgb(237,47,42)"/><text x="12.8347%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="12.6355%" y="133" width="0.0169%" height="15" fill="rgb(211,20,18)"/><text x="12.8855%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 0.32%)</title><rect x="12.3645%" y="421" width="0.3218%" height="15" fill="rgb(231,203,46)"/><text x="12.6145%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (19 samples, 0.32%)</title><rect x="12.3645%" y="405" width="0.3218%" height="15" fill="rgb(237,142,3)"/><text x="12.6145%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.03%)</title><rect x="12.6524%" y="389" width="0.0339%" height="15" fill="rgb(241,107,1)"/><text x="12.9024%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="12.6694%" y="373" width="0.0169%" height="15" fill="rgb(229,83,13)"/><text x="12.9194%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (20 samples, 0.34%)</title><rect x="12.3645%" y="437" width="0.3388%" height="15" fill="rgb(241,91,40)"/><text x="12.6145%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="12.6863%" y="421" width="0.0169%" height="15" fill="rgb(225,3,45)"/><text x="12.9363%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.03%)</title><rect x="12.8557%" y="245" width="0.0339%" height="15" fill="rgb(244,223,14)"/><text x="13.1057%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="12.8557%" y="229" width="0.0339%" height="15" fill="rgb(224,124,37)"/><text x="13.1057%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.03%)</title><rect x="12.8557%" y="213" width="0.0339%" height="15" fill="rgb(251,171,30)"/><text x="13.1057%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="12.8557%" y="197" width="0.0339%" height="15" fill="rgb(236,46,54)"/><text x="13.1057%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="12.8557%" y="181" width="0.0339%" height="15" fill="rgb(245,213,5)"/><text x="13.1057%" y="191.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.25%)</title><rect x="12.8896%" y="133" width="0.2541%" height="15" fill="rgb(230,144,27)"/><text x="13.1396%" y="143.50"></text></g><g><title>_int_malloc (8 samples, 0.14%)</title><rect x="13.0081%" y="117" width="0.1355%" height="15" fill="rgb(220,86,6)"/><text x="13.2581%" y="127.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="13.1267%" y="101" width="0.0169%" height="15" fill="rgb(240,20,13)"/><text x="13.3767%" y="111.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (19 samples, 0.32%)</title><rect x="12.8388%" y="325" width="0.3218%" height="15" fill="rgb(217,89,34)"/><text x="13.0888%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (18 samples, 0.30%)</title><rect x="12.8557%" y="309" width="0.3049%" height="15" fill="rgb(229,13,5)"/><text x="13.1057%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (18 samples, 0.30%)</title><rect x="12.8557%" y="293" width="0.3049%" height="15" fill="rgb(244,67,35)"/><text x="13.1057%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.30%)</title><rect x="12.8557%" y="277" width="0.3049%" height="15" fill="rgb(221,40,2)"/><text x="13.1057%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.30%)</title><rect x="12.8557%" y="261" width="0.3049%" height="15" fill="rgb(237,157,21)"/><text x="13.1057%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.27%)</title><rect x="12.8896%" y="245" width="0.2710%" height="15" fill="rgb(222,94,11)"/><text x="13.1396%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.27%)</title><rect x="12.8896%" y="229" width="0.2710%" height="15" fill="rgb(249,113,6)"/><text x="13.1396%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.27%)</title><rect x="12.8896%" y="213" width="0.2710%" height="15" fill="rgb(238,137,36)"/><text x="13.1396%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.27%)</title><rect x="12.8896%" y="197" width="0.2710%" height="15" fill="rgb(210,102,26)"/><text x="13.1396%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.27%)</title><rect x="12.8896%" y="181" width="0.2710%" height="15" fill="rgb(218,30,30)"/><text x="13.1396%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.27%)</title><rect x="12.8896%" y="165" width="0.2710%" height="15" fill="rgb(214,67,26)"/><text x="13.1396%" y="175.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.27%)</title><rect x="12.8896%" y="149" width="0.2710%" height="15" fill="rgb(251,9,53)"/><text x="13.1396%" y="159.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="13.1436%" y="133" width="0.0169%" height="15" fill="rgb(228,204,25)"/><text x="13.3936%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.02%)</title><rect x="13.2283%" y="261" width="0.0169%" height="15" fill="rgb(207,153,8)"/><text x="13.4783%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.08%)</title><rect x="13.2283%" y="293" width="0.0847%" height="15" fill="rgb(242,9,16)"/><text x="13.4783%" y="303.50"></text></g><g><title>serde_json::read::as_str (5 samples, 0.08%)</title><rect x="13.2283%" y="277" width="0.0847%" height="15" fill="rgb(217,211,10)"/><text x="13.4783%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.07%)</title><rect x="13.2453%" y="261" width="0.0678%" height="15" fill="rgb(219,228,52)"/><text x="13.4953%" y="271.50"></text></g><g><title>core::str::validations::run_utf8_validation (3 samples, 0.05%)</title><rect x="13.2622%" y="245" width="0.0508%" height="15" fill="rgb(231,92,29)"/><text x="13.5122%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (31 samples, 0.53%)</title><rect x="12.8388%" y="389" width="0.5251%" height="15" fill="rgb(232,8,23)"/><text x="13.0888%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (31 samples, 0.53%)</title><rect x="12.8388%" y="373" width="0.5251%" height="15" fill="rgb(216,211,34)"/><text x="13.0888%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (31 samples, 0.53%)</title><rect x="12.8388%" y="357" width="0.5251%" height="15" fill="rgb(236,151,0)"/><text x="13.0888%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (31 samples, 0.53%)</title><rect x="12.8388%" y="341" width="0.5251%" height="15" fill="rgb(209,168,3)"/><text x="13.0888%" y="351.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (12 samples, 0.20%)</title><rect x="13.1606%" y="325" width="0.2033%" height="15" fill="rgb(208,129,28)"/><text x="13.4106%" y="335.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (9 samples, 0.15%)</title><rect x="13.2114%" y="309" width="0.1524%" height="15" fill="rgb(229,78,22)"/><text x="13.4614%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.05%)</title><rect x="13.3130%" y="293" width="0.0508%" height="15" fill="rgb(228,187,13)"/><text x="13.5630%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect x="13.3638%" y="389" width="0.0169%" height="15" fill="rgb(240,119,24)"/><text x="13.6138%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.02%)</title><rect x="13.3808%" y="389" width="0.0169%" height="15" fill="rgb(209,194,42)"/><text x="13.6308%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (34 samples, 0.58%)</title><rect x="12.8388%" y="405" width="0.5759%" height="15" fill="rgb(247,200,46)"/><text x="13.0888%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.02%)</title><rect x="13.3977%" y="389" width="0.0169%" height="15" fill="rgb(218,76,16)"/><text x="13.6477%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="13.3977%" y="373" width="0.0169%" height="15" fill="rgb(225,21,48)"/><text x="13.6477%" y="383.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="13.3977%" y="357" width="0.0169%" height="15" fill="rgb(239,223,50)"/><text x="13.6477%" y="367.50"></text></g><g><title>serde::de::MapAccess::next_entry (44 samples, 0.75%)</title><rect x="12.7033%" y="437" width="0.7453%" height="15" fill="rgb(244,45,21)"/><text x="12.9533%" y="447.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (44 samples, 0.75%)</title><rect x="12.7033%" y="421" width="0.7453%" height="15" fill="rgb(232,33,43)"/><text x="12.9533%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.03%)</title><rect x="13.4146%" y="405" width="0.0339%" height="15" fill="rgb(209,8,3)"/><text x="13.6646%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="13.4316%" y="389" width="0.0169%" height="15" fill="rgb(214,25,53)"/><text x="13.6816%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="13.4316%" y="373" width="0.0169%" height="15" fill="rgb(254,186,54)"/><text x="13.6816%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="13.4316%" y="357" width="0.0169%" height="15" fill="rgb(208,174,49)"/><text x="13.6816%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.02%)</title><rect x="13.4316%" y="341" width="0.0169%" height="15" fill="rgb(233,191,51)"/><text x="13.6816%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="13.4485%" y="405" width="0.0169%" height="15" fill="rgb(222,134,10)"/><text x="13.6985%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="13.4485%" y="389" width="0.0169%" height="15" fill="rgb(230,226,20)"/><text x="13.6985%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="13.4485%" y="373" width="0.0169%" height="15" fill="rgb(251,111,25)"/><text x="13.6985%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.02%)</title><rect x="13.4485%" y="357" width="0.0169%" height="15" fill="rgb(224,40,46)"/><text x="13.6985%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.02%)</title><rect x="13.4485%" y="341" width="0.0169%" height="15" fill="rgb(236,108,47)"/><text x="13.6985%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.02%)</title><rect x="13.4485%" y="325" width="0.0169%" height="15" fill="rgb(234,93,0)"/><text x="13.6985%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="13.4485%" y="309" width="0.0169%" height="15" fill="rgb(224,213,32)"/><text x="13.6985%" y="319.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="13.4485%" y="293" width="0.0169%" height="15" fill="rgb(251,11,48)"/><text x="13.6985%" y="303.50"></text></g><g><title>serde::de::MapAccess::next_value (2 samples, 0.03%)</title><rect x="13.4485%" y="437" width="0.0339%" height="15" fill="rgb(236,173,5)"/><text x="13.6985%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.03%)</title><rect x="13.4485%" y="421" width="0.0339%" height="15" fill="rgb(230,95,12)"/><text x="13.6985%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.02%)</title><rect x="13.4654%" y="405" width="0.0169%" height="15" fill="rgb(232,209,1)"/><text x="13.7154%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.02%)</title><rect x="13.4654%" y="389" width="0.0169%" height="15" fill="rgb(232,6,1)"/><text x="13.7154%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="13.4654%" y="373" width="0.0169%" height="15" fill="rgb(210,224,50)"/><text x="13.7154%" y="383.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="13.4654%" y="357" width="0.0169%" height="15" fill="rgb(228,127,35)"/><text x="13.7154%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.12%)</title><rect x="13.6687%" y="309" width="0.1186%" height="15" fill="rgb(245,102,45)"/><text x="13.9187%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (32 samples, 0.54%)</title><rect x="13.6687%" y="389" width="0.5420%" height="15" fill="rgb(214,1,49)"/><text x="13.9187%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (32 samples, 0.54%)</title><rect x="13.6687%" y="373" width="0.5420%" height="15" fill="rgb(226,163,40)"/><text x="13.9187%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32 samples, 0.54%)</title><rect x="13.6687%" y="357" width="0.5420%" height="15" fill="rgb(239,212,28)"/><text x="13.9187%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::new_leaf (32 samples, 0.54%)</title><rect x="13.6687%" y="341" width="0.5420%" height="15" fill="rgb(220,20,13)"/><text x="13.9187%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (32 samples, 0.54%)</title><rect x="13.6687%" y="325" width="0.5420%" height="15" fill="rgb(210,164,35)"/><text x="13.9187%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.42%)</title><rect x="13.7873%" y="309" width="0.4234%" height="15" fill="rgb(248,109,41)"/><text x="14.0373%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (25 samples, 0.42%)</title><rect x="13.7873%" y="293" width="0.4234%" height="15" fill="rgb(238,23,50)"/><text x="14.0373%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.42%)</title><rect x="13.7873%" y="277" width="0.4234%" height="15" fill="rgb(211,48,49)"/><text x="14.0373%" y="287.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.42%)</title><rect x="13.7873%" y="261" width="0.4234%" height="15" fill="rgb(223,36,21)"/><text x="14.0373%" y="271.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.42%)</title><rect x="13.7873%" y="245" width="0.4234%" height="15" fill="rgb(207,123,46)"/><text x="14.0373%" y="255.50"></text></g><g><title>_int_malloc (22 samples, 0.37%)</title><rect x="13.8381%" y="229" width="0.3726%" height="15" fill="rgb(240,218,32)"/><text x="14.0881%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (10 samples, 0.17%)</title><rect x="14.0413%" y="213" width="0.1694%" height="15" fill="rgb(252,5,43)"/><text x="14.2913%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (34 samples, 0.58%)</title><rect x="13.6687%" y="405" width="0.5759%" height="15" fill="rgb(252,84,19)"/><text x="13.9187%" y="415.50"></text></g><g><title>alloc::collections::btree::search::search_tree (2 samples, 0.03%)</title><rect x="14.2107%" y="389" width="0.0339%" height="15" fill="rgb(243,152,39)"/><text x="14.4607%" y="399.50"></text></g><g><title>alloc::collections::btree::search::search_node (2 samples, 0.03%)</title><rect x="14.2107%" y="373" width="0.0339%" height="15" fill="rgb(234,160,15)"/><text x="14.4607%" y="383.50"></text></g><g><title>alloc::collections::btree::search::search_linear (2 samples, 0.03%)</title><rect x="14.2107%" y="357" width="0.0339%" height="15" fill="rgb(237,34,20)"/><text x="14.4607%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (2 samples, 0.03%)</title><rect x="14.2107%" y="341" width="0.0339%" height="15" fill="rgb(229,97,13)"/><text x="14.4607%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.03%)</title><rect x="14.2107%" y="325" width="0.0339%" height="15" fill="rgb(234,71,50)"/><text x="14.4607%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="14.2107%" y="309" width="0.0339%" height="15" fill="rgb(253,155,4)"/><text x="14.4607%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="14.2107%" y="293" width="0.0339%" height="15" fill="rgb(222,185,37)"/><text x="14.4607%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.03%)</title><rect x="14.2107%" y="277" width="0.0339%" height="15" fill="rgb(251,177,13)"/><text x="14.4607%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="373" width="0.0169%" height="15" fill="rgb(250,179,40)"/><text x="14.7317%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="357" width="0.0169%" height="15" fill="rgb(242,44,2)"/><text x="14.7317%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="341" width="0.0169%" height="15" fill="rgb(216,177,13)"/><text x="14.7317%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="325" width="0.0169%" height="15" fill="rgb(216,106,43)"/><text x="14.7317%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="309" width="0.0169%" height="15" fill="rgb(216,183,2)"/><text x="14.7317%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="293" width="0.0169%" height="15" fill="rgb(249,75,3)"/><text x="14.7317%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="14.4817%" y="277" width="0.0169%" height="15" fill="rgb(219,67,39)"/><text x="14.7317%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.02%)</title><rect x="14.5325%" y="309" width="0.0169%" height="15" fill="rgb(253,228,2)"/><text x="14.7825%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (136 samples, 2.30%)</title><rect x="12.2629%" y="453" width="2.3035%" height="15" fill="rgb(235,138,27)"/><text x="12.5129%" y="463.50">&lt;..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (64 samples, 1.08%)</title><rect x="13.4824%" y="437" width="1.0840%" height="15" fill="rgb(236,97,51)"/><text x="13.7324%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (57 samples, 0.97%)</title><rect x="13.6009%" y="421" width="0.9654%" height="15" fill="rgb(240,80,30)"/><text x="13.8509%" y="431.50"></text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (19 samples, 0.32%)</title><rect x="14.2446%" y="405" width="0.3218%" height="15" fill="rgb(230,178,19)"/><text x="14.4946%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 0.29%)</title><rect x="14.2785%" y="389" width="0.2879%" height="15" fill="rgb(210,190,27)"/><text x="14.5285%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.07%)</title><rect x="14.4986%" y="373" width="0.0678%" height="15" fill="rgb(222,107,31)"/><text x="14.7486%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (4 samples, 0.07%)</title><rect x="14.4986%" y="357" width="0.0678%" height="15" fill="rgb(216,127,34)"/><text x="14.7486%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::leafy_insert_fit (4 samples, 0.07%)</title><rect x="14.4986%" y="341" width="0.0678%" height="15" fill="rgb(234,116,52)"/><text x="14.7486%" y="351.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (4 samples, 0.07%)</title><rect x="14.4986%" y="325" width="0.0678%" height="15" fill="rgb(222,124,15)"/><text x="14.7486%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="14.5495%" y="309" width="0.0169%" height="15" fill="rgb(231,179,28)"/><text x="14.7995%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.03%)</title><rect x="14.5664%" y="341" width="0.0339%" height="15" fill="rgb(226,93,45)"/><text x="14.8164%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="14.5664%" y="325" width="0.0339%" height="15" fill="rgb(215,8,51)"/><text x="14.8164%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.03%)</title><rect x="14.5664%" y="309" width="0.0339%" height="15" fill="rgb(223,106,5)"/><text x="14.8164%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.03%)</title><rect x="14.5664%" y="293" width="0.0339%" height="15" fill="rgb(250,191,5)"/><text x="14.8164%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="14.5664%" y="277" width="0.0339%" height="15" fill="rgb(242,132,44)"/><text x="14.8164%" y="287.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.49%)</title><rect x="14.6172%" y="229" width="0.4912%" height="15" fill="rgb(251,152,29)"/><text x="14.8672%" y="239.50"></text></g><g><title>_int_malloc (18 samples, 0.30%)</title><rect x="14.8035%" y="213" width="0.3049%" height="15" fill="rgb(218,179,5)"/><text x="15.0535%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.03%)</title><rect x="15.0745%" y="197" width="0.0339%" height="15" fill="rgb(227,67,19)"/><text x="15.3245%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="15.1084%" y="229" width="0.0169%" height="15" fill="rgb(233,119,31)"/><text x="15.3584%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="15.1084%" y="213" width="0.0169%" height="15" fill="rgb(241,120,22)"/><text x="15.3584%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32 samples, 0.54%)</title><rect x="14.6003%" y="341" width="0.5420%" height="15" fill="rgb(224,102,30)"/><text x="14.8503%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (32 samples, 0.54%)</title><rect x="14.6003%" y="325" width="0.5420%" height="15" fill="rgb(210,164,37)"/><text x="14.8503%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 0.54%)</title><rect x="14.6003%" y="309" width="0.5420%" height="15" fill="rgb(226,191,16)"/><text x="14.8503%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 0.54%)</title><rect x="14.6003%" y="293" width="0.5420%" height="15" fill="rgb(214,40,45)"/><text x="14.8503%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (32 samples, 0.54%)</title><rect x="14.6003%" y="277" width="0.5420%" height="15" fill="rgb(244,29,26)"/><text x="14.8503%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.54%)</title><rect x="14.6003%" y="261" width="0.5420%" height="15" fill="rgb(216,16,5)"/><text x="14.8503%" y="271.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.53%)</title><rect x="14.6172%" y="245" width="0.5251%" height="15" fill="rgb(249,76,35)"/><text x="14.8672%" y="255.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="15.1253%" y="229" width="0.0169%" height="15" fill="rgb(207,11,44)"/><text x="15.3753%" y="239.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (35 samples, 0.59%)</title><rect x="14.5664%" y="453" width="0.5928%" height="15" fill="rgb(228,190,49)"/><text x="14.8164%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (35 samples, 0.59%)</title><rect x="14.5664%" y="437" width="0.5928%" height="15" fill="rgb(214,173,12)"/><text x="14.8164%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (35 samples, 0.59%)</title><rect x="14.5664%" y="421" width="0.5928%" height="15" fill="rgb(218,26,35)"/><text x="14.8164%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (35 samples, 0.59%)</title><rect x="14.5664%" y="405" width="0.5928%" height="15" fill="rgb(220,200,19)"/><text x="14.8164%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (35 samples, 0.59%)</title><rect x="14.5664%" y="389" width="0.5928%" height="15" fill="rgb(239,95,49)"/><text x="14.8164%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.59%)</title><rect x="14.5664%" y="373" width="0.5928%" height="15" fill="rgb(235,85,53)"/><text x="14.8164%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.59%)</title><rect x="14.5664%" y="357" width="0.5928%" height="15" fill="rgb(233,133,31)"/><text x="14.8164%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="15.1423%" y="341" width="0.0169%" height="15" fill="rgb(218,25,20)"/><text x="15.3923%" y="351.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (1 samples, 0.02%)</title><rect x="15.1931%" y="421" width="0.0169%" height="15" fill="rgb(252,210,38)"/><text x="15.4431%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (4 samples, 0.07%)</title><rect x="15.1592%" y="453" width="0.0678%" height="15" fill="rgb(242,134,21)"/><text x="15.4092%" y="463.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (4 samples, 0.07%)</title><rect x="15.1592%" y="437" width="0.0678%" height="15" fill="rgb(213,28,48)"/><text x="15.4092%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (1 samples, 0.02%)</title><rect x="15.2100%" y="421" width="0.0169%" height="15" fill="rgb(250,196,2)"/><text x="15.4600%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="15.2100%" y="405" width="0.0169%" height="15" fill="rgb(227,5,17)"/><text x="15.4600%" y="415.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="15.2100%" y="389" width="0.0169%" height="15" fill="rgb(221,226,24)"/><text x="15.4600%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.05%)</title><rect x="15.2270%" y="453" width="0.0508%" height="15" fill="rgb(211,5,48)"/><text x="15.4770%" y="463.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.02%)</title><rect x="15.2608%" y="437" width="0.0169%" height="15" fill="rgb(219,150,6)"/><text x="15.5108%" y="447.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="15.2608%" y="421" width="0.0169%" height="15" fill="rgb(251,46,16)"/><text x="15.5108%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (209 samples, 3.54%)</title><rect x="11.7717%" y="469" width="3.5400%" height="15" fill="rgb(220,204,40)"/><text x="12.0217%" y="479.50">&lt;&amp;m..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.03%)</title><rect x="15.2778%" y="453" width="0.0339%" height="15" fill="rgb(211,85,2)"/><text x="15.5278%" y="463.50"></text></g><g><title>serde::de::MapAccess::next_entry (426 samples, 7.22%)</title><rect x="8.1470%" y="549" width="7.2154%" height="15" fill="rgb(229,17,7)"/><text x="8.3970%" y="559.50">serde::de:..</text></g><g><title>serde::de::MapAccess::next_entry_seed (426 samples, 7.22%)</title><rect x="8.1470%" y="533" width="7.2154%" height="15" fill="rgb(239,72,28)"/><text x="8.3970%" y="543.50">serde::de:..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (217 samples, 3.68%)</title><rect x="11.6870%" y="517" width="3.6755%" height="15" fill="rgb(230,47,54)"/><text x="11.9370%" y="527.50">&lt;ser..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (216 samples, 3.66%)</title><rect x="11.7039%" y="501" width="3.6585%" height="15" fill="rgb(214,50,8)"/><text x="11.9539%" y="511.50">&lt;cor..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (216 samples, 3.66%)</title><rect x="11.7039%" y="485" width="3.6585%" height="15" fill="rgb(216,198,43)"/><text x="11.9539%" y="495.50">serd..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.05%)</title><rect x="15.3117%" y="469" width="0.0508%" height="15" fill="rgb(234,20,35)"/><text x="15.5617%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="15.3286%" y="453" width="0.0339%" height="15" fill="rgb(254,45,19)"/><text x="15.5786%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (3 samples, 0.05%)</title><rect x="15.3963%" y="405" width="0.0508%" height="15" fill="rgb(219,14,44)"/><text x="15.6463%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="15.4641%" y="389" width="0.0169%" height="15" fill="rgb(217,220,26)"/><text x="15.7141%" y="399.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (8 samples, 0.14%)</title><rect x="15.3794%" y="469" width="0.1355%" height="15" fill="rgb(213,158,28)"/><text x="15.6294%" y="479.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (8 samples, 0.14%)</title><rect x="15.3794%" y="453" width="0.1355%" height="15" fill="rgb(252,51,52)"/><text x="15.6294%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.12%)</title><rect x="15.3963%" y="437" width="0.1186%" height="15" fill="rgb(246,89,16)"/><text x="15.6463%" y="447.50"></text></g><g><title>serde_json::read::as_str (7 samples, 0.12%)</title><rect x="15.3963%" y="421" width="0.1186%" height="15" fill="rgb(216,158,49)"/><text x="15.6463%" y="431.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.07%)</title><rect x="15.4472%" y="405" width="0.0678%" height="15" fill="rgb(236,107,19)"/><text x="15.6972%" y="415.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.03%)</title><rect x="15.4810%" y="389" width="0.0339%" height="15" fill="rgb(228,185,30)"/><text x="15.7310%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="15.5149%" y="357" width="0.0169%" height="15" fill="rgb(246,134,8)"/><text x="15.7649%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="15.5149%" y="341" width="0.0169%" height="15" fill="rgb(214,143,50)"/><text x="15.7649%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="15.5149%" y="325" width="0.0169%" height="15" fill="rgb(228,75,8)"/><text x="15.7649%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="15.5149%" y="309" width="0.0169%" height="15" fill="rgb(207,175,4)"/><text x="15.7649%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="15.5149%" y="293" width="0.0169%" height="15" fill="rgb(205,108,24)"/><text x="15.7649%" y="303.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.15%)</title><rect x="15.5488%" y="245" width="0.1524%" height="15" fill="rgb(244,120,49)"/><text x="15.7988%" y="255.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="15.6335%" y="229" width="0.0678%" height="15" fill="rgb(223,47,38)"/><text x="15.8835%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="15.7012%" y="245" width="0.0169%" height="15" fill="rgb(229,179,11)"/><text x="15.9512%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="15.7012%" y="229" width="0.0169%" height="15" fill="rgb(231,122,1)"/><text x="15.9512%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 0.37%)</title><rect x="15.3794%" y="485" width="0.3726%" height="15" fill="rgb(245,119,9)"/><text x="15.6294%" y="495.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (14 samples, 0.24%)</title><rect x="15.5149%" y="469" width="0.2371%" height="15" fill="rgb(241,163,25)"/><text x="15.7649%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (14 samples, 0.24%)</title><rect x="15.5149%" y="453" width="0.2371%" height="15" fill="rgb(217,214,3)"/><text x="15.7649%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (14 samples, 0.24%)</title><rect x="15.5149%" y="437" width="0.2371%" height="15" fill="rgb(240,86,28)"/><text x="15.7649%" y="447.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (14 samples, 0.24%)</title><rect x="15.5149%" y="421" width="0.2371%" height="15" fill="rgb(215,47,9)"/><text x="15.7649%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (14 samples, 0.24%)</title><rect x="15.5149%" y="405" width="0.2371%" height="15" fill="rgb(252,25,45)"/><text x="15.7649%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.24%)</title><rect x="15.5149%" y="389" width="0.2371%" height="15" fill="rgb(251,164,9)"/><text x="15.7649%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.24%)</title><rect x="15.5149%" y="373" width="0.2371%" height="15" fill="rgb(233,194,0)"/><text x="15.7649%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.22%)</title><rect x="15.5318%" y="357" width="0.2202%" height="15" fill="rgb(249,111,24)"/><text x="15.7818%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (13 samples, 0.22%)</title><rect x="15.5318%" y="341" width="0.2202%" height="15" fill="rgb(250,223,3)"/><text x="15.7818%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.22%)</title><rect x="15.5318%" y="325" width="0.2202%" height="15" fill="rgb(236,178,37)"/><text x="15.7818%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.22%)</title><rect x="15.5318%" y="309" width="0.2202%" height="15" fill="rgb(241,158,50)"/><text x="15.7818%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (13 samples, 0.22%)</title><rect x="15.5318%" y="293" width="0.2202%" height="15" fill="rgb(213,121,41)"/><text x="15.7818%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.22%)</title><rect x="15.5318%" y="277" width="0.2202%" height="15" fill="rgb(240,92,3)"/><text x="15.7818%" y="287.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.20%)</title><rect x="15.5488%" y="261" width="0.2033%" height="15" fill="rgb(205,123,3)"/><text x="15.7988%" y="271.50"></text></g><g><title>__rust_alloc (2 samples, 0.03%)</title><rect x="15.7182%" y="245" width="0.0339%" height="15" fill="rgb(205,97,47)"/><text x="15.9682%" y="255.50"></text></g><g><title>serde::de::MapAccess::next_value (24 samples, 0.41%)</title><rect x="15.3625%" y="549" width="0.4065%" height="15" fill="rgb(247,152,14)"/><text x="15.6125%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (24 samples, 0.41%)</title><rect x="15.3625%" y="533" width="0.4065%" height="15" fill="rgb(248,195,53)"/><text x="15.6125%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (24 samples, 0.41%)</title><rect x="15.3625%" y="517" width="0.4065%" height="15" fill="rgb(226,201,16)"/><text x="15.6125%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (24 samples, 0.41%)</title><rect x="15.3625%" y="501" width="0.4065%" height="15" fill="rgb(205,98,0)"/><text x="15.6125%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="15.7520%" y="485" width="0.0169%" height="15" fill="rgb(214,191,48)"/><text x="16.0020%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="15.7520%" y="469" width="0.0169%" height="15" fill="rgb(237,112,39)"/><text x="16.0020%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.22%)</title><rect x="16.2263%" y="421" width="0.2202%" height="15" fill="rgb(247,203,27)"/><text x="16.4763%" y="431.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.39%)</title><rect x="16.4465%" y="357" width="0.3896%" height="15" fill="rgb(235,124,28)"/><text x="16.6965%" y="367.50"></text></g><g><title>_int_malloc (18 samples, 0.30%)</title><rect x="16.5312%" y="341" width="0.3049%" height="15" fill="rgb(208,207,46)"/><text x="16.7812%" y="351.50"></text></g><g><title>unlink_chunk.constprop.0 (8 samples, 0.14%)</title><rect x="16.7005%" y="325" width="0.1355%" height="15" fill="rgb(234,176,4)"/><text x="16.9505%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (41 samples, 0.69%)</title><rect x="16.1585%" y="501" width="0.6944%" height="15" fill="rgb(230,133,28)"/><text x="16.4085%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (41 samples, 0.69%)</title><rect x="16.1585%" y="485" width="0.6944%" height="15" fill="rgb(211,137,40)"/><text x="16.4085%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (37 samples, 0.63%)</title><rect x="16.2263%" y="469" width="0.6267%" height="15" fill="rgb(254,35,13)"/><text x="16.4763%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::new_leaf (37 samples, 0.63%)</title><rect x="16.2263%" y="453" width="0.6267%" height="15" fill="rgb(225,49,51)"/><text x="16.4763%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.63%)</title><rect x="16.2263%" y="437" width="0.6267%" height="15" fill="rgb(251,10,15)"/><text x="16.4763%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.41%)</title><rect x="16.4465%" y="421" width="0.4065%" height="15" fill="rgb(228,207,15)"/><text x="16.6965%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (24 samples, 0.41%)</title><rect x="16.4465%" y="405" width="0.4065%" height="15" fill="rgb(241,99,19)"/><text x="16.6965%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.41%)</title><rect x="16.4465%" y="389" width="0.4065%" height="15" fill="rgb(207,104,49)"/><text x="16.6965%" y="399.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.41%)</title><rect x="16.4465%" y="373" width="0.4065%" height="15" fill="rgb(234,99,18)"/><text x="16.6965%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="16.8360%" y="357" width="0.0169%" height="15" fill="rgb(213,191,49)"/><text x="17.0860%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="16.8360%" y="341" width="0.0169%" height="15" fill="rgb(210,226,19)"/><text x="17.0860%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.03%)</title><rect x="16.8530%" y="469" width="0.0339%" height="15" fill="rgb(229,97,18)"/><text x="17.1030%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.08%)</title><rect x="16.9038%" y="421" width="0.0847%" height="15" fill="rgb(211,167,15)"/><text x="17.1538%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.08%)</title><rect x="16.9038%" y="405" width="0.0847%" height="15" fill="rgb(210,169,34)"/><text x="17.1538%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (5 samples, 0.08%)</title><rect x="16.9038%" y="389" width="0.0847%" height="15" fill="rgb(241,121,31)"/><text x="17.1538%" y="399.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.19%)</title><rect x="17.0732%" y="389" width="0.1863%" height="15" fill="rgb(232,40,11)"/><text x="17.3232%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (66 samples, 1.12%)</title><rect x="16.1585%" y="517" width="1.1179%" height="15" fill="rgb(205,86,26)"/><text x="16.4085%" y="527.50"></text></g><g><title>alloc::collections::btree::search::search_tree (25 samples, 0.42%)</title><rect x="16.8530%" y="501" width="0.4234%" height="15" fill="rgb(231,126,28)"/><text x="17.1030%" y="511.50"></text></g><g><title>alloc::collections::btree::search::search_node (25 samples, 0.42%)</title><rect x="16.8530%" y="485" width="0.4234%" height="15" fill="rgb(219,221,18)"/><text x="17.1030%" y="495.50"></text></g><g><title>alloc::collections::btree::search::search_linear (23 samples, 0.39%)</title><rect x="16.8869%" y="469" width="0.3896%" height="15" fill="rgb(211,40,0)"/><text x="17.1369%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (22 samples, 0.37%)</title><rect x="16.9038%" y="453" width="0.3726%" height="15" fill="rgb(239,85,43)"/><text x="17.1538%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (22 samples, 0.37%)</title><rect x="16.9038%" y="437" width="0.3726%" height="15" fill="rgb(231,55,21)"/><text x="17.1538%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (17 samples, 0.29%)</title><rect x="16.9885%" y="421" width="0.2879%" height="15" fill="rgb(225,184,43)"/><text x="17.2385%" y="431.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (17 samples, 0.29%)</title><rect x="16.9885%" y="405" width="0.2879%" height="15" fill="rgb(251,158,41)"/><text x="17.2385%" y="415.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="17.2595%" y="389" width="0.0169%" height="15" fill="rgb(234,159,37)"/><text x="17.5095%" y="399.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="17.2595%" y="373" width="0.0169%" height="15" fill="rgb(216,204,22)"/><text x="17.5095%" y="383.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="17.2595%" y="357" width="0.0169%" height="15" fill="rgb(214,17,3)"/><text x="17.5095%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="17.9031%" y="405" width="0.0169%" height="15" fill="rgb(212,111,17)"/><text x="18.1531%" y="415.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.03%)</title><rect x="17.9031%" y="421" width="0.0339%" height="15" fill="rgb(221,157,24)"/><text x="18.1531%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="17.9201%" y="405" width="0.0169%" height="15" fill="rgb(252,16,13)"/><text x="18.1701%" y="415.50"></text></g><g><title>serde::de::MapAccess::next_value (624 samples, 10.57%)</title><rect x="7.4695%" y="645" width="10.5691%" height="15" fill="rgb(221,62,2)"/><text x="7.7195%" y="655.50">serde::de::MapA..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (624 samples, 10.57%)</title><rect x="7.4695%" y="629" width="10.5691%" height="15" fill="rgb(247,87,22)"/><text x="7.7195%" y="639.50">&lt;serde_json::de..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (623 samples, 10.55%)</title><rect x="7.4864%" y="613" width="10.5522%" height="15" fill="rgb(215,73,9)"/><text x="7.7364%" y="623.50">&lt;core::marker::..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (623 samples, 10.55%)</title><rect x="7.4864%" y="597" width="10.5522%" height="15" fill="rgb(207,175,33)"/><text x="7.7364%" y="607.50">serde_json::val..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (623 samples, 10.55%)</title><rect x="7.4864%" y="581" width="10.5522%" height="15" fill="rgb(243,129,54)"/><text x="7.7364%" y="591.50">&lt;&amp;mut serde_jso..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (621 samples, 10.52%)</title><rect x="7.5203%" y="565" width="10.5183%" height="15" fill="rgb(227,119,45)"/><text x="7.7703%" y="575.50">&lt;serde_json::va..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (134 samples, 2.27%)</title><rect x="15.7690%" y="549" width="2.2696%" height="15" fill="rgb(205,109,36)"/><text x="16.0190%" y="559.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (115 samples, 1.95%)</title><rect x="16.0908%" y="533" width="1.9478%" height="15" fill="rgb(205,6,39)"/><text x="16.3408%" y="543.50">a..</text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (45 samples, 0.76%)</title><rect x="17.2764%" y="517" width="0.7622%" height="15" fill="rgb(221,32,16)"/><text x="17.5264%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (37 samples, 0.63%)</title><rect x="17.4119%" y="501" width="0.6267%" height="15" fill="rgb(228,144,50)"/><text x="17.6619%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (11 samples, 0.19%)</title><rect x="17.8523%" y="485" width="0.1863%" height="15" fill="rgb(229,201,53)"/><text x="18.1023%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (9 samples, 0.15%)</title><rect x="17.8862%" y="469" width="0.1524%" height="15" fill="rgb(249,153,27)"/><text x="18.1362%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::leafy_insert_fit (9 samples, 0.15%)</title><rect x="17.8862%" y="453" width="0.1524%" height="15" fill="rgb(227,106,25)"/><text x="18.1362%" y="463.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (9 samples, 0.15%)</title><rect x="17.8862%" y="437" width="0.1524%" height="15" fill="rgb(230,65,29)"/><text x="18.1362%" y="447.50"></text></g><g><title>core::ptr::write (6 samples, 0.10%)</title><rect x="17.9370%" y="421" width="0.1016%" height="15" fill="rgb(221,57,46)"/><text x="18.1870%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.20%)</title><rect x="18.1064%" y="517" width="0.2033%" height="15" fill="rgb(229,161,17)"/><text x="18.3564%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (34 samples, 0.58%)</title><rect x="18.0894%" y="597" width="0.5759%" height="15" fill="rgb(222,213,11)"/><text x="18.3394%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (34 samples, 0.58%)</title><rect x="18.0894%" y="581" width="0.5759%" height="15" fill="rgb(235,35,13)"/><text x="18.3394%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (34 samples, 0.58%)</title><rect x="18.0894%" y="565" width="0.5759%" height="15" fill="rgb(233,158,34)"/><text x="18.3394%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::new_leaf (34 samples, 0.58%)</title><rect x="18.0894%" y="549" width="0.5759%" height="15" fill="rgb(215,151,48)"/><text x="18.3394%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.58%)</title><rect x="18.0894%" y="533" width="0.5759%" height="15" fill="rgb(229,84,14)"/><text x="18.3394%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (21 samples, 0.36%)</title><rect x="18.3096%" y="517" width="0.3557%" height="15" fill="rgb(229,68,14)"/><text x="18.5596%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (21 samples, 0.36%)</title><rect x="18.3096%" y="501" width="0.3557%" height="15" fill="rgb(243,106,26)"/><text x="18.5596%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.36%)</title><rect x="18.3096%" y="485" width="0.3557%" height="15" fill="rgb(206,45,38)"/><text x="18.5596%" y="495.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.36%)</title><rect x="18.3096%" y="469" width="0.3557%" height="15" fill="rgb(226,6,15)"/><text x="18.5596%" y="479.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.36%)</title><rect x="18.3096%" y="453" width="0.3557%" height="15" fill="rgb(232,22,54)"/><text x="18.5596%" y="463.50"></text></g><g><title>_int_malloc (16 samples, 0.27%)</title><rect x="18.3943%" y="437" width="0.2710%" height="15" fill="rgb(229,222,32)"/><text x="18.6443%" y="447.50"></text></g><g><title>unlink_chunk.constprop.0 (9 samples, 0.15%)</title><rect x="18.5129%" y="421" width="0.1524%" height="15" fill="rgb(228,62,29)"/><text x="18.7629%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (35 samples, 0.59%)</title><rect x="18.0894%" y="613" width="0.5928%" height="15" fill="rgb(251,103,34)"/><text x="18.3394%" y="623.50"></text></g><g><title>alloc::collections::btree::search::search_tree (1 samples, 0.02%)</title><rect x="18.6653%" y="597" width="0.0169%" height="15" fill="rgb(233,12,30)"/><text x="18.9153%" y="607.50"></text></g><g><title>alloc::collections::btree::search::search_node (1 samples, 0.02%)</title><rect x="18.6653%" y="581" width="0.0169%" height="15" fill="rgb(238,52,0)"/><text x="18.9153%" y="591.50"></text></g><g><title>alloc::collections::btree::search::search_linear (1 samples, 0.02%)</title><rect x="18.6653%" y="565" width="0.0169%" height="15" fill="rgb(223,98,5)"/><text x="18.9153%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="18.6653%" y="549" width="0.0169%" height="15" fill="rgb(228,75,37)"/><text x="18.9153%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="18.6653%" y="533" width="0.0169%" height="15" fill="rgb(205,115,49)"/><text x="18.9153%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="18.6653%" y="517" width="0.0169%" height="15" fill="rgb(250,154,43)"/><text x="18.9153%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="18.6653%" y="501" width="0.0169%" height="15" fill="rgb(226,43,29)"/><text x="18.9153%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="18.6653%" y="485" width="0.0169%" height="15" fill="rgb(249,228,39)"/><text x="18.9153%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (714 samples, 12.09%)</title><rect x="6.8259%" y="661" width="12.0935%" height="15" fill="rgb(216,79,43)"/><text x="7.0759%" y="671.50">&lt;serde_json::value..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (52 samples, 0.88%)</title><rect x="18.0386%" y="645" width="0.8808%" height="15" fill="rgb(228,95,12)"/><text x="18.2886%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (49 samples, 0.83%)</title><rect x="18.0894%" y="629" width="0.8299%" height="15" fill="rgb(249,221,15)"/><text x="18.3394%" y="639.50"></text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.24%)</title><rect x="18.6822%" y="613" width="0.2371%" height="15" fill="rgb(233,34,13)"/><text x="18.9322%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.19%)</title><rect x="18.7331%" y="597" width="0.1863%" height="15" fill="rgb(214,103,39)"/><text x="18.9831%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.03%)</title><rect x="18.8855%" y="581" width="0.0339%" height="15" fill="rgb(251,126,39)"/><text x="19.1355%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.03%)</title><rect x="18.8855%" y="565" width="0.0339%" height="15" fill="rgb(214,216,36)"/><text x="19.1355%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::leafy_insert_fit (2 samples, 0.03%)</title><rect x="18.8855%" y="549" width="0.0339%" height="15" fill="rgb(220,221,8)"/><text x="19.1355%" y="559.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (2 samples, 0.03%)</title><rect x="18.8855%" y="533" width="0.0339%" height="15" fill="rgb(240,216,3)"/><text x="19.1355%" y="543.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="18.8855%" y="517" width="0.0339%" height="15" fill="rgb(232,218,17)"/><text x="19.1355%" y="527.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.02%)</title><rect x="18.9194%" y="613" width="0.0169%" height="15" fill="rgb(229,163,45)"/><text x="19.1694%" y="623.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (722 samples, 12.23%)</title><rect x="6.7412%" y="725" width="12.2290%" height="15" fill="rgb(231,110,42)"/><text x="6.9912%" y="735.50">&lt;serde_json::de::S..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (721 samples, 12.21%)</title><rect x="6.7581%" y="709" width="12.2121%" height="15" fill="rgb(208,170,48)"/><text x="7.0081%" y="719.50">&lt;core::marker::Pha..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (721 samples, 12.21%)</title><rect x="6.7581%" y="693" width="12.2121%" height="15" fill="rgb(239,116,25)"/><text x="7.0081%" y="703.50">serde_json::value:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (721 samples, 12.21%)</title><rect x="6.7581%" y="677" width="12.2121%" height="15" fill="rgb(219,200,50)"/><text x="7.0081%" y="687.50">&lt;&amp;mut serde_json::..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_map (3 samples, 0.05%)</title><rect x="18.9194%" y="661" width="0.0508%" height="15" fill="rgb(245,200,0)"/><text x="19.1694%" y="671.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.05%)</title><rect x="18.9194%" y="645" width="0.0508%" height="15" fill="rgb(245,119,33)"/><text x="19.1694%" y="655.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (3 samples, 0.05%)</title><rect x="18.9194%" y="629" width="0.0508%" height="15" fill="rgb(231,125,12)"/><text x="19.1694%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.03%)</title><rect x="18.9363%" y="613" width="0.0339%" height="15" fill="rgb(216,96,41)"/><text x="19.1863%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (733 samples, 12.42%)</title><rect x="6.5718%" y="773" width="12.4153%" height="15" fill="rgb(248,43,45)"/><text x="6.8218%" y="783.50">&lt;&amp;mut serde_json::d..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (733 samples, 12.42%)</title><rect x="6.5718%" y="757" width="12.4153%" height="15" fill="rgb(217,222,7)"/><text x="6.8218%" y="767.50">&lt;serde_json::value:..</text></g><g><title>serde::de::SeqAccess::next_element (723 samples, 12.25%)</title><rect x="6.7412%" y="741" width="12.2459%" height="15" fill="rgb(233,28,6)"/><text x="6.9912%" y="751.50">serde::de::SeqAcce..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="18.9702%" y="725" width="0.0169%" height="15" fill="rgb(231,218,15)"/><text x="19.2202%" y="735.50"></text></g><g><title>serde::de::MapAccess::next_entry (734 samples, 12.43%)</title><rect x="6.5718%" y="853" width="12.4322%" height="15" fill="rgb(226,171,48)"/><text x="6.8218%" y="863.50">serde::de::MapAcces..</text></g><g><title>serde::de::MapAccess::next_entry_seed (734 samples, 12.43%)</title><rect x="6.5718%" y="837" width="12.4322%" height="15" fill="rgb(235,201,9)"/><text x="6.8218%" y="847.50">serde::de::MapAcces..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (734 samples, 12.43%)</title><rect x="6.5718%" y="821" width="12.4322%" height="15" fill="rgb(217,80,15)"/><text x="6.8218%" y="831.50">&lt;serde_json::de::Ma..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (734 samples, 12.43%)</title><rect x="6.5718%" y="805" width="12.4322%" height="15" fill="rgb(219,152,8)"/><text x="6.8218%" y="815.50">&lt;core::marker::Phan..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (734 samples, 12.43%)</title><rect x="6.5718%" y="789" width="12.4322%" height="15" fill="rgb(243,107,38)"/><text x="6.8218%" y="799.50">serde_json::value::..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="18.9871%" y="773" width="0.0169%" height="15" fill="rgb(231,17,5)"/><text x="19.2371%" y="783.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.02%)</title><rect x="19.0041%" y="853" width="0.0169%" height="15" fill="rgb(209,25,54)"/><text x="19.2541%" y="863.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="19.0041%" y="837" width="0.0169%" height="15" fill="rgb(219,0,2)"/><text x="19.2541%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="19.0041%" y="821" width="0.0169%" height="15" fill="rgb(246,9,5)"/><text x="19.2541%" y="831.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="19.0041%" y="805" width="0.0169%" height="15" fill="rgb(226,159,4)"/><text x="19.2541%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="19.0041%" y="789" width="0.0169%" height="15" fill="rgb(219,175,34)"/><text x="19.2541%" y="799.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (1 samples, 0.02%)</title><rect x="19.0041%" y="773" width="0.0169%" height="15" fill="rgb(236,10,46)"/><text x="19.2541%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.02%)</title><rect x="19.0041%" y="757" width="0.0169%" height="15" fill="rgb(240,211,16)"/><text x="19.2541%" y="767.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (737 samples, 12.48%)</title><rect x="6.5718%" y="885" width="12.4831%" height="15" fill="rgb(205,3,43)"/><text x="6.8218%" y="895.50">&lt;&amp;mut serde_json::d..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (737 samples, 12.48%)</title><rect x="6.5718%" y="869" width="12.4831%" height="15" fill="rgb(245,7,22)"/><text x="6.8218%" y="879.50">&lt;serde_json::value:..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (2 samples, 0.03%)</title><rect x="19.0210%" y="853" width="0.0339%" height="15" fill="rgb(239,132,32)"/><text x="19.2710%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (2 samples, 0.03%)</title><rect x="19.0210%" y="837" width="0.0339%" height="15" fill="rgb(228,202,34)"/><text x="19.2710%" y="847.50"></text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.03%)</title><rect x="19.0210%" y="821" width="0.0339%" height="15" fill="rgb(254,200,22)"/><text x="19.2710%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="19.0210%" y="805" width="0.0339%" height="15" fill="rgb(219,10,39)"/><text x="19.2710%" y="815.50"></text></g><g><title>elasticsearch::http::response::Response::json::{{closure}} (884 samples, 14.97%)</title><rect x="4.0989%" y="981" width="14.9729%" height="15" fill="rgb(226,210,39)"/><text x="4.3489%" y="991.50">elasticsearch::http::re..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (884 samples, 14.97%)</title><rect x="4.0989%" y="965" width="14.9729%" height="15" fill="rgb(208,219,16)"/><text x="4.3489%" y="975.50">&lt;core::future::from_gen..</text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (884 samples, 14.97%)</title><rect x="4.0989%" y="949" width="14.9729%" height="15" fill="rgb(216,158,51)"/><text x="4.3489%" y="959.50">reqwest::async_impl::re..</text></g><g><title>serde_json::de::from_slice (739 samples, 12.52%)</title><rect x="6.5549%" y="933" width="12.5169%" height="15" fill="rgb(233,14,44)"/><text x="6.8049%" y="943.50">serde_json::de::fro..</text></g><g><title>serde_json::de::from_trait (739 samples, 12.52%)</title><rect x="6.5549%" y="917" width="12.5169%" height="15" fill="rgb(237,97,39)"/><text x="6.8049%" y="927.50">serde_json::de::fro..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (739 samples, 12.52%)</title><rect x="6.5549%" y="901" width="12.5169%" height="15" fill="rgb(218,198,43)"/><text x="6.8049%" y="911.50">serde_json::value::..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.02%)</title><rect x="19.0549%" y="885" width="0.0169%" height="15" fill="rgb(231,104,20)"/><text x="19.3049%" y="895.50"></text></g><g><title>cf_log_sender::main::_{{closure}} (1 samples, 0.02%)</title><rect x="19.0718%" y="949" width="0.0169%" height="15" fill="rgb(254,36,13)"/><text x="19.3218%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="19.1904%" y="917" width="0.0169%" height="15" fill="rgb(248,14,50)"/><text x="19.4404%" y="927.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (11 samples, 0.19%)</title><rect x="19.2581%" y="805" width="0.1863%" height="15" fill="rgb(217,107,29)"/><text x="19.5081%" y="815.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (11 samples, 0.19%)</title><rect x="19.2581%" y="789" width="0.1863%" height="15" fill="rgb(251,169,33)"/><text x="19.5081%" y="799.50"></text></g><g><title>&lt;&amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.24%)</title><rect x="19.2412%" y="869" width="0.2371%" height="15" fill="rgb(217,108,32)"/><text x="19.4912%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (14 samples, 0.24%)</title><rect x="19.2412%" y="853" width="0.2371%" height="15" fill="rgb(219,66,42)"/><text x="19.4912%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (14 samples, 0.24%)</title><rect x="19.2412%" y="837" width="0.2371%" height="15" fill="rgb(206,180,7)"/><text x="19.4912%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (14 samples, 0.24%)</title><rect x="19.2412%" y="821" width="0.2371%" height="15" fill="rgb(208,226,31)"/><text x="19.4912%" y="831.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::last_edge (2 samples, 0.03%)</title><rect x="19.4444%" y="805" width="0.0339%" height="15" fill="rgb(218,26,49)"/><text x="19.6944%" y="815.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (2 samples, 0.03%)</title><rect x="19.4444%" y="789" width="0.0339%" height="15" fill="rgb(233,197,48)"/><text x="19.6944%" y="799.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="19.5291%" y="821" width="0.0169%" height="15" fill="rgb(252,181,51)"/><text x="19.7791%" y="831.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="19.5291%" y="805" width="0.0169%" height="15" fill="rgb(253,90,19)"/><text x="19.7791%" y="815.50"></text></g><g><title>&lt;elasticsearch::http::request::NdBody&lt;T&gt; as elasticsearch::http::request::Body&gt;::write (5 samples, 0.08%)</title><rect x="19.4783%" y="869" width="0.0847%" height="15" fill="rgb(215,171,30)"/><text x="19.7283%" y="879.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.07%)</title><rect x="19.4953%" y="853" width="0.0678%" height="15" fill="rgb(214,222,9)"/><text x="19.7453%" y="863.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (2 samples, 0.03%)</title><rect x="19.5291%" y="837" width="0.0339%" height="15" fill="rgb(223,3,22)"/><text x="19.7791%" y="847.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (1 samples, 0.02%)</title><rect x="19.5461%" y="821" width="0.0169%" height="15" fill="rgb(225,196,46)"/><text x="19.7961%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="19.5461%" y="805" width="0.0169%" height="15" fill="rgb(209,110,37)"/><text x="19.7961%" y="815.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="19.5461%" y="789" width="0.0169%" height="15" fill="rgb(249,89,12)"/><text x="19.7961%" y="799.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (13 samples, 0.22%)</title><rect x="19.5969%" y="757" width="0.2202%" height="15" fill="rgb(226,27,33)"/><text x="19.8469%" y="767.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (17 samples, 0.29%)</title><rect x="19.5969%" y="773" width="0.2879%" height="15" fill="rgb(213,82,22)"/><text x="19.8469%" y="783.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (4 samples, 0.07%)</title><rect x="19.8171%" y="757" width="0.0678%" height="15" fill="rgb(248,140,0)"/><text x="20.0671%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.07%)</title><rect x="19.8171%" y="741" width="0.0678%" height="15" fill="rgb(228,106,3)"/><text x="20.0671%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (20 samples, 0.34%)</title><rect x="19.5969%" y="789" width="0.3388%" height="15" fill="rgb(209,23,37)"/><text x="19.8469%" y="799.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (3 samples, 0.05%)</title><rect x="19.8848%" y="773" width="0.0508%" height="15" fill="rgb(241,93,50)"/><text x="20.1348%" y="783.50"></text></g><g><title>core::ptr::read (11 samples, 0.19%)</title><rect x="19.9356%" y="789" width="0.1863%" height="15" fill="rgb(253,46,43)"/><text x="20.1856%" y="799.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.58%)</title><rect x="19.5630%" y="869" width="0.5759%" height="15" fill="rgb(226,206,43)"/><text x="19.8130%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.58%)</title><rect x="19.5630%" y="853" width="0.5759%" height="15" fill="rgb(217,54,7)"/><text x="19.8130%" y="863.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (32 samples, 0.54%)</title><rect x="19.5969%" y="837" width="0.5420%" height="15" fill="rgb(223,5,52)"/><text x="19.8469%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (32 samples, 0.54%)</title><rect x="19.5969%" y="821" width="0.5420%" height="15" fill="rgb(206,52,46)"/><text x="19.8469%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::replace (32 samples, 0.54%)</title><rect x="19.5969%" y="805" width="0.5420%" height="15" fill="rgb(253,136,11)"/><text x="19.8469%" y="815.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="20.1220%" y="789" width="0.0169%" height="15" fill="rgb(208,106,33)"/><text x="20.3720%" y="799.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (2 samples, 0.03%)</title><rect x="20.1389%" y="869" width="0.0339%" height="15" fill="rgb(206,54,4)"/><text x="20.3889%" y="879.50"></text></g><g><title>serde_json::ser::Formatter::end_object (2 samples, 0.03%)</title><rect x="20.1389%" y="853" width="0.0339%" height="15" fill="rgb(213,3,15)"/><text x="20.3889%" y="863.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="20.1389%" y="837" width="0.0339%" height="15" fill="rgb(252,211,39)"/><text x="20.3889%" y="847.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="20.1558%" y="821" width="0.0169%" height="15" fill="rgb(223,6,36)"/><text x="20.4058%" y="831.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="20.1558%" y="805" width="0.0169%" height="15" fill="rgb(252,169,45)"/><text x="20.4058%" y="815.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="20.1558%" y="789" width="0.0169%" height="15" fill="rgb(212,48,26)"/><text x="20.4058%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.10%)</title><rect x="20.2575%" y="837" width="0.1016%" height="15" fill="rgb(251,102,48)"/><text x="20.5075%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6 samples, 0.10%)</title><rect x="20.3591%" y="821" width="0.1016%" height="15" fill="rgb(243,208,16)"/><text x="20.6091%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.10%)</title><rect x="20.3591%" y="805" width="0.1016%" height="15" fill="rgb(219,96,24)"/><text x="20.6091%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="20.4438%" y="789" width="0.0169%" height="15" fill="rgb(219,33,29)"/><text x="20.6938%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="20.4438%" y="773" width="0.0169%" height="15" fill="rgb(223,176,5)"/><text x="20.6938%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="20.5115%" y="789" width="0.0169%" height="15" fill="rgb(228,140,14)"/><text x="20.7615%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.8333%" y="773" width="0.0169%" height="15" fill="rgb(217,179,31)"/><text x="21.0833%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.8333%" y="757" width="0.0169%" height="15" fill="rgb(230,9,30)"/><text x="21.0833%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="20.8333%" y="741" width="0.0169%" height="15" fill="rgb(230,136,20)"/><text x="21.0833%" y="751.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (3 samples, 0.05%)</title><rect x="21.2568%" y="725" width="0.0508%" height="15" fill="rgb(215,210,22)"/><text x="21.5068%" y="735.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (3 samples, 0.05%)</title><rect x="21.2568%" y="709" width="0.0508%" height="15" fill="rgb(218,43,5)"/><text x="21.5068%" y="719.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="21.3584%" y="709" width="0.0169%" height="15" fill="rgb(216,11,5)"/><text x="21.6084%" y="719.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="21.3584%" y="693" width="0.0169%" height="15" fill="rgb(209,82,29)"/><text x="21.6084%" y="703.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (3 samples, 0.05%)</title><rect x="21.3753%" y="709" width="0.0508%" height="15" fill="rgb(244,115,12)"/><text x="21.6253%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned (3 samples, 0.05%)</title><rect x="21.4262%" y="693" width="0.0508%" height="15" fill="rgb(222,82,18)"/><text x="21.6762%" y="703.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (44 samples, 0.75%)</title><rect x="20.8503%" y="773" width="0.7453%" height="15" fill="rgb(249,227,8)"/><text x="21.1003%" y="783.50"></text></g><g><title>std::io::Write::write_all (39 samples, 0.66%)</title><rect x="20.9350%" y="757" width="0.6606%" height="15" fill="rgb(253,141,45)"/><text x="21.1850%" y="767.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (21 samples, 0.36%)</title><rect x="21.2398%" y="741" width="0.3557%" height="15" fill="rgb(234,184,4)"/><text x="21.4898%" y="751.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (17 samples, 0.29%)</title><rect x="21.3076%" y="725" width="0.2879%" height="15" fill="rgb(218,194,23)"/><text x="21.5576%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.17%)</title><rect x="21.4262%" y="709" width="0.1694%" height="15" fill="rgb(235,66,41)"/><text x="21.6762%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.12%)</title><rect x="21.4770%" y="693" width="0.1186%" height="15" fill="rgb(245,217,1)"/><text x="21.7270%" y="703.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (4 samples, 0.07%)</title><rect x="21.9682%" y="725" width="0.0678%" height="15" fill="rgb(229,91,1)"/><text x="22.2182%" y="735.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (4 samples, 0.07%)</title><rect x="21.9682%" y="709" width="0.0678%" height="15" fill="rgb(207,101,30)"/><text x="22.2182%" y="719.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="22.2730%" y="709" width="0.0169%" height="15" fill="rgb(223,82,49)"/><text x="22.5230%" y="719.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="22.2730%" y="693" width="0.0169%" height="15" fill="rgb(218,167,17)"/><text x="22.5230%" y="703.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (3 samples, 0.05%)</title><rect x="22.2900%" y="709" width="0.0508%" height="15" fill="rgb(208,103,14)"/><text x="22.5400%" y="719.50"></text></g><g><title>core::cmp::min (5 samples, 0.08%)</title><rect x="22.3408%" y="709" width="0.0847%" height="15" fill="rgb(238,20,8)"/><text x="22.5908%" y="719.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.08%)</title><rect x="22.3408%" y="693" width="0.0847%" height="15" fill="rgb(218,80,54)"/><text x="22.5908%" y="703.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.08%)</title><rect x="22.3408%" y="677" width="0.0847%" height="15" fill="rgb(240,144,17)"/><text x="22.5908%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned (6 samples, 0.10%)</title><rect x="22.4932%" y="693" width="0.1016%" height="15" fill="rgb(245,27,50)"/><text x="22.7432%" y="703.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (39 samples, 0.66%)</title><rect x="22.0359%" y="725" width="0.6606%" height="15" fill="rgb(251,51,7)"/><text x="22.2859%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.27%)</title><rect x="22.4255%" y="709" width="0.2710%" height="15" fill="rgb(245,217,29)"/><text x="22.6755%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.10%)</title><rect x="22.5949%" y="693" width="0.1016%" height="15" fill="rgb(221,176,29)"/><text x="22.8449%" y="703.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (45 samples, 0.76%)</title><rect x="21.9512%" y="741" width="0.7622%" height="15" fill="rgb(212,180,24)"/><text x="22.2012%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="22.6965%" y="725" width="0.0169%" height="15" fill="rgb(254,24,2)"/><text x="22.9465%" y="735.50"></text></g><g><title>serde_json::ser::Formatter::end_string (67 samples, 1.13%)</title><rect x="21.5955%" y="773" width="1.1348%" height="15" fill="rgb(230,100,2)"/><text x="21.8455%" y="783.50"></text></g><g><title>std::io::Write::write_all (65 samples, 1.10%)</title><rect x="21.6294%" y="757" width="1.1009%" height="15" fill="rgb(219,142,25)"/><text x="21.8794%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="22.7134%" y="741" width="0.0169%" height="15" fill="rgb(240,73,43)"/><text x="22.9634%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.02%)</title><rect x="22.7304%" y="773" width="0.0169%" height="15" fill="rgb(214,114,15)"/><text x="22.9804%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="23.8144%" y="757" width="0.0678%" height="15" fill="rgb(207,130,4)"/><text x="24.0644%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="23.8144%" y="741" width="0.0678%" height="15" fill="rgb(221,25,40)"/><text x="24.0644%" y="751.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (4 samples, 0.07%)</title><rect x="23.8821%" y="757" width="0.0678%" height="15" fill="rgb(241,184,7)"/><text x="24.1321%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (4 samples, 0.07%)</title><rect x="23.8821%" y="741" width="0.0678%" height="15" fill="rgb(235,159,4)"/><text x="24.1321%" y="751.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (4 samples, 0.07%)</title><rect x="23.8821%" y="725" width="0.0678%" height="15" fill="rgb(214,87,48)"/><text x="24.1321%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (4 samples, 0.07%)</title><rect x="23.8821%" y="709" width="0.0678%" height="15" fill="rgb(246,198,24)"/><text x="24.1321%" y="719.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="24.5088%" y="709" width="0.0169%" height="15" fill="rgb(209,66,40)"/><text x="24.7588%" y="719.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="24.5088%" y="693" width="0.0169%" height="15" fill="rgb(233,147,39)"/><text x="24.7588%" y="703.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (3 samples, 0.05%)</title><rect x="24.6274%" y="693" width="0.0508%" height="15" fill="rgb(231,145,52)"/><text x="24.8774%" y="703.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (3 samples, 0.05%)</title><rect x="24.6274%" y="677" width="0.0508%" height="15" fill="rgb(206,20,26)"/><text x="24.8774%" y="687.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (2 samples, 0.03%)</title><rect x="24.6782%" y="693" width="0.0339%" height="15" fill="rgb(238,220,4)"/><text x="24.9282%" y="703.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (2 samples, 0.03%)</title><rect x="24.6782%" y="677" width="0.0339%" height="15" fill="rgb(252,195,42)"/><text x="24.9282%" y="687.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.03%)</title><rect x="24.6782%" y="661" width="0.0339%" height="15" fill="rgb(209,10,6)"/><text x="24.9282%" y="671.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.03%)</title><rect x="24.6782%" y="645" width="0.0339%" height="15" fill="rgb(229,3,52)"/><text x="24.9282%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.03%)</title><rect x="24.6782%" y="629" width="0.0339%" height="15" fill="rgb(253,49,37)"/><text x="24.9282%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="24.6782%" y="613" width="0.0339%" height="15" fill="rgb(240,103,49)"/><text x="24.9282%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.03%)</title><rect x="24.6782%" y="597" width="0.0339%" height="15" fill="rgb(250,182,30)"/><text x="24.9282%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="24.6782%" y="581" width="0.0339%" height="15" fill="rgb(248,8,30)"/><text x="24.9282%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="24.6782%" y="565" width="0.0339%" height="15" fill="rgb(237,120,30)"/><text x="24.9282%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.03%)</title><rect x="24.6782%" y="549" width="0.0339%" height="15" fill="rgb(221,146,34)"/><text x="24.9282%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.03%)</title><rect x="24.6782%" y="533" width="0.0339%" height="15" fill="rgb(242,55,13)"/><text x="24.9282%" y="543.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.03%)</title><rect x="24.6782%" y="517" width="0.0339%" height="15" fill="rgb(242,112,31)"/><text x="24.9282%" y="527.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.03%)</title><rect x="24.6782%" y="501" width="0.0339%" height="15" fill="rgb(249,192,27)"/><text x="24.9282%" y="511.50"></text></g><g><title>_int_realloc (2 samples, 0.03%)</title><rect x="24.6782%" y="485" width="0.0339%" height="15" fill="rgb(208,204,44)"/><text x="24.9282%" y="495.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="24.6782%" y="469" width="0.0339%" height="15" fill="rgb(208,93,54)"/><text x="24.9282%" y="479.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (1 samples, 0.02%)</title><rect x="24.7121%" y="693" width="0.0169%" height="15" fill="rgb(242,1,31)"/><text x="24.9621%" y="703.50"></text></g><g><title>core::cmp::min (2 samples, 0.03%)</title><rect x="24.7290%" y="693" width="0.0339%" height="15" fill="rgb(241,83,25)"/><text x="24.9790%" y="703.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.03%)</title><rect x="24.7290%" y="677" width="0.0339%" height="15" fill="rgb(205,169,50)"/><text x="24.9790%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="24.7290%" y="661" width="0.0339%" height="15" fill="rgb(239,186,37)"/><text x="24.9790%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned (6 samples, 0.10%)</title><rect x="24.7967%" y="677" width="0.1016%" height="15" fill="rgb(205,221,10)"/><text x="25.0467%" y="687.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (32 samples, 0.54%)</title><rect x="24.5257%" y="709" width="0.5420%" height="15" fill="rgb(218,196,15)"/><text x="24.7757%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.30%)</title><rect x="24.7629%" y="693" width="0.3049%" height="15" fill="rgb(218,196,35)"/><text x="25.0129%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.17%)</title><rect x="24.8984%" y="677" width="0.1694%" height="15" fill="rgb(233,63,24)"/><text x="25.1484%" y="687.50"></text></g><g><title>core::cmp::min (2 samples, 0.03%)</title><rect x="25.0678%" y="709" width="0.0339%" height="15" fill="rgb(225,8,4)"/><text x="25.3178%" y="719.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.03%)</title><rect x="25.0678%" y="693" width="0.0339%" height="15" fill="rgb(234,105,35)"/><text x="25.3178%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="25.0678%" y="677" width="0.0339%" height="15" fill="rgb(236,21,32)"/><text x="25.3178%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (281 samples, 4.76%)</title><rect x="20.3591%" y="837" width="4.7595%" height="15" fill="rgb(228,109,6)"/><text x="20.6091%" y="847.50">serde:..</text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (275 samples, 4.66%)</title><rect x="20.4607%" y="821" width="4.6579%" height="15" fill="rgb(229,215,31)"/><text x="20.7107%" y="831.50">&lt;serd..</text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (275 samples, 4.66%)</title><rect x="20.4607%" y="805" width="4.6579%" height="15" fill="rgb(221,52,54)"/><text x="20.7107%" y="815.50">&lt;&amp;mut..</text></g><g><title>serde_json::ser::format_escaped_str (271 samples, 4.59%)</title><rect x="20.5285%" y="789" width="4.5901%" height="15" fill="rgb(252,129,43)"/><text x="20.7785%" y="799.50">serde..</text></g><g><title>serde_json::ser::format_escaped_str_contents (140 samples, 2.37%)</title><rect x="22.7473%" y="773" width="2.3713%" height="15" fill="rgb(248,183,27)"/><text x="22.9973%" y="783.50">se..</text></g><g><title>serde_json::ser::Formatter::write_string_fragment (69 samples, 1.17%)</title><rect x="23.9499%" y="757" width="1.1687%" height="15" fill="rgb(250,0,22)"/><text x="24.1999%" y="767.50"></text></g><g><title>std::io::Write::write_all (68 samples, 1.15%)</title><rect x="23.9668%" y="741" width="1.1518%" height="15" fill="rgb(213,166,10)"/><text x="24.2168%" y="751.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (39 samples, 0.66%)</title><rect x="24.4580%" y="725" width="0.6606%" height="15" fill="rgb(207,163,36)"/><text x="24.7080%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="25.1016%" y="709" width="0.0169%" height="15" fill="rgb(208,122,22)"/><text x="25.3516%" y="719.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (2 samples, 0.03%)</title><rect x="25.3388%" y="789" width="0.0339%" height="15" fill="rgb(207,104,49)"/><text x="25.5888%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (2 samples, 0.03%)</title><rect x="25.3388%" y="773" width="0.0339%" height="15" fill="rgb(248,211,50)"/><text x="25.5888%" y="783.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (5 samples, 0.08%)</title><rect x="25.4234%" y="773" width="0.0847%" height="15" fill="rgb(217,13,45)"/><text x="25.6734%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (5 samples, 0.08%)</title><rect x="25.4234%" y="757" width="0.0847%" height="15" fill="rgb(211,216,49)"/><text x="25.6734%" y="767.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (3 samples, 0.05%)</title><rect x="25.5081%" y="773" width="0.0508%" height="15" fill="rgb(221,58,53)"/><text x="25.7581%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (3 samples, 0.05%)</title><rect x="25.5081%" y="757" width="0.0508%" height="15" fill="rgb(220,112,41)"/><text x="25.7581%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.02%)</title><rect x="25.5420%" y="741" width="0.0169%" height="15" fill="rgb(236,38,28)"/><text x="25.7920%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.02%)</title><rect x="25.5420%" y="725" width="0.0169%" height="15" fill="rgb(227,195,22)"/><text x="25.7920%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="25.5420%" y="709" width="0.0169%" height="15" fill="rgb(214,55,33)"/><text x="25.7920%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="25.5420%" y="693" width="0.0169%" height="15" fill="rgb(248,80,13)"/><text x="25.7920%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="25.5420%" y="677" width="0.0169%" height="15" fill="rgb(238,52,6)"/><text x="25.7920%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="25.5420%" y="661" width="0.0169%" height="15" fill="rgb(224,198,47)"/><text x="25.7920%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="25.5420%" y="645" width="0.0169%" height="15" fill="rgb(233,171,20)"/><text x="25.7920%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.02%)</title><rect x="25.5420%" y="629" width="0.0169%" height="15" fill="rgb(241,30,25)"/><text x="25.7920%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="25.5420%" y="613" width="0.0169%" height="15" fill="rgb(207,171,38)"/><text x="25.7920%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="25.5420%" y="597" width="0.0169%" height="15" fill="rgb(234,70,1)"/><text x="25.7920%" y="607.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="25.5420%" y="581" width="0.0169%" height="15" fill="rgb(232,178,18)"/><text x="25.7920%" y="591.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="25.5420%" y="565" width="0.0169%" height="15" fill="rgb(241,78,40)"/><text x="25.7920%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="25.5420%" y="549" width="0.0169%" height="15" fill="rgb(222,35,25)"/><text x="25.7920%" y="559.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="25.5589%" y="773" width="0.0169%" height="15" fill="rgb(207,92,16)"/><text x="25.8089%" y="783.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="25.5589%" y="757" width="0.0169%" height="15" fill="rgb(216,59,51)"/><text x="25.8089%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="25.5589%" y="741" width="0.0169%" height="15" fill="rgb(213,80,28)"/><text x="25.8089%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.07%)</title><rect x="25.6436%" y="757" width="0.0678%" height="15" fill="rgb(220,93,7)"/><text x="25.8936%" y="767.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (21 samples, 0.36%)</title><rect x="25.3726%" y="789" width="0.3557%" height="15" fill="rgb(225,24,44)"/><text x="25.6226%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.15%)</title><rect x="25.5759%" y="773" width="0.1524%" height="15" fill="rgb(243,74,40)"/><text x="25.8259%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="25.7114%" y="757" width="0.0169%" height="15" fill="rgb(228,39,7)"/><text x="25.9614%" y="767.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (24 samples, 0.41%)</title><rect x="25.3388%" y="805" width="0.4065%" height="15" fill="rgb(227,79,8)"/><text x="25.5888%" y="815.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="25.7283%" y="789" width="0.0169%" height="15" fill="rgb(236,58,11)"/><text x="25.9783%" y="799.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (326 samples, 5.52%)</title><rect x="20.2405%" y="853" width="5.5217%" height="15" fill="rgb(249,63,35)"/><text x="20.4905%" y="863.50">&lt;serde_..</text></g><g><title>serde_json::ser::Formatter::begin_object_key (38 samples, 0.64%)</title><rect x="25.1186%" y="837" width="0.6436%" height="15" fill="rgb(252,114,16)"/><text x="25.3686%" y="847.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.64%)</title><rect x="25.1186%" y="821" width="0.6436%" height="15" fill="rgb(254,151,24)"/><text x="25.3686%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="25.7453%" y="805" width="0.0169%" height="15" fill="rgb(253,54,39)"/><text x="25.9953%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="25.8977%" y="837" width="0.0169%" height="15" fill="rgb(243,25,45)"/><text x="26.1477%" y="847.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (4 samples, 0.07%)</title><rect x="26.4058%" y="789" width="0.0678%" height="15" fill="rgb(234,134,9)"/><text x="26.6558%" y="799.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (4 samples, 0.07%)</title><rect x="26.4058%" y="773" width="0.0678%" height="15" fill="rgb(227,166,31)"/><text x="26.6558%" y="783.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="26.5075%" y="773" width="0.0169%" height="15" fill="rgb(245,143,41)"/><text x="26.7575%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="26.5075%" y="757" width="0.0169%" height="15" fill="rgb(238,181,32)"/><text x="26.7575%" y="767.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (3 samples, 0.05%)</title><rect x="26.5244%" y="773" width="0.0508%" height="15" fill="rgb(224,113,18)"/><text x="26.7744%" y="783.50"></text></g><g><title>core::cmp::min (3 samples, 0.05%)</title><rect x="26.5752%" y="773" width="0.0508%" height="15" fill="rgb(240,229,28)"/><text x="26.8252%" y="783.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.05%)</title><rect x="26.5752%" y="757" width="0.0508%" height="15" fill="rgb(250,185,3)"/><text x="26.8252%" y="767.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.05%)</title><rect x="26.5752%" y="741" width="0.0508%" height="15" fill="rgb(212,59,25)"/><text x="26.8252%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.07%)</title><rect x="26.6430%" y="757" width="0.0678%" height="15" fill="rgb(221,87,20)"/><text x="26.8930%" y="767.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (389 samples, 6.59%)</title><rect x="20.1728%" y="869" width="6.5888%" height="15" fill="rgb(213,74,28)"/><text x="20.4228%" y="879.50">serde::se..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (59 samples, 1.00%)</title><rect x="25.7622%" y="853" width="0.9993%" height="15" fill="rgb(224,132,34)"/><text x="26.0122%" y="863.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (50 samples, 0.85%)</title><rect x="25.9146%" y="837" width="0.8469%" height="15" fill="rgb(222,101,24)"/><text x="26.1646%" y="847.50"></text></g><g><title>std::io::Write::write_all (49 samples, 0.83%)</title><rect x="25.9316%" y="821" width="0.8299%" height="15" fill="rgb(254,142,4)"/><text x="26.1816%" y="831.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (24 samples, 0.41%)</title><rect x="26.3550%" y="805" width="0.4065%" height="15" fill="rgb(230,229,49)"/><text x="26.6050%" y="815.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (17 samples, 0.29%)</title><rect x="26.4736%" y="789" width="0.2879%" height="15" fill="rgb(238,70,47)"/><text x="26.7236%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.14%)</title><rect x="26.6260%" y="773" width="0.1355%" height="15" fill="rgb(231,160,17)"/><text x="26.8760%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="26.7107%" y="757" width="0.0508%" height="15" fill="rgb(218,68,53)"/><text x="26.9607%" y="767.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="27.2188%" y="837" width="0.0169%" height="15" fill="rgb(236,111,10)"/><text x="27.4688%" y="847.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="27.9302%" y="773" width="0.0169%" height="15" fill="rgb(224,34,41)"/><text x="28.1802%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="27.9302%" y="757" width="0.0169%" height="15" fill="rgb(241,118,19)"/><text x="28.1802%" y="767.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="28.0488%" y="757" width="0.0169%" height="15" fill="rgb(238,129,25)"/><text x="28.2988%" y="767.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="28.0488%" y="741" width="0.0169%" height="15" fill="rgb(238,22,31)"/><text x="28.2988%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="28.0488%" y="725" width="0.0169%" height="15" fill="rgb(222,174,48)"/><text x="28.2988%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned (5 samples, 0.08%)</title><rect x="28.0996%" y="741" width="0.0847%" height="15" fill="rgb(206,152,40)"/><text x="28.3496%" y="751.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (49 samples, 0.83%)</title><rect x="27.4560%" y="821" width="0.8299%" height="15" fill="rgb(218,99,54)"/><text x="27.7060%" y="831.50"></text></g><g><title>std::io::Write::write_all (48 samples, 0.81%)</title><rect x="27.4729%" y="805" width="0.8130%" height="15" fill="rgb(220,174,26)"/><text x="27.7229%" y="815.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (21 samples, 0.36%)</title><rect x="27.9302%" y="789" width="0.3557%" height="15" fill="rgb(245,116,9)"/><text x="28.1802%" y="799.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (20 samples, 0.34%)</title><rect x="27.9472%" y="773" width="0.3388%" height="15" fill="rgb(209,72,35)"/><text x="28.1972%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.22%)</title><rect x="28.0657%" y="757" width="0.2202%" height="15" fill="rgb(226,126,21)"/><text x="28.3157%" y="767.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.10%)</title><rect x="28.1843%" y="741" width="0.1016%" height="15" fill="rgb(227,192,1)"/><text x="28.4343%" y="751.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (11 samples, 0.19%)</title><rect x="28.7940%" y="773" width="0.1863%" height="15" fill="rgb(237,180,29)"/><text x="29.0440%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (11 samples, 0.19%)</title><rect x="28.7940%" y="757" width="0.1863%" height="15" fill="rgb(230,197,35)"/><text x="29.0440%" y="767.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="29.0650%" y="757" width="0.0169%" height="15" fill="rgb(246,193,31)"/><text x="29.3150%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="29.0650%" y="741" width="0.0169%" height="15" fill="rgb(241,36,4)"/><text x="29.3150%" y="751.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (1 samples, 0.02%)</title><rect x="29.0820%" y="757" width="0.0169%" height="15" fill="rgb(241,130,17)"/><text x="29.3320%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (1 samples, 0.02%)</title><rect x="29.0820%" y="741" width="0.0169%" height="15" fill="rgb(206,137,32)"/><text x="29.3320%" y="751.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (1 samples, 0.02%)</title><rect x="29.0989%" y="757" width="0.0169%" height="15" fill="rgb(237,228,51)"/><text x="29.3489%" y="767.50"></text></g><g><title>core::cmp::min (3 samples, 0.05%)</title><rect x="29.1159%" y="757" width="0.0508%" height="15" fill="rgb(243,6,42)"/><text x="29.3659%" y="767.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.05%)</title><rect x="29.1159%" y="741" width="0.0508%" height="15" fill="rgb(251,74,28)"/><text x="29.3659%" y="751.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.05%)</title><rect x="29.1159%" y="725" width="0.0508%" height="15" fill="rgb(218,20,49)"/><text x="29.3659%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.07%)</title><rect x="29.2005%" y="741" width="0.0678%" height="15" fill="rgb(238,28,14)"/><text x="29.4505%" y="751.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (20 samples, 0.34%)</title><rect x="28.9804%" y="773" width="0.3388%" height="15" fill="rgb(229,40,46)"/><text x="29.2304%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.15%)</title><rect x="29.1667%" y="757" width="0.1524%" height="15" fill="rgb(244,195,20)"/><text x="29.4167%" y="767.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="29.2683%" y="741" width="0.0508%" height="15" fill="rgb(253,56,35)"/><text x="29.5183%" y="751.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (36 samples, 0.61%)</title><rect x="28.7432%" y="789" width="0.6098%" height="15" fill="rgb(210,149,44)"/><text x="28.9932%" y="799.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="29.3191%" y="773" width="0.0339%" height="15" fill="rgb(240,135,12)"/><text x="29.5691%" y="783.50"></text></g><g><title>serde_json::ser::Formatter::end_string (64 samples, 1.08%)</title><rect x="28.2859%" y="821" width="1.0840%" height="15" fill="rgb(251,24,50)"/><text x="28.5359%" y="831.50"></text></g><g><title>std::io::Write::write_all (64 samples, 1.08%)</title><rect x="28.2859%" y="805" width="1.0840%" height="15" fill="rgb(243,200,47)"/><text x="28.5359%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="29.3530%" y="789" width="0.0169%" height="15" fill="rgb(224,166,26)"/><text x="29.6030%" y="799.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.03%)</title><rect x="29.3699%" y="821" width="0.0339%" height="15" fill="rgb(233,0,47)"/><text x="29.6199%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.14%)</title><rect x="31.0806%" y="805" width="0.1355%" height="15" fill="rgb(253,80,5)"/><text x="31.3306%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.14%)</title><rect x="31.0806%" y="789" width="0.1355%" height="15" fill="rgb(214,133,25)"/><text x="31.3306%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 0.03%)</title><rect x="31.2161%" y="805" width="0.0339%" height="15" fill="rgb(209,27,14)"/><text x="31.4661%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 0.03%)</title><rect x="31.2161%" y="789" width="0.0339%" height="15" fill="rgb(219,102,51)"/><text x="31.4661%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 0.03%)</title><rect x="31.2161%" y="773" width="0.0339%" height="15" fill="rgb(237,18,16)"/><text x="31.4661%" y="783.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2 samples, 0.03%)</title><rect x="31.2161%" y="757" width="0.0339%" height="15" fill="rgb(241,85,17)"/><text x="31.4661%" y="767.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (7 samples, 0.12%)</title><rect x="31.9106%" y="757" width="0.1186%" height="15" fill="rgb(236,90,42)"/><text x="32.1606%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (7 samples, 0.12%)</title><rect x="31.9106%" y="741" width="0.1186%" height="15" fill="rgb(249,57,21)"/><text x="32.1606%" y="751.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.03%)</title><rect x="32.0461%" y="741" width="0.0339%" height="15" fill="rgb(243,12,36)"/><text x="32.2961%" y="751.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.03%)</title><rect x="32.0461%" y="725" width="0.0339%" height="15" fill="rgb(253,128,47)"/><text x="32.2961%" y="735.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (2 samples, 0.03%)</title><rect x="32.0799%" y="741" width="0.0339%" height="15" fill="rgb(207,33,20)"/><text x="32.3299%" y="751.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (2 samples, 0.03%)</title><rect x="32.0799%" y="725" width="0.0339%" height="15" fill="rgb(233,215,35)"/><text x="32.3299%" y="735.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.03%)</title><rect x="32.0799%" y="709" width="0.0339%" height="15" fill="rgb(249,188,52)"/><text x="32.3299%" y="719.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.03%)</title><rect x="32.0799%" y="693" width="0.0339%" height="15" fill="rgb(225,12,32)"/><text x="32.3299%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.03%)</title><rect x="32.0799%" y="677" width="0.0339%" height="15" fill="rgb(247,98,14)"/><text x="32.3299%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="32.0799%" y="661" width="0.0339%" height="15" fill="rgb(247,219,48)"/><text x="32.3299%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.03%)</title><rect x="32.0799%" y="645" width="0.0339%" height="15" fill="rgb(253,60,48)"/><text x="32.3299%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="32.0799%" y="629" width="0.0339%" height="15" fill="rgb(245,15,52)"/><text x="32.3299%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="32.0799%" y="613" width="0.0339%" height="15" fill="rgb(220,133,28)"/><text x="32.3299%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.03%)</title><rect x="32.0799%" y="597" width="0.0339%" height="15" fill="rgb(217,180,4)"/><text x="32.3299%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.03%)</title><rect x="32.0799%" y="581" width="0.0339%" height="15" fill="rgb(251,24,1)"/><text x="32.3299%" y="591.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.03%)</title><rect x="32.0799%" y="565" width="0.0339%" height="15" fill="rgb(212,185,49)"/><text x="32.3299%" y="575.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.03%)</title><rect x="32.0799%" y="549" width="0.0339%" height="15" fill="rgb(215,175,22)"/><text x="32.3299%" y="559.50"></text></g><g><title>_int_realloc (2 samples, 0.03%)</title><rect x="32.0799%" y="533" width="0.0339%" height="15" fill="rgb(250,205,14)"/><text x="32.3299%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="32.0799%" y="517" width="0.0339%" height="15" fill="rgb(225,211,22)"/><text x="32.3299%" y="527.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (1 samples, 0.02%)</title><rect x="32.1138%" y="741" width="0.0169%" height="15" fill="rgb(251,179,42)"/><text x="32.3638%" y="751.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="32.1308%" y="741" width="0.0169%" height="15" fill="rgb(208,216,51)"/><text x="32.3808%" y="751.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="32.1308%" y="725" width="0.0169%" height="15" fill="rgb(235,36,11)"/><text x="32.3808%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="32.1308%" y="709" width="0.0169%" height="15" fill="rgb(213,189,28)"/><text x="32.3808%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned (8 samples, 0.14%)</title><rect x="32.1985%" y="725" width="0.1355%" height="15" fill="rgb(227,203,42)"/><text x="32.4485%" y="735.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (32 samples, 0.54%)</title><rect x="32.0291%" y="757" width="0.5420%" height="15" fill="rgb(244,72,36)"/><text x="32.2791%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.42%)</title><rect x="32.1477%" y="741" width="0.4234%" height="15" fill="rgb(213,53,17)"/><text x="32.3977%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.24%)</title><rect x="32.3340%" y="725" width="0.2371%" height="15" fill="rgb(207,167,3)"/><text x="32.5840%" y="735.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (42 samples, 0.71%)</title><rect x="31.8936%" y="773" width="0.7114%" height="15" fill="rgb(216,98,30)"/><text x="32.1436%" y="783.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="32.5711%" y="757" width="0.0339%" height="15" fill="rgb(236,123,15)"/><text x="32.8211%" y="767.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (319 samples, 5.40%)</title><rect x="27.2188%" y="853" width="5.4031%" height="15" fill="rgb(248,81,50)"/><text x="27.4688%" y="863.50">&lt;&amp;mut s..</text></g><g><title>serde_json::ser::format_escaped_str (318 samples, 5.39%)</title><rect x="27.2358%" y="837" width="5.3862%" height="15" fill="rgb(214,120,4)"/><text x="27.4858%" y="847.50">serde_j..</text></g><g><title>serde_json::ser::format_escaped_str_contents (190 samples, 3.22%)</title><rect x="29.4038%" y="821" width="3.2182%" height="15" fill="rgb(208,179,34)"/><text x="29.6538%" y="831.50">ser..</text></g><g><title>serde_json::ser::Formatter::write_string_fragment (81 samples, 1.37%)</title><rect x="31.2500%" y="805" width="1.3720%" height="15" fill="rgb(227,140,7)"/><text x="31.5000%" y="815.50"></text></g><g><title>std::io::Write::write_all (80 samples, 1.36%)</title><rect x="31.2669%" y="789" width="1.3550%" height="15" fill="rgb(214,22,6)"/><text x="31.5169%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="32.6050%" y="773" width="0.0169%" height="15" fill="rgb(207,137,27)"/><text x="32.8550%" y="783.50"></text></g><g><title>&lt;&amp;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.07%)</title><rect x="32.6220%" y="853" width="0.0678%" height="15" fill="rgb(210,8,46)"/><text x="32.8720%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (4 samples, 0.07%)</title><rect x="32.6220%" y="837" width="0.0678%" height="15" fill="rgb(240,16,54)"/><text x="32.8720%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (3 samples, 0.05%)</title><rect x="32.6389%" y="821" width="0.0508%" height="15" fill="rgb(211,209,29)"/><text x="32.8889%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (3 samples, 0.05%)</title><rect x="32.6389%" y="805" width="0.0508%" height="15" fill="rgb(226,228,24)"/><text x="32.8889%" y="815.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (2 samples, 0.03%)</title><rect x="32.6558%" y="789" width="0.0339%" height="15" fill="rgb(222,84,9)"/><text x="32.9058%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.03%)</title><rect x="32.6558%" y="773" width="0.0339%" height="15" fill="rgb(234,203,30)"/><text x="32.9058%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="32.6897%" y="853" width="0.0339%" height="15" fill="rgb(238,109,14)"/><text x="32.9397%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="32.6897%" y="837" width="0.0339%" height="15" fill="rgb(233,206,34)"/><text x="32.9397%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.03%)</title><rect x="32.6897%" y="821" width="0.0339%" height="15" fill="rgb(220,167,47)"/><text x="32.9397%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.03%)</title><rect x="32.6897%" y="805" width="0.0339%" height="15" fill="rgb(238,105,10)"/><text x="32.9397%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1 samples, 0.02%)</title><rect x="32.7236%" y="757" width="0.0169%" height="15" fill="rgb(213,227,17)"/><text x="32.9736%" y="767.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.02%)</title><rect x="32.7236%" y="741" width="0.0169%" height="15" fill="rgb(217,132,38)"/><text x="32.9736%" y="751.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.02%)</title><rect x="32.7236%" y="725" width="0.0169%" height="15" fill="rgb(242,146,4)"/><text x="32.9736%" y="735.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="32.7236%" y="853" width="0.0339%" height="15" fill="rgb(212,61,9)"/><text x="32.9736%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="32.7236%" y="837" width="0.0339%" height="15" fill="rgb(247,126,22)"/><text x="32.9736%" y="847.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (2 samples, 0.03%)</title><rect x="32.7236%" y="821" width="0.0339%" height="15" fill="rgb(220,196,2)"/><text x="32.9736%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.03%)</title><rect x="32.7236%" y="805" width="0.0339%" height="15" fill="rgb(208,46,4)"/><text x="32.9736%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::replace (2 samples, 0.03%)</title><rect x="32.7236%" y="789" width="0.0339%" height="15" fill="rgb(252,104,46)"/><text x="32.9736%" y="799.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (2 samples, 0.03%)</title><rect x="32.7236%" y="773" width="0.0339%" height="15" fill="rgb(237,152,48)"/><text x="32.9736%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.02%)</title><rect x="32.7405%" y="757" width="0.0169%" height="15" fill="rgb(221,59,37)"/><text x="32.9905%" y="767.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (1 samples, 0.02%)</title><rect x="32.7913%" y="773" width="0.0169%" height="15" fill="rgb(209,202,51)"/><text x="33.0413%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::bytes_mut (1 samples, 0.02%)</title><rect x="32.7913%" y="757" width="0.0169%" height="15" fill="rgb(228,81,30)"/><text x="33.0413%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (1 samples, 0.02%)</title><rect x="32.7913%" y="741" width="0.0169%" height="15" fill="rgb(227,42,39)"/><text x="33.0413%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.02%)</title><rect x="32.7913%" y="725" width="0.0169%" height="15" fill="rgb(221,26,2)"/><text x="33.0413%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="32.7913%" y="709" width="0.0169%" height="15" fill="rgb(254,61,31)"/><text x="33.0413%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="32.7913%" y="693" width="0.0169%" height="15" fill="rgb(222,173,38)"/><text x="33.0413%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="32.7913%" y="677" width="0.0169%" height="15" fill="rgb(218,50,12)"/><text x="33.0413%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="32.7913%" y="661" width="0.0169%" height="15" fill="rgb(223,88,40)"/><text x="33.0413%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="32.7913%" y="645" width="0.0169%" height="15" fill="rgb(237,54,19)"/><text x="33.0413%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.02%)</title><rect x="32.7913%" y="629" width="0.0169%" height="15" fill="rgb(251,129,25)"/><text x="33.0413%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="32.7913%" y="613" width="0.0169%" height="15" fill="rgb(238,97,19)"/><text x="33.0413%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="32.7913%" y="597" width="0.0169%" height="15" fill="rgb(240,169,18)"/><text x="33.0413%" y="607.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="32.7913%" y="581" width="0.0169%" height="15" fill="rgb(230,187,49)"/><text x="33.0413%" y="591.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="32.7913%" y="565" width="0.0169%" height="15" fill="rgb(209,44,26)"/><text x="33.0413%" y="575.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="32.7913%" y="549" width="0.0169%" height="15" fill="rgb(244,0,6)"/><text x="33.0413%" y="559.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="32.7913%" y="533" width="0.0169%" height="15" fill="rgb(248,18,21)"/><text x="33.0413%" y="543.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (4 samples, 0.07%)</title><rect x="32.7575%" y="853" width="0.0678%" height="15" fill="rgb(245,180,19)"/><text x="33.0075%" y="863.50"></text></g><g><title>serde_json::ser::Formatter::end_object (4 samples, 0.07%)</title><rect x="32.7575%" y="837" width="0.0678%" height="15" fill="rgb(252,118,36)"/><text x="33.0075%" y="847.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.07%)</title><rect x="32.7575%" y="821" width="0.0678%" height="15" fill="rgb(210,224,19)"/><text x="33.0075%" y="831.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (2 samples, 0.03%)</title><rect x="32.7913%" y="805" width="0.0339%" height="15" fill="rgb(218,30,24)"/><text x="33.0413%" y="815.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (2 samples, 0.03%)</title><rect x="32.7913%" y="789" width="0.0339%" height="15" fill="rgb(219,75,50)"/><text x="33.0413%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="32.8083%" y="773" width="0.0169%" height="15" fill="rgb(234,72,50)"/><text x="33.0583%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="32.8083%" y="757" width="0.0169%" height="15" fill="rgb(219,100,48)"/><text x="33.0583%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="32.8252%" y="805" width="0.0508%" height="15" fill="rgb(253,5,41)"/><text x="33.0752%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="32.8252%" y="789" width="0.0508%" height="15" fill="rgb(247,181,11)"/><text x="33.0752%" y="799.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.02%)</title><rect x="32.8930%" y="757" width="0.0169%" height="15" fill="rgb(222,223,25)"/><text x="33.1430%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="32.8930%" y="741" width="0.0169%" height="15" fill="rgb(214,198,28)"/><text x="33.1430%" y="751.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="32.8930%" y="725" width="0.0169%" height="15" fill="rgb(230,46,43)"/><text x="33.1430%" y="735.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="32.9099%" y="709" width="0.0169%" height="15" fill="rgb(233,65,53)"/><text x="33.1599%" y="719.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="32.9099%" y="693" width="0.0169%" height="15" fill="rgb(221,121,27)"/><text x="33.1599%" y="703.50"></text></g><g><title>serde_json::ser::Formatter::end_string (2 samples, 0.03%)</title><rect x="32.9099%" y="757" width="0.0339%" height="15" fill="rgb(247,70,47)"/><text x="33.1599%" y="767.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.03%)</title><rect x="32.9099%" y="741" width="0.0339%" height="15" fill="rgb(228,85,35)"/><text x="33.1599%" y="751.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (2 samples, 0.03%)</title><rect x="32.9099%" y="725" width="0.0339%" height="15" fill="rgb(209,50,18)"/><text x="33.1599%" y="735.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (1 samples, 0.02%)</title><rect x="32.9268%" y="709" width="0.0169%" height="15" fill="rgb(250,19,35)"/><text x="33.1768%" y="719.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (8 samples, 0.14%)</title><rect x="32.8252%" y="837" width="0.1355%" height="15" fill="rgb(253,107,29)"/><text x="33.0752%" y="847.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (8 samples, 0.14%)</title><rect x="32.8252%" y="821" width="0.1355%" height="15" fill="rgb(252,179,29)"/><text x="33.0752%" y="831.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (5 samples, 0.08%)</title><rect x="32.8760%" y="805" width="0.0847%" height="15" fill="rgb(238,194,6)"/><text x="33.1260%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (5 samples, 0.08%)</title><rect x="32.8760%" y="789" width="0.0847%" height="15" fill="rgb(238,164,29)"/><text x="33.1260%" y="799.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.08%)</title><rect x="32.8760%" y="773" width="0.0847%" height="15" fill="rgb(224,25,9)"/><text x="33.1260%" y="783.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.02%)</title><rect x="32.9438%" y="757" width="0.0169%" height="15" fill="rgb(244,153,23)"/><text x="33.1938%" y="767.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.02%)</title><rect x="32.9438%" y="741" width="0.0169%" height="15" fill="rgb(212,203,14)"/><text x="33.1938%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="32.9438%" y="725" width="0.0169%" height="15" fill="rgb(220,164,20)"/><text x="33.1938%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="32.9776%" y="821" width="0.0169%" height="15" fill="rgb(222,203,48)"/><text x="33.2276%" y="831.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.0115%" y="773" width="0.0169%" height="15" fill="rgb(215,159,22)"/><text x="33.2615%" y="783.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.0115%" y="757" width="0.0169%" height="15" fill="rgb(216,183,47)"/><text x="33.2615%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="33.0285%" y="741" width="0.0169%" height="15" fill="rgb(229,195,25)"/><text x="33.2785%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (14 samples, 0.24%)</title><rect x="32.8252%" y="853" width="0.2371%" height="15" fill="rgb(224,132,51)"/><text x="33.0752%" y="863.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.10%)</title><rect x="32.9607%" y="837" width="0.1016%" height="15" fill="rgb(240,63,7)"/><text x="33.2107%" y="847.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (4 samples, 0.07%)</title><rect x="32.9946%" y="821" width="0.0678%" height="15" fill="rgb(249,182,41)"/><text x="33.2446%" y="831.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.07%)</title><rect x="32.9946%" y="805" width="0.0678%" height="15" fill="rgb(243,47,26)"/><text x="33.2446%" y="815.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="33.0115%" y="789" width="0.0508%" height="15" fill="rgb(233,48,2)"/><text x="33.2615%" y="799.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (2 samples, 0.03%)</title><rect x="33.0285%" y="773" width="0.0339%" height="15" fill="rgb(244,165,34)"/><text x="33.2785%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="33.0285%" y="757" width="0.0339%" height="15" fill="rgb(207,89,7)"/><text x="33.2785%" y="767.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="33.0454%" y="741" width="0.0169%" height="15" fill="rgb(244,117,36)"/><text x="33.2954%" y="751.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (1 samples, 0.02%)</title><rect x="33.0793%" y="805" width="0.0169%" height="15" fill="rgb(226,144,34)"/><text x="33.3293%" y="815.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="33.0793%" y="789" width="0.0169%" height="15" fill="rgb(213,23,19)"/><text x="33.3293%" y="799.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="33.0793%" y="773" width="0.0169%" height="15" fill="rgb(217,75,12)"/><text x="33.3293%" y="783.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (1 samples, 0.02%)</title><rect x="33.0793%" y="757" width="0.0169%" height="15" fill="rgb(224,159,17)"/><text x="33.3293%" y="767.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="33.0793%" y="741" width="0.0169%" height="15" fill="rgb(217,118,1)"/><text x="33.3293%" y="751.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="33.0793%" y="725" width="0.0169%" height="15" fill="rgb(232,180,48)"/><text x="33.3293%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="33.0793%" y="709" width="0.0169%" height="15" fill="rgb(230,27,33)"/><text x="33.3293%" y="719.50"></text></g><g><title>serde_json::ser::Formatter::end_string (3 samples, 0.05%)</title><rect x="33.0962%" y="805" width="0.0508%" height="15" fill="rgb(205,31,21)"/><text x="33.3462%" y="815.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.05%)</title><rect x="33.0962%" y="789" width="0.0508%" height="15" fill="rgb(253,59,4)"/><text x="33.3462%" y="799.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="33.1301%" y="773" width="0.0169%" height="15" fill="rgb(224,201,9)"/><text x="33.3801%" y="783.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.1301%" y="757" width="0.0169%" height="15" fill="rgb(229,206,30)"/><text x="33.3801%" y="767.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.1301%" y="741" width="0.0169%" height="15" fill="rgb(212,67,47)"/><text x="33.3801%" y="751.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.2317%" y="741" width="0.0169%" height="15" fill="rgb(211,96,50)"/><text x="33.4817%" y="751.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (1 samples, 0.02%)</title><rect x="33.2317%" y="725" width="0.0169%" height="15" fill="rgb(252,114,18)"/><text x="33.4817%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (11 samples, 0.19%)</title><rect x="33.0793%" y="837" width="0.1863%" height="15" fill="rgb(223,58,37)"/><text x="33.3293%" y="847.50"></text></g><g><title>serde_json::ser::format_escaped_str (11 samples, 0.19%)</title><rect x="33.0793%" y="821" width="0.1863%" height="15" fill="rgb(237,70,4)"/><text x="33.3293%" y="831.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (7 samples, 0.12%)</title><rect x="33.1470%" y="805" width="0.1186%" height="15" fill="rgb(244,85,46)"/><text x="33.3970%" y="815.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.05%)</title><rect x="33.2148%" y="789" width="0.0508%" height="15" fill="rgb(223,39,52)"/><text x="33.4648%" y="799.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.05%)</title><rect x="33.2148%" y="773" width="0.0508%" height="15" fill="rgb(218,200,14)"/><text x="33.4648%" y="783.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (2 samples, 0.03%)</title><rect x="33.2317%" y="757" width="0.0339%" height="15" fill="rgb(208,171,16)"/><text x="33.4817%" y="767.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (1 samples, 0.02%)</title><rect x="33.2486%" y="741" width="0.0169%" height="15" fill="rgb(234,200,18)"/><text x="33.4986%" y="751.50"></text></g><g><title>&lt;elasticsearch::http::request::JsonBody&lt;T&gt; as elasticsearch::http::request::Body&gt;::write (833 samples, 14.11%)</title><rect x="19.2073%" y="917" width="14.1091%" height="15" fill="rgb(228,45,11)"/><text x="19.4573%" y="927.50">&lt;elasticsearch::http:..</text></g><g><title>serde_json::ser::to_writer (833 samples, 14.11%)</title><rect x="19.2073%" y="901" width="14.1091%" height="15" fill="rgb(237,182,11)"/><text x="19.4573%" y="911.50">serde_json::ser::to_w..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (833 samples, 14.11%)</title><rect x="19.2073%" y="885" width="14.1091%" height="15" fill="rgb(241,175,49)"/><text x="19.4573%" y="895.50">serde_json::value::se..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (387 samples, 6.55%)</title><rect x="26.7615%" y="869" width="6.5549%" height="15" fill="rgb(247,38,35)"/><text x="27.0115%" y="879.50">serde_jso..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 0.25%)</title><rect x="33.0623%" y="853" width="0.2541%" height="15" fill="rgb(228,39,49)"/><text x="33.3123%" y="863.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.05%)</title><rect x="33.2656%" y="837" width="0.0508%" height="15" fill="rgb(226,101,26)"/><text x="33.5156%" y="847.50"></text></g><g><title>&lt;bytes::buf::ext::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="33.2995%" y="821" width="0.0169%" height="15" fill="rgb(206,141,19)"/><text x="33.5495%" y="831.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put (1 samples, 0.02%)</title><rect x="33.2995%" y="805" width="0.0169%" height="15" fill="rgb(211,200,13)"/><text x="33.5495%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="33.2995%" y="789" width="0.0169%" height="15" fill="rgb(241,121,6)"/><text x="33.5495%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="33.2995%" y="773" width="0.0169%" height="15" fill="rgb(234,221,29)"/><text x="33.5495%" y="783.50"></text></g><g><title>&lt;elasticsearch::http::request::NdBody&lt;T&gt; as elasticsearch::http::request::Body&gt;::write (838 samples, 14.19%)</title><rect x="19.1565%" y="933" width="14.1938%" height="15" fill="rgb(229,136,5)"/><text x="19.4065%" y="943.50">&lt;elasticsearch::http::..</text></g><g><title>bytes::buf::buf_mut::BufMut::put_u8 (2 samples, 0.03%)</title><rect x="33.3164%" y="917" width="0.0339%" height="15" fill="rgb(238,36,11)"/><text x="33.5664%" y="927.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (2 samples, 0.03%)</title><rect x="33.3164%" y="901" width="0.0339%" height="15" fill="rgb(251,55,41)"/><text x="33.5664%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.02%)</title><rect x="33.3333%" y="885" width="0.0169%" height="15" fill="rgb(242,34,40)"/><text x="33.5833%" y="895.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (1 samples, 0.02%)</title><rect x="33.3333%" y="869" width="0.0169%" height="15" fill="rgb(215,42,17)"/><text x="33.5833%" y="879.50"></text></g><g><title>&lt;hyper::client::ResponseFuture as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="33.4011%" y="901" width="0.0339%" height="15" fill="rgb(207,44,46)"/><text x="33.6511%" y="911.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="33.4180%" y="885" width="0.0169%" height="15" fill="rgb(211,206,28)"/><text x="33.6680%" y="895.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="33.4180%" y="869" width="0.0169%" height="15" fill="rgb(237,167,16)"/><text x="33.6680%" y="879.50"></text></g><g><title>&lt;url::Url as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="33.4350%" y="901" width="0.0339%" height="15" fill="rgb(233,66,6)"/><text x="33.6850%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="33.4519%" y="885" width="0.0169%" height="15" fill="rgb(246,123,29)"/><text x="33.7019%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="33.4519%" y="869" width="0.0169%" height="15" fill="rgb(209,62,40)"/><text x="33.7019%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="33.4519%" y="853" width="0.0169%" height="15" fill="rgb(218,4,25)"/><text x="33.7019%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="33.4519%" y="837" width="0.0169%" height="15" fill="rgb(253,91,49)"/><text x="33.7019%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="33.4519%" y="821" width="0.0169%" height="15" fill="rgb(228,155,29)"/><text x="33.7019%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="33.4519%" y="805" width="0.0169%" height="15" fill="rgb(243,57,37)"/><text x="33.7019%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="33.4519%" y="789" width="0.0169%" height="15" fill="rgb(244,167,17)"/><text x="33.7019%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="33.4519%" y="773" width="0.0169%" height="15" fill="rgb(207,181,38)"/><text x="33.7019%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="33.4519%" y="757" width="0.0169%" height="15" fill="rgb(211,8,23)"/><text x="33.7019%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="33.4519%" y="741" width="0.0169%" height="15" fill="rgb(235,11,44)"/><text x="33.7019%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="33.4519%" y="725" width="0.0169%" height="15" fill="rgb(248,18,52)"/><text x="33.7019%" y="735.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="33.4519%" y="709" width="0.0169%" height="15" fill="rgb(208,4,7)"/><text x="33.7019%" y="719.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (11 samples, 0.19%)</title><rect x="33.3503%" y="933" width="0.1863%" height="15" fill="rgb(240,17,39)"/><text x="33.6003%" y="943.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="33.3672%" y="917" width="0.1694%" height="15" fill="rgb(207,170,3)"/><text x="33.6172%" y="927.50"></text></g><g><title>reqwest::async_impl::response::Response::new (4 samples, 0.07%)</title><rect x="33.4688%" y="901" width="0.0678%" height="15" fill="rgb(236,100,52)"/><text x="33.7188%" y="911.50"></text></g><g><title>reqwest::async_impl::decoder::Decoder::detect (4 samples, 0.07%)</title><rect x="33.4688%" y="885" width="0.0678%" height="15" fill="rgb(246,78,51)"/><text x="33.7188%" y="895.50"></text></g><g><title>reqwest::async_impl::decoder::Decoder::detect_gzip (3 samples, 0.05%)</title><rect x="33.4858%" y="869" width="0.0508%" height="15" fill="rgb(211,17,15)"/><text x="33.7358%" y="879.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove (2 samples, 0.03%)</title><rect x="33.5027%" y="853" width="0.0339%" height="15" fill="rgb(209,59,46)"/><text x="33.7527%" y="863.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::remove_found (1 samples, 0.02%)</title><rect x="33.5196%" y="837" width="0.0169%" height="15" fill="rgb(210,92,25)"/><text x="33.7696%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="33.5366%" y="933" width="0.0169%" height="15" fill="rgb(238,174,52)"/><text x="33.7866%" y="943.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="33.5535%" y="933" width="0.0169%" height="15" fill="rgb(230,73,7)"/><text x="33.8035%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split (2 samples, 0.03%)</title><rect x="33.5705%" y="933" width="0.0339%" height="15" fill="rgb(243,124,40)"/><text x="33.8205%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.02%)</title><rect x="33.5874%" y="917" width="0.0169%" height="15" fill="rgb(244,170,11)"/><text x="33.8374%" y="927.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (1 samples, 0.02%)</title><rect x="33.5874%" y="901" width="0.0169%" height="15" fill="rgb(207,114,54)"/><text x="33.8374%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (1 samples, 0.02%)</title><rect x="33.5874%" y="885" width="0.0169%" height="15" fill="rgb(205,42,20)"/><text x="33.8374%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="33.5874%" y="869" width="0.0169%" height="15" fill="rgb(230,30,28)"/><text x="33.8374%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.02%)</title><rect x="33.5874%" y="853" width="0.0169%" height="15" fill="rgb(205,73,54)"/><text x="33.8374%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="33.5874%" y="837" width="0.0169%" height="15" fill="rgb(254,227,23)"/><text x="33.8374%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="33.5874%" y="821" width="0.0169%" height="15" fill="rgb(228,202,34)"/><text x="33.8374%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="33.5874%" y="805" width="0.0169%" height="15" fill="rgb(222,225,37)"/><text x="33.8374%" y="815.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="33.5874%" y="789" width="0.0169%" height="15" fill="rgb(221,14,54)"/><text x="33.8374%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.17%)</title><rect x="33.6382%" y="837" width="0.1694%" height="15" fill="rgb(254,102,2)"/><text x="33.8882%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::full_range (5 samples, 0.08%)</title><rect x="33.7229%" y="821" width="0.0847%" height="15" fill="rgb(232,104,17)"/><text x="33.9729%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (4 samples, 0.07%)</title><rect x="33.7398%" y="805" width="0.0678%" height="15" fill="rgb(250,220,14)"/><text x="33.9898%" y="815.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (4 samples, 0.07%)</title><rect x="33.7398%" y="789" width="0.0678%" height="15" fill="rgb(241,158,9)"/><text x="33.9898%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (4 samples, 0.07%)</title><rect x="33.7398%" y="773" width="0.0678%" height="15" fill="rgb(246,9,43)"/><text x="33.9898%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (5 samples, 0.08%)</title><rect x="35.9756%" y="709" width="0.0847%" height="15" fill="rgb(206,73,33)"/><text x="36.2256%" y="719.50"></text></g><g><title>__GI___libc_free (3 samples, 0.05%)</title><rect x="36.0603%" y="661" width="0.0508%" height="15" fill="rgb(222,79,8)"/><text x="36.3103%" y="671.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="36.1111%" y="661" width="0.0169%" height="15" fill="rgb(234,8,54)"/><text x="36.3611%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (24 samples, 0.41%)</title><rect x="35.7893%" y="725" width="0.4065%" height="15" fill="rgb(209,134,38)"/><text x="36.0393%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (8 samples, 0.14%)</title><rect x="36.0603%" y="709" width="0.1355%" height="15" fill="rgb(230,127,29)"/><text x="36.3103%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (8 samples, 0.14%)</title><rect x="36.0603%" y="693" width="0.1355%" height="15" fill="rgb(242,44,41)"/><text x="36.3103%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.14%)</title><rect x="36.0603%" y="677" width="0.1355%" height="15" fill="rgb(222,56,43)"/><text x="36.3103%" y="687.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="36.1280%" y="661" width="0.0678%" height="15" fill="rgb(238,39,47)"/><text x="36.3780%" y="671.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="36.1789%" y="645" width="0.0169%" height="15" fill="rgb(226,79,43)"/><text x="36.4289%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,HandleType&gt;::reborrow (3 samples, 0.05%)</title><rect x="36.1958%" y="725" width="0.0508%" height="15" fill="rgb(242,105,53)"/><text x="36.4458%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (122 samples, 2.07%)</title><rect x="34.4682%" y="741" width="2.0664%" height="15" fill="rgb(251,132,46)"/><text x="34.7182%" y="751.50">a..</text></g><g><title>core::ptr::read (17 samples, 0.29%)</title><rect x="36.2466%" y="725" width="0.2879%" height="15" fill="rgb(231,77,14)"/><text x="36.4966%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (131 samples, 2.22%)</title><rect x="34.4682%" y="773" width="2.2188%" height="15" fill="rgb(240,135,9)"/><text x="34.7182%" y="783.50">a..</text></g><g><title>alloc::collections::btree::navigate::replace (131 samples, 2.22%)</title><rect x="34.4682%" y="757" width="2.2188%" height="15" fill="rgb(248,109,14)"/><text x="34.7182%" y="767.50">a..</text></g><g><title>core::ptr::write (9 samples, 0.15%)</title><rect x="36.5346%" y="741" width="0.1524%" height="15" fill="rgb(227,146,52)"/><text x="36.7846%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3 samples, 0.05%)</title><rect x="36.6870%" y="773" width="0.0508%" height="15" fill="rgb(232,54,3)"/><text x="36.9370%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 2.30%)</title><rect x="34.4682%" y="789" width="2.3035%" height="15" fill="rgb(229,201,43)"/><text x="34.7182%" y="799.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.03%)</title><rect x="36.7378%" y="773" width="0.0339%" height="15" fill="rgb(252,161,33)"/><text x="36.9878%" y="783.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="36.7717%" y="741" width="0.0169%" height="15" fill="rgb(226,146,40)"/><text x="37.0217%" y="751.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="36.7886%" y="741" width="0.0169%" height="15" fill="rgb(219,47,25)"/><text x="37.0386%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="36.7886%" y="725" width="0.0169%" height="15" fill="rgb(250,135,13)"/><text x="37.0386%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (14 samples, 0.24%)</title><rect x="36.7717%" y="789" width="0.2371%" height="15" fill="rgb(219,229,18)"/><text x="37.0217%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (14 samples, 0.24%)</title><rect x="36.7717%" y="773" width="0.2371%" height="15" fill="rgb(217,152,27)"/><text x="37.0217%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.24%)</title><rect x="36.7717%" y="757" width="0.2371%" height="15" fill="rgb(225,71,47)"/><text x="37.0217%" y="767.50"></text></g><g><title>_int_free (12 samples, 0.20%)</title><rect x="36.8056%" y="741" width="0.2033%" height="15" fill="rgb(220,139,14)"/><text x="37.0556%" y="751.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="36.9919%" y="725" width="0.0169%" height="15" fill="rgb(247,54,32)"/><text x="37.2419%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.03%)</title><rect x="37.0088%" y="741" width="0.0339%" height="15" fill="rgb(252,131,39)"/><text x="37.2588%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (1 samples, 0.02%)</title><rect x="37.0935%" y="629" width="0.0169%" height="15" fill="rgb(210,108,39)"/><text x="37.3435%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.02%)</title><rect x="37.0935%" y="613" width="0.0169%" height="15" fill="rgb(205,23,29)"/><text x="37.3435%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="37.0596%" y="693" width="0.0847%" height="15" fill="rgb(246,139,46)"/><text x="37.3096%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (5 samples, 0.08%)</title><rect x="37.0596%" y="677" width="0.0847%" height="15" fill="rgb(250,81,26)"/><text x="37.3096%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::replace (5 samples, 0.08%)</title><rect x="37.0596%" y="661" width="0.0847%" height="15" fill="rgb(214,104,7)"/><text x="37.3096%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (5 samples, 0.08%)</title><rect x="37.0596%" y="645" width="0.0847%" height="15" fill="rgb(233,189,8)"/><text x="37.3096%" y="655.50"></text></g><g><title>core::ptr::read (2 samples, 0.03%)</title><rect x="37.1104%" y="629" width="0.0339%" height="15" fill="rgb(228,141,17)"/><text x="37.3604%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="37.1443%" y="645" width="0.0169%" height="15" fill="rgb(247,157,1)"/><text x="37.3943%" y="655.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="37.1612%" y="645" width="0.0169%" height="15" fill="rgb(249,225,5)"/><text x="37.4112%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (8 samples, 0.14%)</title><rect x="37.1443%" y="693" width="0.1355%" height="15" fill="rgb(242,55,13)"/><text x="37.3943%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (8 samples, 0.14%)</title><rect x="37.1443%" y="677" width="0.1355%" height="15" fill="rgb(230,49,50)"/><text x="37.3943%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.14%)</title><rect x="37.1443%" y="661" width="0.1355%" height="15" fill="rgb(241,111,38)"/><text x="37.3943%" y="671.50"></text></g><g><title>_int_free (6 samples, 0.10%)</title><rect x="37.1782%" y="645" width="0.1016%" height="15" fill="rgb(252,155,4)"/><text x="37.4282%" y="655.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="37.2629%" y="629" width="0.0169%" height="15" fill="rgb(212,69,32)"/><text x="37.5129%" y="639.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="37.2798%" y="661" width="0.0339%" height="15" fill="rgb(243,107,47)"/><text x="37.5298%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.32%)</title><rect x="37.0088%" y="757" width="0.3218%" height="15" fill="rgb(247,130,12)"/><text x="37.2588%" y="767.50"></text></g><g><title>core::mem::drop (17 samples, 0.29%)</title><rect x="37.0427%" y="741" width="0.2879%" height="15" fill="rgb(233,74,16)"/><text x="37.2927%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.29%)</title><rect x="37.0427%" y="725" width="0.2879%" height="15" fill="rgb(208,58,18)"/><text x="37.2927%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.29%)</title><rect x="37.0427%" y="709" width="0.2879%" height="15" fill="rgb(242,225,1)"/><text x="37.2927%" y="719.50"></text></g><g><title>core::mem::drop (3 samples, 0.05%)</title><rect x="37.2798%" y="693" width="0.0508%" height="15" fill="rgb(249,39,40)"/><text x="37.5298%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="37.2798%" y="677" width="0.0508%" height="15" fill="rgb(207,72,44)"/><text x="37.5298%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="37.3137%" y="661" width="0.0169%" height="15" fill="rgb(215,193,12)"/><text x="37.5637%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="37.3137%" y="645" width="0.0169%" height="15" fill="rgb(248,41,39)"/><text x="37.5637%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="37.3137%" y="629" width="0.0169%" height="15" fill="rgb(253,85,4)"/><text x="37.5637%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="37.3137%" y="613" width="0.0169%" height="15" fill="rgb(243,70,31)"/><text x="37.5637%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="37.3137%" y="597" width="0.0169%" height="15" fill="rgb(253,195,26)"/><text x="37.5637%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="37.3137%" y="581" width="0.0169%" height="15" fill="rgb(243,42,11)"/><text x="37.5637%" y="591.50"></text></g><g><title>__GI___libc_free (10 samples, 0.17%)</title><rect x="37.3306%" y="757" width="0.1694%" height="15" fill="rgb(239,66,17)"/><text x="37.5806%" y="767.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="37.5000%" y="757" width="0.0169%" height="15" fill="rgb(217,132,21)"/><text x="37.7500%" y="767.50"></text></g><g><title>_int_free (62 samples, 1.05%)</title><rect x="37.5169%" y="757" width="1.0501%" height="15" fill="rgb(252,202,21)"/><text x="37.7669%" y="767.50"></text></g><g><title>__GI___libc_free (7 samples, 0.12%)</title><rect x="38.6856%" y="661" width="0.1186%" height="15" fill="rgb(233,98,36)"/><text x="38.9356%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.78%)</title><rect x="38.6179%" y="709" width="0.7791%" height="15" fill="rgb(216,153,54)"/><text x="38.8679%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (42 samples, 0.71%)</title><rect x="38.6856%" y="693" width="0.7114%" height="15" fill="rgb(250,99,7)"/><text x="38.9356%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.71%)</title><rect x="38.6856%" y="677" width="0.7114%" height="15" fill="rgb(207,56,50)"/><text x="38.9356%" y="687.50"></text></g><g><title>_int_free (35 samples, 0.59%)</title><rect x="38.8042%" y="661" width="0.5928%" height="15" fill="rgb(244,61,34)"/><text x="39.0542%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (361 samples, 6.11%)</title><rect x="33.6213%" y="853" width="6.1145%" height="15" fill="rgb(241,50,38)"/><text x="33.8713%" y="863.50">&lt;alloc::..</text></g><g><title>core::mem::drop (350 samples, 5.93%)</title><rect x="33.8076%" y="837" width="5.9282%" height="15" fill="rgb(212,166,30)"/><text x="34.0576%" y="847.50">core::me..</text></g><g><title>core::ptr::drop_in_place (350 samples, 5.93%)</title><rect x="33.8076%" y="821" width="5.9282%" height="15" fill="rgb(249,127,32)"/><text x="34.0576%" y="831.50">core::pt..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (350 samples, 5.93%)</title><rect x="33.8076%" y="805" width="5.9282%" height="15" fill="rgb(209,103,0)"/><text x="34.0576%" y="815.50">&lt;alloc::..</text></g><g><title>core::mem::drop (161 samples, 2.73%)</title><rect x="37.0088%" y="789" width="2.7270%" height="15" fill="rgb(238,209,51)"/><text x="37.2588%" y="799.50">co..</text></g><g><title>core::ptr::drop_in_place (161 samples, 2.73%)</title><rect x="37.0088%" y="773" width="2.7270%" height="15" fill="rgb(237,56,23)"/><text x="37.2588%" y="783.50">co..</text></g><g><title>core::ptr::drop_in_place (69 samples, 1.17%)</title><rect x="38.5671%" y="757" width="1.1687%" height="15" fill="rgb(215,153,46)"/><text x="38.8171%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 1.12%)</title><rect x="38.6179%" y="741" width="1.1179%" height="15" fill="rgb(224,49,31)"/><text x="38.8679%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (66 samples, 1.12%)</title><rect x="38.6179%" y="725" width="1.1179%" height="15" fill="rgb(250,18,42)"/><text x="38.8679%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (20 samples, 0.34%)</title><rect x="39.3970%" y="709" width="0.3388%" height="15" fill="rgb(215,176,39)"/><text x="39.6470%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.34%)</title><rect x="39.3970%" y="693" width="0.3388%" height="15" fill="rgb(223,77,29)"/><text x="39.6470%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.34%)</title><rect x="39.3970%" y="677" width="0.3388%" height="15" fill="rgb(234,94,52)"/><text x="39.6470%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (362 samples, 6.13%)</title><rect x="33.6213%" y="901" width="6.1314%" height="15" fill="rgb(220,154,50)"/><text x="33.8713%" y="911.50">&lt;alloc::..</text></g><g><title>core::ptr::drop_in_place (362 samples, 6.13%)</title><rect x="33.6213%" y="885" width="6.1314%" height="15" fill="rgb(212,11,10)"/><text x="33.8713%" y="895.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (362 samples, 6.13%)</title><rect x="33.6213%" y="869" width="6.1314%" height="15" fill="rgb(205,166,19)"/><text x="33.8713%" y="879.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7358%" y="853" width="0.0169%" height="15" fill="rgb(244,198,16)"/><text x="39.9858%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="39.7527%" y="837" width="0.0169%" height="15" fill="rgb(219,69,12)"/><text x="40.0027%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7527%" y="821" width="0.0169%" height="15" fill="rgb(245,30,7)"/><text x="40.0027%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="39.7527%" y="853" width="0.0339%" height="15" fill="rgb(218,221,48)"/><text x="40.0027%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7696%" y="837" width="0.0169%" height="15" fill="rgb(216,66,15)"/><text x="40.0196%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7696%" y="821" width="0.0169%" height="15" fill="rgb(226,122,50)"/><text x="40.0196%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7696%" y="805" width="0.0169%" height="15" fill="rgb(239,156,16)"/><text x="40.0196%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.7696%" y="789" width="0.0169%" height="15" fill="rgb(224,27,38)"/><text x="40.0196%" y="799.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.7696%" y="773" width="0.0169%" height="15" fill="rgb(224,39,27)"/><text x="40.0196%" y="783.50"></text></g><g><title>bytes::bytes::static_drop (1 samples, 0.02%)</title><rect x="39.7696%" y="757" width="0.0169%" height="15" fill="rgb(215,92,29)"/><text x="40.0196%" y="767.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="39.7866%" y="837" width="0.0339%" height="15" fill="rgb(207,159,16)"/><text x="40.0366%" y="847.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (2 samples, 0.03%)</title><rect x="39.7866%" y="821" width="0.0339%" height="15" fill="rgb(238,163,47)"/><text x="40.0366%" y="831.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.03%)</title><rect x="39.7866%" y="805" width="0.0339%" height="15" fill="rgb(219,91,49)"/><text x="40.0366%" y="815.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::{{closure}} (2 samples, 0.03%)</title><rect x="39.7866%" y="789" width="0.0339%" height="15" fill="rgb(227,167,31)"/><text x="40.0366%" y="799.50"></text></g><g><title>bytes::bytes_mut::release_shared (2 samples, 0.03%)</title><rect x="39.7866%" y="773" width="0.0339%" height="15" fill="rgb(234,80,54)"/><text x="40.0366%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="39.7866%" y="757" width="0.0339%" height="15" fill="rgb(212,114,2)"/><text x="40.0366%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="39.7866%" y="741" width="0.0339%" height="15" fill="rgb(234,50,24)"/><text x="40.0366%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="39.7866%" y="725" width="0.0339%" height="15" fill="rgb(221,68,8)"/><text x="40.0366%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="39.7866%" y="709" width="0.0339%" height="15" fill="rgb(254,180,31)"/><text x="40.0366%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="39.7866%" y="693" width="0.0339%" height="15" fill="rgb(247,130,50)"/><text x="40.0366%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.03%)</title><rect x="39.7866%" y="677" width="0.0339%" height="15" fill="rgb(211,109,4)"/><text x="40.0366%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="39.7866%" y="661" width="0.0339%" height="15" fill="rgb(238,50,21)"/><text x="40.0366%" y="671.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="39.7866%" y="645" width="0.0339%" height="15" fill="rgb(225,57,45)"/><text x="40.0366%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (368 samples, 6.23%)</title><rect x="33.6043%" y="933" width="6.2331%" height="15" fill="rgb(209,196,50)"/><text x="33.8543%" y="943.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (367 samples, 6.22%)</title><rect x="33.6213%" y="917" width="6.2161%" height="15" fill="rgb(242,140,13)"/><text x="33.8713%" y="927.50">core::pt..</text></g><g><title>core::ptr::drop_in_place (5 samples, 0.08%)</title><rect x="39.7527%" y="901" width="0.0847%" height="15" fill="rgb(217,111,7)"/><text x="40.0027%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.08%)</title><rect x="39.7527%" y="885" width="0.0847%" height="15" fill="rgb(253,193,51)"/><text x="40.0027%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.08%)</title><rect x="39.7527%" y="869" width="0.0847%" height="15" fill="rgb(252,70,29)"/><text x="40.0027%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="39.7866%" y="853" width="0.0508%" height="15" fill="rgb(232,127,12)"/><text x="40.0366%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="837" width="0.0169%" height="15" fill="rgb(211,180,21)"/><text x="40.0705%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="821" width="0.0169%" height="15" fill="rgb(229,72,13)"/><text x="40.0705%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="805" width="0.0169%" height="15" fill="rgb(240,211,49)"/><text x="40.0705%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="789" width="0.0169%" height="15" fill="rgb(219,149,40)"/><text x="40.0705%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="773" width="0.0169%" height="15" fill="rgb(210,127,46)"/><text x="40.0705%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="757" width="0.0169%" height="15" fill="rgb(220,106,7)"/><text x="40.0705%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="741" width="0.0169%" height="15" fill="rgb(249,31,22)"/><text x="40.0705%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="725" width="0.0169%" height="15" fill="rgb(253,1,49)"/><text x="40.0705%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="39.8205%" y="709" width="0.0169%" height="15" fill="rgb(227,144,33)"/><text x="40.0705%" y="719.50"></text></g><g><title>&lt;openssl::ssl::SslContext as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="39.8205%" y="693" width="0.0169%" height="15" fill="rgb(249,163,44)"/><text x="40.0705%" y="703.50"></text></g><g><title>SSL_CTX_free (1 samples, 0.02%)</title><rect x="39.8205%" y="677" width="0.0169%" height="15" fill="rgb(234,15,39)"/><text x="40.0705%" y="687.50"></text></g><g><title>elasticsearch::http::transport::Transport::method (1 samples, 0.02%)</title><rect x="39.8374%" y="933" width="0.0169%" height="15" fill="rgb(207,66,16)"/><text x="40.0874%" y="943.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (3 samples, 0.05%)</title><rect x="39.8543%" y="933" width="0.0508%" height="15" fill="rgb(233,112,24)"/><text x="40.1043%" y="943.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (3 samples, 0.05%)</title><rect x="39.8543%" y="917" width="0.0508%" height="15" fill="rgb(230,90,22)"/><text x="40.1043%" y="927.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (3 samples, 0.05%)</title><rect x="39.8543%" y="901" width="0.0508%" height="15" fill="rgb(229,61,13)"/><text x="40.1043%" y="911.50"></text></g><g><title>http::header::map::hash_elem_using (3 samples, 0.05%)</title><rect x="39.8543%" y="885" width="0.0508%" height="15" fill="rgb(225,57,24)"/><text x="40.1043%" y="895.50"></text></g><g><title>&lt;http::header::name::HeaderName as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="39.8882%" y="869" width="0.0169%" height="15" fill="rgb(208,169,48)"/><text x="40.1382%" y="879.50"></text></g><g><title>&lt;http::header::name::Repr&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="39.8882%" y="853" width="0.0169%" height="15" fill="rgb(244,218,51)"/><text x="40.1382%" y="863.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="39.9051%" y="933" width="0.0169%" height="15" fill="rgb(214,148,10)"/><text x="40.1551%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="39.9051%" y="917" width="0.0169%" height="15" fill="rgb(225,174,27)"/><text x="40.1551%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="39.9051%" y="901" width="0.0169%" height="15" fill="rgb(230,96,26)"/><text x="40.1551%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="39.9051%" y="885" width="0.0169%" height="15" fill="rgb(232,10,30)"/><text x="40.1551%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="39.9051%" y="869" width="0.0169%" height="15" fill="rgb(222,8,50)"/><text x="40.1551%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="39.9051%" y="853" width="0.0169%" height="15" fill="rgb(213,81,27)"/><text x="40.1551%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="39.9051%" y="837" width="0.0169%" height="15" fill="rgb(245,50,10)"/><text x="40.1551%" y="847.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="39.9051%" y="821" width="0.0169%" height="15" fill="rgb(216,100,18)"/><text x="40.1551%" y="831.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="39.9051%" y="805" width="0.0169%" height="15" fill="rgb(236,147,54)"/><text x="40.1551%" y="815.50"></text></g><g><title>reqwest::async_impl::client::Client::request (2 samples, 0.03%)</title><rect x="39.9221%" y="933" width="0.0339%" height="15" fill="rgb(205,143,26)"/><text x="40.1721%" y="943.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new (2 samples, 0.03%)</title><rect x="39.9221%" y="917" width="0.0339%" height="15" fill="rgb(236,26,9)"/><text x="40.1721%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.03%)</title><rect x="39.9221%" y="901" width="0.0339%" height="15" fill="rgb(221,165,53)"/><text x="40.1721%" y="911.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::new::{{closure}} (2 samples, 0.03%)</title><rect x="39.9221%" y="885" width="0.0339%" height="15" fill="rgb(214,110,17)"/><text x="40.1721%" y="895.50"></text></g><g><title>reqwest::async_impl::request::extract_authority (2 samples, 0.03%)</title><rect x="39.9221%" y="869" width="0.0339%" height="15" fill="rgb(237,197,12)"/><text x="40.1721%" y="879.50"></text></g><g><title>percent_encoding::PercentDecode::decode_utf8 (2 samples, 0.03%)</title><rect x="39.9221%" y="853" width="0.0339%" height="15" fill="rgb(205,84,17)"/><text x="40.1721%" y="863.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.03%)</title><rect x="39.9221%" y="837" width="0.0339%" height="15" fill="rgb(237,18,45)"/><text x="40.1721%" y="847.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentDecode&gt; for alloc::borrow::Cow&lt;[u8]&gt;&gt;::from (2 samples, 0.03%)</title><rect x="39.9221%" y="821" width="0.0339%" height="15" fill="rgb(221,87,14)"/><text x="40.1721%" y="831.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.03%)</title><rect x="39.9221%" y="805" width="0.0339%" height="15" fill="rgb(238,186,15)"/><text x="40.1721%" y="815.50"></text></g><g><title>percent_encoding::PercentDecode::decode_utf8 (2 samples, 0.03%)</title><rect x="39.9221%" y="789" width="0.0339%" height="15" fill="rgb(208,115,11)"/><text x="40.1721%" y="799.50"></text></g><g><title>&lt;http::header::name::HeaderName as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="39.9898%" y="901" width="0.0169%" height="15" fill="rgb(254,175,0)"/><text x="40.2398%" y="911.50"></text></g><g><title>reqwest::util::replace_headers (1 samples, 0.02%)</title><rect x="39.9898%" y="885" width="0.0169%" height="15" fill="rgb(227,24,42)"/><text x="40.2398%" y="895.50"></text></g><g><title>&lt;http::header::map::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.0068%" y="885" width="0.0169%" height="15" fill="rgb(223,211,37)"/><text x="40.2568%" y="895.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="40.0068%" y="869" width="0.0169%" height="15" fill="rgb(235,49,27)"/><text x="40.2568%" y="879.50"></text></g><g><title>&lt;http::header::map::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="40.0068%" y="853" width="0.0169%" height="15" fill="rgb(254,97,51)"/><text x="40.2568%" y="863.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="40.0068%" y="837" width="0.0169%" height="15" fill="rgb(249,51,40)"/><text x="40.2568%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="40.0068%" y="901" width="0.0508%" height="15" fill="rgb(210,128,45)"/><text x="40.2568%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="40.0237%" y="885" width="0.0339%" height="15" fill="rgb(224,137,50)"/><text x="40.2737%" y="895.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="40.0237%" y="869" width="0.0339%" height="15" fill="rgb(242,15,9)"/><text x="40.2737%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="40.0407%" y="853" width="0.0169%" height="15" fill="rgb(233,187,41)"/><text x="40.2907%" y="863.50"></text></g><g><title>&lt;&lt;alloc::vec::IntoIter&lt;T&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.0407%" y="837" width="0.0169%" height="15" fill="rgb(227,2,29)"/><text x="40.2907%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="40.0407%" y="821" width="0.0169%" height="15" fill="rgb(222,70,3)"/><text x="40.2907%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.0407%" y="805" width="0.0169%" height="15" fill="rgb(213,11,42)"/><text x="40.2907%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="40.0407%" y="789" width="0.0169%" height="15" fill="rgb(225,150,9)"/><text x="40.2907%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="40.0407%" y="773" width="0.0169%" height="15" fill="rgb(230,162,45)"/><text x="40.2907%" y="783.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="40.0407%" y="757" width="0.0169%" height="15" fill="rgb(222,14,52)"/><text x="40.2907%" y="767.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::headers (9 samples, 0.15%)</title><rect x="39.9560%" y="933" width="0.1524%" height="15" fill="rgb(254,198,14)"/><text x="40.2060%" y="943.50"></text></g><g><title>reqwest::util::replace_headers (9 samples, 0.15%)</title><rect x="39.9560%" y="917" width="0.1524%" height="15" fill="rgb(220,217,30)"/><text x="40.2060%" y="927.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (3 samples, 0.05%)</title><rect x="40.0576%" y="901" width="0.0508%" height="15" fill="rgb(215,146,41)"/><text x="40.3076%" y="911.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (1 samples, 0.02%)</title><rect x="40.0915%" y="885" width="0.0169%" height="15" fill="rgb(217,27,36)"/><text x="40.3415%" y="895.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (1 samples, 0.02%)</title><rect x="40.0915%" y="869" width="0.0169%" height="15" fill="rgb(219,218,39)"/><text x="40.3415%" y="879.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (1 samples, 0.02%)</title><rect x="40.0915%" y="853" width="0.0169%" height="15" fill="rgb(219,4,42)"/><text x="40.3415%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="40.0915%" y="837" width="0.0169%" height="15" fill="rgb(249,119,36)"/><text x="40.3415%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="40.0915%" y="821" width="0.0169%" height="15" fill="rgb(209,23,33)"/><text x="40.3415%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="40.0915%" y="805" width="0.0169%" height="15" fill="rgb(211,10,0)"/><text x="40.3415%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="40.0915%" y="789" width="0.0169%" height="15" fill="rgb(208,99,37)"/><text x="40.3415%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="40.0915%" y="773" width="0.0169%" height="15" fill="rgb(213,132,31)"/><text x="40.3415%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="40.0915%" y="757" width="0.0169%" height="15" fill="rgb(243,129,40)"/><text x="40.3415%" y="767.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="40.0915%" y="741" width="0.0169%" height="15" fill="rgb(210,66,33)"/><text x="40.3415%" y="751.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="40.0915%" y="725" width="0.0169%" height="15" fill="rgb(209,189,4)"/><text x="40.3415%" y="735.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::query (2 samples, 0.03%)</title><rect x="40.1084%" y="933" width="0.0339%" height="15" fill="rgb(214,107,37)"/><text x="40.3584%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="40.1253%" y="917" width="0.0169%" height="15" fill="rgb(245,88,54)"/><text x="40.3753%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="40.1253%" y="901" width="0.0169%" height="15" fill="rgb(205,146,20)"/><text x="40.3753%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="40.1253%" y="885" width="0.0169%" height="15" fill="rgb(220,161,25)"/><text x="40.3753%" y="895.50"></text></g><g><title>&lt;url::UrlQuery as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="40.1253%" y="869" width="0.0169%" height="15" fill="rgb(215,152,15)"/><text x="40.3753%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="40.1253%" y="853" width="0.0169%" height="15" fill="rgb(233,192,44)"/><text x="40.3753%" y="863.50"></text></g><g><title>core::mem::take (1 samples, 0.02%)</title><rect x="40.1253%" y="837" width="0.0169%" height="15" fill="rgb(240,170,46)"/><text x="40.3753%" y="847.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="40.1253%" y="821" width="0.0169%" height="15" fill="rgb(207,104,33)"/><text x="40.3753%" y="831.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="40.1253%" y="805" width="0.0169%" height="15" fill="rgb(219,21,39)"/><text x="40.3753%" y="815.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="40.1253%" y="789" width="0.0169%" height="15" fill="rgb(214,133,29)"/><text x="40.3753%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="40.1253%" y="773" width="0.0169%" height="15" fill="rgb(226,93,6)"/><text x="40.3753%" y="783.50"></text></g><g><title>&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="40.1423%" y="901" width="0.0339%" height="15" fill="rgb(252,222,34)"/><text x="40.3923%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="40.1423%" y="885" width="0.0339%" height="15" fill="rgb(252,92,48)"/><text x="40.3923%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="40.1423%" y="869" width="0.0339%" height="15" fill="rgb(245,223,24)"/><text x="40.3923%" y="879.50"></text></g><g><title>http::request::Builder::method (1 samples, 0.02%)</title><rect x="40.1762%" y="901" width="0.0169%" height="15" fill="rgb(205,176,3)"/><text x="40.4262%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="757" width="0.0169%" height="15" fill="rgb(235,151,15)"/><text x="42.7974%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="741" width="0.0169%" height="15" fill="rgb(237,209,11)"/><text x="42.7974%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="725" width="0.0169%" height="15" fill="rgb(243,227,24)"/><text x="42.7974%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="709" width="0.0169%" height="15" fill="rgb(239,193,16)"/><text x="42.7974%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="693" width="0.0169%" height="15" fill="rgb(231,27,9)"/><text x="42.7974%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="677" width="0.0169%" height="15" fill="rgb(219,169,10)"/><text x="42.7974%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="42.5474%" y="661" width="0.0169%" height="15" fill="rgb(244,229,43)"/><text x="42.7974%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (188 samples, 3.18%)</title><rect x="40.2100%" y="885" width="3.1843%" height="15" fill="rgb(254,38,20)"/><text x="40.4600%" y="895.50">all..</text></g><g><title>alloc::alloc::exchange_malloc (188 samples, 3.18%)</title><rect x="40.2100%" y="869" width="3.1843%" height="15" fill="rgb(250,47,30)"/><text x="40.4600%" y="879.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (188 samples, 3.18%)</title><rect x="40.2100%" y="853" width="3.1843%" height="15" fill="rgb(224,124,36)"/><text x="40.4600%" y="863.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (188 samples, 3.18%)</title><rect x="40.2100%" y="837" width="3.1843%" height="15" fill="rgb(246,68,51)"/><text x="40.4600%" y="847.50">all..</text></g><g><title>alloc::alloc::alloc (188 samples, 3.18%)</title><rect x="40.2100%" y="821" width="3.1843%" height="15" fill="rgb(253,43,49)"/><text x="40.4600%" y="831.50">all..</text></g><g><title>__GI___libc_malloc (188 samples, 3.18%)</title><rect x="40.2100%" y="805" width="3.1843%" height="15" fill="rgb(219,54,36)"/><text x="40.4600%" y="815.50">__G..</text></g><g><title>_int_malloc (188 samples, 3.18%)</title><rect x="40.2100%" y="789" width="3.1843%" height="15" fill="rgb(227,133,34)"/><text x="40.4600%" y="799.50">_in..</text></g><g><title>malloc_consolidate (185 samples, 3.13%)</title><rect x="40.2608%" y="773" width="3.1335%" height="15" fill="rgb(247,227,15)"/><text x="40.5108%" y="783.50">mal..</text></g><g><title>unlink_chunk.constprop.0 (49 samples, 0.83%)</title><rect x="42.5644%" y="757" width="0.8299%" height="15" fill="rgb(229,96,14)"/><text x="42.8144%" y="767.50"></text></g><g><title>&lt;hyper::client::Client&lt;C,B&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="869" width="0.0169%" height="15" fill="rgb(220,79,17)"/><text x="43.6443%" y="879.50"></text></g><g><title>&lt;reqwest::connect::Connector as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="853" width="0.0169%" height="15" fill="rgb(205,131,53)"/><text x="43.6443%" y="863.50"></text></g><g><title>&lt;reqwest::connect::Inner as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="837" width="0.0169%" height="15" fill="rgb(209,50,29)"/><text x="43.6443%" y="847.50"></text></g><g><title>&lt;native_tls::TlsConnector as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="821" width="0.0169%" height="15" fill="rgb(245,86,46)"/><text x="43.6443%" y="831.50"></text></g><g><title>&lt;native_tls::imp::TlsConnector as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="805" width="0.0169%" height="15" fill="rgb(235,66,46)"/><text x="43.6443%" y="815.50"></text></g><g><title>&lt;openssl::ssl::connector::SslConnector as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="789" width="0.0169%" height="15" fill="rgb(232,148,31)"/><text x="43.6443%" y="799.50"></text></g><g><title>&lt;openssl::ssl::SslContext as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.3943%" y="773" width="0.0169%" height="15" fill="rgb(217,149,8)"/><text x="43.6443%" y="783.50"></text></g><g><title>&lt;openssl::ssl::SslContext as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="43.3943%" y="757" width="0.0169%" height="15" fill="rgb(209,183,11)"/><text x="43.6443%" y="767.50"></text></g><g><title>&lt;reqwest::connect::Connector as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.4451%" y="821" width="0.0169%" height="15" fill="rgb(208,55,20)"/><text x="43.6951%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="43.4451%" y="805" width="0.0169%" height="15" fill="rgb(218,39,14)"/><text x="43.6951%" y="815.50"></text></g><g><title>http::uri::builder::Builder::authority (2 samples, 0.03%)</title><rect x="43.4621%" y="805" width="0.0339%" height="15" fill="rgb(216,169,33)"/><text x="43.7121%" y="815.50"></text></g><g><title>http::uri::builder::Builder::map (2 samples, 0.03%)</title><rect x="43.4621%" y="789" width="0.0339%" height="15" fill="rgb(233,80,24)"/><text x="43.7121%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.02%)</title><rect x="43.4790%" y="773" width="0.0169%" height="15" fill="rgb(213,179,31)"/><text x="43.7290%" y="783.50"></text></g><g><title>http::uri::builder::Builder::build (2 samples, 0.03%)</title><rect x="43.4959%" y="805" width="0.0339%" height="15" fill="rgb(209,19,5)"/><text x="43.7459%" y="815.50"></text></g><g><title>http::uri::Uri::from_parts (2 samples, 0.03%)</title><rect x="43.4959%" y="789" width="0.0339%" height="15" fill="rgb(219,18,35)"/><text x="43.7459%" y="799.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::retryably_send_request (10 samples, 0.17%)</title><rect x="43.3943%" y="885" width="0.1694%" height="15" fill="rgb(209,169,16)"/><text x="43.6443%" y="895.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::send_request (9 samples, 0.15%)</title><rect x="43.4112%" y="869" width="0.1524%" height="15" fill="rgb(245,90,51)"/><text x="43.6612%" y="879.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::connection_for (7 samples, 0.12%)</title><rect x="43.4451%" y="853" width="0.1186%" height="15" fill="rgb(220,99,45)"/><text x="43.6951%" y="863.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::connect_to (7 samples, 0.12%)</title><rect x="43.4451%" y="837" width="0.1186%" height="15" fill="rgb(249,89,25)"/><text x="43.6951%" y="847.50"></text></g><g><title>hyper::client::domain_as_uri (6 samples, 0.10%)</title><rect x="43.4621%" y="821" width="0.1016%" height="15" fill="rgb(239,193,0)"/><text x="43.7121%" y="831.50"></text></g><g><title>http::uri::builder::Builder::scheme (2 samples, 0.03%)</title><rect x="43.5298%" y="805" width="0.0339%" height="15" fill="rgb(231,126,1)"/><text x="43.7798%" y="815.50"></text></g><g><title>http::uri::builder::Builder::map (1 samples, 0.02%)</title><rect x="43.5467%" y="789" width="0.0169%" height="15" fill="rgb(243,166,3)"/><text x="43.7967%" y="799.50"></text></g><g><title>&lt;http::uri::Uri as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="43.5806%" y="869" width="0.0508%" height="15" fill="rgb(223,22,34)"/><text x="43.8306%" y="879.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::clone::Clone&gt;::clone (3 samples, 0.05%)</title><rect x="43.5806%" y="853" width="0.0508%" height="15" fill="rgb(251,52,51)"/><text x="43.8306%" y="863.50"></text></g><g><title>&lt;http::byte_str::ByteStr as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="43.5976%" y="837" width="0.0339%" height="15" fill="rgb(221,165,28)"/><text x="43.8476%" y="847.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="43.5976%" y="821" width="0.0339%" height="15" fill="rgb(218,121,47)"/><text x="43.8476%" y="831.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.02%)</title><rect x="43.6145%" y="805" width="0.0169%" height="15" fill="rgb(209,120,9)"/><text x="43.8645%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.02%)</title><rect x="43.6145%" y="789" width="0.0169%" height="15" fill="rgb(236,68,12)"/><text x="43.8645%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="43.6145%" y="773" width="0.0169%" height="15" fill="rgb(225,194,26)"/><text x="43.8645%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="43.6314%" y="869" width="0.0169%" height="15" fill="rgb(231,84,39)"/><text x="43.8814%" y="879.50"></text></g><g><title>hyper::client::Client&lt;C,B&gt;::request (205 samples, 3.47%)</title><rect x="40.1931%" y="901" width="3.4722%" height="15" fill="rgb(210,11,45)"/><text x="40.4431%" y="911.50">hyp..</text></g><g><title>hyper::client::extract_domain (6 samples, 0.10%)</title><rect x="43.5637%" y="885" width="0.1016%" height="15" fill="rgb(224,54,52)"/><text x="43.8137%" y="895.50"></text></g><g><title>http::uri::Uri::authority (1 samples, 0.02%)</title><rect x="43.6484%" y="869" width="0.0169%" height="15" fill="rgb(238,102,14)"/><text x="43.8984%" y="879.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="43.6484%" y="853" width="0.0169%" height="15" fill="rgb(243,160,52)"/><text x="43.8984%" y="863.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.02%)</title><rect x="43.6653%" y="837" width="0.0169%" height="15" fill="rgb(216,114,19)"/><text x="43.9153%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="43.6653%" y="821" width="0.0169%" height="15" fill="rgb(244,166,37)"/><text x="43.9153%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="43.6653%" y="805" width="0.0169%" height="15" fill="rgb(246,29,44)"/><text x="43.9153%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="43.6653%" y="789" width="0.0169%" height="15" fill="rgb(215,56,53)"/><text x="43.9153%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="43.6653%" y="773" width="0.0169%" height="15" fill="rgb(217,60,2)"/><text x="43.9153%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="43.6653%" y="757" width="0.0169%" height="15" fill="rgb(207,26,24)"/><text x="43.9153%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="43.6653%" y="741" width="0.0169%" height="15" fill="rgb(252,210,15)"/><text x="43.9153%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="43.6653%" y="725" width="0.0169%" height="15" fill="rgb(253,209,26)"/><text x="43.9153%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="43.6653%" y="709" width="0.0169%" height="15" fill="rgb(238,170,14)"/><text x="43.9153%" y="719.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="43.6653%" y="693" width="0.0169%" height="15" fill="rgb(216,178,15)"/><text x="43.9153%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="43.6653%" y="677" width="0.0169%" height="15" fill="rgb(250,197,2)"/><text x="43.9153%" y="687.50"></text></g><g><title>reqwest::async_impl::request::RequestBuilder::send (211 samples, 3.57%)</title><rect x="40.1423%" y="933" width="3.5738%" height="15" fill="rgb(212,70,42)"/><text x="40.3923%" y="943.50">reqw..</text></g><g><title>reqwest::async_impl::client::Client::execute_request (211 samples, 3.57%)</title><rect x="40.1423%" y="917" width="3.5738%" height="15" fill="rgb(227,213,9)"/><text x="40.3923%" y="927.50">reqw..</text></g><g><title>reqwest::into_url::expect_uri (3 samples, 0.05%)</title><rect x="43.6653%" y="901" width="0.0508%" height="15" fill="rgb(245,99,25)"/><text x="43.9153%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 0.05%)</title><rect x="43.6653%" y="885" width="0.0508%" height="15" fill="rgb(250,82,29)"/><text x="43.9153%" y="895.50"></text></g><g><title>&lt;http::uri::Uri as core::str::traits::FromStr&gt;::from_str (3 samples, 0.05%)</title><rect x="43.6653%" y="869" width="0.0508%" height="15" fill="rgb(241,226,54)"/><text x="43.9153%" y="879.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (3 samples, 0.05%)</title><rect x="43.6653%" y="853" width="0.0508%" height="15" fill="rgb(221,99,41)"/><text x="43.9153%" y="863.50"></text></g><g><title>http::uri::Uri::from_shared (2 samples, 0.03%)</title><rect x="43.6822%" y="837" width="0.0339%" height="15" fill="rgb(213,90,21)"/><text x="43.9322%" y="847.50"></text></g><g><title>http::uri::parse_full (1 samples, 0.02%)</title><rect x="43.6992%" y="821" width="0.0169%" height="15" fill="rgb(205,208,24)"/><text x="43.9492%" y="831.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.02%)</title><rect x="43.6992%" y="805" width="0.0169%" height="15" fill="rgb(246,31,12)"/><text x="43.9492%" y="815.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="43.6992%" y="789" width="0.0169%" height="15" fill="rgb(213,154,6)"/><text x="43.9492%" y="799.50"></text></g><g><title>http::uri::path::PathAndQuery::from_shared (1 samples, 0.02%)</title><rect x="43.6992%" y="773" width="0.0169%" height="15" fill="rgb(222,163,29)"/><text x="43.9492%" y="783.50"></text></g><g><title>url::Url::cannot_be_a_base (1 samples, 0.02%)</title><rect x="43.7500%" y="885" width="0.0169%" height="15" fill="rgb(227,201,8)"/><text x="44.0000%" y="895.50"></text></g><g><title>url::Url::slice (1 samples, 0.02%)</title><rect x="43.7500%" y="869" width="0.0169%" height="15" fill="rgb(233,9,32)"/><text x="44.0000%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;u32&gt; as url::RangeArg&gt;::slice_of (1 samples, 0.02%)</title><rect x="43.7500%" y="853" width="0.0169%" height="15" fill="rgb(217,54,24)"/><text x="44.0000%" y="863.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.02%)</title><rect x="43.7500%" y="837" width="0.0169%" height="15" fill="rgb(235,192,0)"/><text x="44.0000%" y="847.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.02%)</title><rect x="43.7500%" y="821" width="0.0169%" height="15" fill="rgb(235,45,9)"/><text x="44.0000%" y="831.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.02%)</title><rect x="43.7500%" y="805" width="0.0169%" height="15" fill="rgb(246,42,40)"/><text x="44.0000%" y="815.50"></text></g><g><title>url::parser::Input::next_utf8 (1 samples, 0.02%)</title><rect x="43.8008%" y="853" width="0.0169%" height="15" fill="rgb(248,111,24)"/><text x="44.0508%" y="863.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="43.8008%" y="837" width="0.0169%" height="15" fill="rgb(249,65,22)"/><text x="44.0508%" y="847.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.02%)</title><rect x="43.8008%" y="821" width="0.0169%" height="15" fill="rgb(238,111,51)"/><text x="44.0508%" y="831.50"></text></g><g><title>url::parser::Parser::check_url_code_point (1 samples, 0.02%)</title><rect x="43.8178%" y="853" width="0.0169%" height="15" fill="rgb(250,118,22)"/><text x="44.0678%" y="863.50"></text></g><g><title>url::parser::Parser::parse_path (4 samples, 0.07%)</title><rect x="43.7839%" y="869" width="0.0678%" height="15" fill="rgb(234,84,26)"/><text x="44.0339%" y="879.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 0.02%)</title><rect x="43.8347%" y="853" width="0.0169%" height="15" fill="rgb(243,172,12)"/><text x="44.0847%" y="863.50"></text></g><g><title>alloc::string::String::len (1 samples, 0.02%)</title><rect x="43.8516%" y="853" width="0.0169%" height="15" fill="rgb(236,150,49)"/><text x="44.1016%" y="863.50"></text></g><g><title>url::parser::Parser::parse_relative (7 samples, 0.12%)</title><rect x="43.7669%" y="885" width="0.1186%" height="15" fill="rgb(225,197,26)"/><text x="44.0169%" y="895.50"></text></g><g><title>url::parser::Parser::pop_path (2 samples, 0.03%)</title><rect x="43.8516%" y="869" width="0.0339%" height="15" fill="rgb(214,17,42)"/><text x="44.1016%" y="879.50"></text></g><g><title>alloc::string::String::truncate (1 samples, 0.02%)</title><rect x="43.8686%" y="853" width="0.0169%" height="15" fill="rgb(224,165,40)"/><text x="44.1186%" y="863.50"></text></g><g><title>alloc::string::String::len (1 samples, 0.02%)</title><rect x="43.8686%" y="837" width="0.0169%" height="15" fill="rgb(246,100,4)"/><text x="44.1186%" y="847.50"></text></g><g><title>url::parser::Parser::parse_scheme (2 samples, 0.03%)</title><rect x="43.8855%" y="885" width="0.0339%" height="15" fill="rgb(222,103,0)"/><text x="44.1355%" y="895.50"></text></g><g><title>url::parser::Input::is_empty (1 samples, 0.02%)</title><rect x="43.9024%" y="869" width="0.0169%" height="15" fill="rgb(227,189,26)"/><text x="44.1524%" y="879.50"></text></g><g><title>&lt;url::parser::Input as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="43.9024%" y="853" width="0.0169%" height="15" fill="rgb(214,202,17)"/><text x="44.1524%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.02%)</title><rect x="43.9024%" y="837" width="0.0169%" height="15" fill="rgb(229,111,3)"/><text x="44.1524%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.02%)</title><rect x="43.9024%" y="821" width="0.0169%" height="15" fill="rgb(229,172,15)"/><text x="44.1524%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.02%)</title><rect x="43.9024%" y="805" width="0.0169%" height="15" fill="rgb(230,224,35)"/><text x="44.1524%" y="815.50"></text></g><g><title>&lt;url::parser::Input as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.02%)</title><rect x="43.9024%" y="789" width="0.0169%" height="15" fill="rgb(251,141,6)"/><text x="44.1524%" y="799.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 0.02%)</title><rect x="43.9194%" y="885" width="0.0169%" height="15" fill="rgb(225,208,6)"/><text x="44.1694%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,469 samples, 24.88%)</title><rect x="19.0718%" y="965" width="24.8814%" height="15" fill="rgb(246,181,16)"/><text x="19.3218%" y="975.50">&lt;core::future::from_generator::GenFuture..</text></g><g><title>elasticsearch::http::transport::Transport::send::{{closure}} (1,468 samples, 24.86%)</title><rect x="19.0888%" y="949" width="24.8645%" height="15" fill="rgb(227,129,36)"/><text x="19.3388%" y="959.50">elasticsearch::http::transport::Transpor..</text></g><g><title>url::Url::join (14 samples, 0.24%)</title><rect x="43.7161%" y="933" width="0.2371%" height="15" fill="rgb(248,117,24)"/><text x="43.9661%" y="943.50"></text></g><g><title>url::ParseOptions::parse (14 samples, 0.24%)</title><rect x="43.7161%" y="917" width="0.2371%" height="15" fill="rgb(214,185,35)"/><text x="43.9661%" y="927.50"></text></g><g><title>url::parser::Parser::parse_url (13 samples, 0.22%)</title><rect x="43.7331%" y="901" width="0.2202%" height="15" fill="rgb(236,150,34)"/><text x="43.9831%" y="911.50"></text></g><g><title>url::parser::SchemeType::from (1 samples, 0.02%)</title><rect x="43.9363%" y="885" width="0.0169%" height="15" fill="rgb(243,228,27)"/><text x="44.1863%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,355 samples, 39.89%)</title><rect x="4.0989%" y="997" width="39.8882%" height="15" fill="rgb(245,77,44)"/><text x="4.3489%" y="1007.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::futu..</text></g><g><title>elasticsearch::root::Bulk&lt;B&gt;::send::{{closure}} (1,471 samples, 24.92%)</title><rect x="19.0718%" y="981" width="24.9153%" height="15" fill="rgb(235,214,42)"/><text x="19.3218%" y="991.50">elasticsearch::root::Bulk&lt;B&gt;::send::{{cl..</text></g><g><title>elasticsearch::root::BulkParts::url (2 samples, 0.03%)</title><rect x="43.9533%" y="965" width="0.0339%" height="15" fill="rgb(221,74,3)"/><text x="44.2033%" y="975.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.03%)</title><rect x="43.9533%" y="949" width="0.0339%" height="15" fill="rgb(206,121,29)"/><text x="44.2033%" y="959.50"></text></g><g><title>percent_encoding::&lt;impl core::convert::From&lt;percent_encoding::PercentEncode&gt; for alloc::borrow::Cow&lt;str&gt;&gt;::from (2 samples, 0.03%)</title><rect x="43.9533%" y="933" width="0.0339%" height="15" fill="rgb(249,131,53)"/><text x="44.2033%" y="943.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.02%)</title><rect x="43.9871%" y="997" width="0.0169%" height="15" fill="rgb(236,170,29)"/><text x="44.2371%" y="1007.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="43.9871%" y="981" width="0.0169%" height="15" fill="rgb(247,96,15)"/><text x="44.2371%" y="991.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="44.0041%" y="869" width="0.0169%" height="15" fill="rgb(211,210,7)"/><text x="44.2541%" y="879.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect x="44.0041%" y="853" width="0.0169%" height="15" fill="rgb(240,88,50)"/><text x="44.2541%" y="863.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="44.0041%" y="837" width="0.0169%" height="15" fill="rgb(209,229,26)"/><text x="44.2541%" y="847.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="44.0041%" y="821" width="0.0169%" height="15" fill="rgb(210,68,23)"/><text x="44.2541%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="44.3259%" y="821" width="0.0169%" height="15" fill="rgb(229,180,13)"/><text x="44.5759%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4 samples, 0.07%)</title><rect x="44.2920%" y="837" width="0.0678%" height="15" fill="rgb(236,53,44)"/><text x="44.5420%" y="847.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.02%)</title><rect x="44.3428%" y="821" width="0.0169%" height="15" fill="rgb(244,214,29)"/><text x="44.5928%" y="831.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.03%)</title><rect x="44.3598%" y="837" width="0.0339%" height="15" fill="rgb(220,75,29)"/><text x="44.6098%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="44.3598%" y="821" width="0.0339%" height="15" fill="rgb(214,183,37)"/><text x="44.6098%" y="831.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3 samples, 0.05%)</title><rect x="44.3936%" y="837" width="0.0508%" height="15" fill="rgb(239,117,29)"/><text x="44.6436%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.03%)</title><rect x="44.4106%" y="821" width="0.0339%" height="15" fill="rgb(237,171,35)"/><text x="44.6606%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (28 samples, 0.47%)</title><rect x="44.0041%" y="885" width="0.4743%" height="15" fill="rgb(229,178,53)"/><text x="44.2541%" y="895.50"></text></g><g><title>core::slice::memchr::memchr (27 samples, 0.46%)</title><rect x="44.0210%" y="869" width="0.4573%" height="15" fill="rgb(210,102,19)"/><text x="44.2710%" y="879.50"></text></g><g><title>core::slice::memchr::memchr_general_case (27 samples, 0.46%)</title><rect x="44.0210%" y="853" width="0.4573%" height="15" fill="rgb(235,127,22)"/><text x="44.2710%" y="863.50"></text></g><g><title>core::slice::memchr::repeat_byte (2 samples, 0.03%)</title><rect x="44.4444%" y="837" width="0.0339%" height="15" fill="rgb(244,31,31)"/><text x="44.6944%" y="847.50"></text></g><g><title>&lt;itertools::groupbylazy::Chunk&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.49%)</title><rect x="44.0041%" y="997" width="0.4912%" height="15" fill="rgb(231,43,21)"/><text x="44.2541%" y="1007.50"></text></g><g><title>itertools::groupbylazy::IntoChunks&lt;I&gt;::step (29 samples, 0.49%)</title><rect x="44.0041%" y="981" width="0.4912%" height="15" fill="rgb(217,131,35)"/><text x="44.2541%" y="991.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::step (29 samples, 0.49%)</title><rect x="44.0041%" y="965" width="0.4912%" height="15" fill="rgb(221,149,4)"/><text x="44.2541%" y="975.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::step_current (29 samples, 0.49%)</title><rect x="44.0041%" y="949" width="0.4912%" height="15" fill="rgb(232,170,28)"/><text x="44.2541%" y="959.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::next_element (29 samples, 0.49%)</title><rect x="44.0041%" y="933" width="0.4912%" height="15" fill="rgb(238,56,10)"/><text x="44.2541%" y="943.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.49%)</title><rect x="44.0041%" y="917" width="0.4912%" height="15" fill="rgb(235,196,14)"/><text x="44.2541%" y="927.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (29 samples, 0.49%)</title><rect x="44.0041%" y="901" width="0.4912%" height="15" fill="rgb(216,45,48)"/><text x="44.2541%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="44.4783%" y="885" width="0.0169%" height="15" fill="rgb(238,213,17)"/><text x="44.7283%" y="895.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="44.4783%" y="869" width="0.0169%" height="15" fill="rgb(212,13,2)"/><text x="44.7283%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="44.4783%" y="853" width="0.0169%" height="15" fill="rgb(240,114,20)"/><text x="44.7283%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="44.4783%" y="837" width="0.0169%" height="15" fill="rgb(228,41,40)"/><text x="44.7283%" y="847.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="44.4953%" y="997" width="0.0169%" height="15" fill="rgb(244,132,35)"/><text x="44.7453%" y="1007.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (2 samples, 0.03%)</title><rect x="44.5630%" y="981" width="0.0339%" height="15" fill="rgb(253,189,4)"/><text x="44.8130%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.03%)</title><rect x="44.5630%" y="965" width="0.0339%" height="15" fill="rgb(224,37,19)"/><text x="44.8130%" y="975.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.03%)</title><rect x="44.5630%" y="949" width="0.0339%" height="15" fill="rgb(235,223,18)"/><text x="44.8130%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.03%)</title><rect x="44.5630%" y="933" width="0.0339%" height="15" fill="rgb(235,163,25)"/><text x="44.8130%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.03%)</title><rect x="44.5630%" y="917" width="0.0339%" height="15" fill="rgb(217,145,28)"/><text x="44.8130%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="44.5630%" y="901" width="0.0339%" height="15" fill="rgb(223,223,32)"/><text x="44.8130%" y="911.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="44.6477%" y="949" width="0.0169%" height="15" fill="rgb(227,189,39)"/><text x="44.8977%" y="959.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="44.7493%" y="885" width="0.0169%" height="15" fill="rgb(248,10,22)"/><text x="44.9993%" y="895.50"></text></g><g><title>&lt;ring::digest::Algorithm as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="44.7493%" y="869" width="0.0169%" height="15" fill="rgb(248,46,39)"/><text x="44.9993%" y="879.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.07%)</title><rect x="44.7663%" y="885" width="0.0678%" height="15" fill="rgb(248,113,48)"/><text x="45.0163%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.05%)</title><rect x="44.7832%" y="869" width="0.0508%" height="15" fill="rgb(245,16,25)"/><text x="45.0332%" y="879.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.05%)</title><rect x="44.7832%" y="853" width="0.0508%" height="15" fill="rgb(249,152,16)"/><text x="45.0332%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.05%)</title><rect x="44.7832%" y="837" width="0.0508%" height="15" fill="rgb(250,16,1)"/><text x="45.0332%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.05%)</title><rect x="44.7832%" y="821" width="0.0508%" height="15" fill="rgb(249,138,3)"/><text x="45.0332%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.05%)</title><rect x="44.7832%" y="805" width="0.0508%" height="15" fill="rgb(227,71,41)"/><text x="45.0332%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="44.8001%" y="789" width="0.0339%" height="15" fill="rgb(209,184,23)"/><text x="45.0501%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="44.8001%" y="773" width="0.0339%" height="15" fill="rgb(223,215,31)"/><text x="45.0501%" y="783.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (7 samples, 0.12%)</title><rect x="44.8679%" y="869" width="0.1186%" height="15" fill="rgb(210,146,28)"/><text x="45.1179%" y="879.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (7 samples, 0.12%)</title><rect x="44.8679%" y="853" width="0.1186%" height="15" fill="rgb(209,183,41)"/><text x="45.1179%" y="863.50"></text></g><g><title>core::fmt::Formatter::write_str (7 samples, 0.12%)</title><rect x="44.8679%" y="837" width="0.1186%" height="15" fill="rgb(209,224,45)"/><text x="45.1179%" y="847.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.12%)</title><rect x="44.8679%" y="821" width="0.1186%" height="15" fill="rgb(224,209,51)"/><text x="45.1179%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.10%)</title><rect x="44.8848%" y="805" width="0.1016%" height="15" fill="rgb(223,17,39)"/><text x="45.1348%" y="815.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.10%)</title><rect x="44.8848%" y="789" width="0.1016%" height="15" fill="rgb(234,204,37)"/><text x="45.1348%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.10%)</title><rect x="44.8848%" y="773" width="0.1016%" height="15" fill="rgb(236,120,5)"/><text x="45.1348%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.10%)</title><rect x="44.8848%" y="757" width="0.1016%" height="15" fill="rgb(248,97,27)"/><text x="45.1348%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.10%)</title><rect x="44.8848%" y="741" width="0.1016%" height="15" fill="rgb(240,66,17)"/><text x="45.1348%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.10%)</title><rect x="44.8848%" y="725" width="0.1016%" height="15" fill="rgb(210,79,3)"/><text x="45.1348%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.10%)</title><rect x="44.8848%" y="709" width="0.1016%" height="15" fill="rgb(214,176,27)"/><text x="45.1348%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.10%)</title><rect x="44.8848%" y="693" width="0.1016%" height="15" fill="rgb(235,185,3)"/><text x="45.1348%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.10%)</title><rect x="44.8848%" y="677" width="0.1016%" height="15" fill="rgb(227,24,12)"/><text x="45.1348%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.10%)</title><rect x="44.8848%" y="661" width="0.1016%" height="15" fill="rgb(252,169,48)"/><text x="45.1348%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.10%)</title><rect x="44.8848%" y="645" width="0.1016%" height="15" fill="rgb(212,65,1)"/><text x="45.1348%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.10%)</title><rect x="44.8848%" y="629" width="0.1016%" height="15" fill="rgb(242,39,24)"/><text x="45.1348%" y="639.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.10%)</title><rect x="44.8848%" y="613" width="0.1016%" height="15" fill="rgb(249,32,23)"/><text x="45.1348%" y="623.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.10%)</title><rect x="44.8848%" y="597" width="0.1016%" height="15" fill="rgb(251,195,23)"/><text x="45.1348%" y="607.50"></text></g><g><title>_int_malloc (4 samples, 0.07%)</title><rect x="44.9187%" y="581" width="0.0678%" height="15" fill="rgb(236,174,8)"/><text x="45.1687%" y="591.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="44.9695%" y="565" width="0.0169%" height="15" fill="rgb(220,197,8)"/><text x="45.2195%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (18 samples, 0.30%)</title><rect x="44.7154%" y="917" width="0.3049%" height="15" fill="rgb(240,108,37)"/><text x="44.9654%" y="927.50"></text></g><g><title>core::fmt::write (16 samples, 0.27%)</title><rect x="44.7493%" y="901" width="0.2710%" height="15" fill="rgb(232,176,24)"/><text x="44.9993%" y="911.50"></text></g><g><title>&lt;ring::digest::AlgorithmID as core::fmt::Debug&gt;::fmt (11 samples, 0.19%)</title><rect x="44.8340%" y="885" width="0.1863%" height="15" fill="rgb(243,35,29)"/><text x="45.0840%" y="895.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (2 samples, 0.03%)</title><rect x="44.9864%" y="869" width="0.0339%" height="15" fill="rgb(210,37,18)"/><text x="45.2364%" y="879.50"></text></g><g><title>core::fmt::Arguments::new_v1_formatted (5 samples, 0.08%)</title><rect x="45.1728%" y="901" width="0.0847%" height="15" fill="rgb(224,184,40)"/><text x="45.4228%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.03%)</title><rect x="47.4932%" y="773" width="0.0339%" height="15" fill="rgb(236,39,29)"/><text x="47.7432%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.25%)</title><rect x="47.3069%" y="869" width="0.2541%" height="15" fill="rgb(232,48,39)"/><text x="47.5569%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.14%)</title><rect x="47.4255%" y="853" width="0.1355%" height="15" fill="rgb(236,34,42)"/><text x="47.6755%" y="863.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.14%)</title><rect x="47.4255%" y="837" width="0.1355%" height="15" fill="rgb(243,106,37)"/><text x="47.6755%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.14%)</title><rect x="47.4255%" y="821" width="0.1355%" height="15" fill="rgb(218,96,6)"/><text x="47.6755%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.14%)</title><rect x="47.4255%" y="805" width="0.1355%" height="15" fill="rgb(235,130,12)"/><text x="47.6755%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.14%)</title><rect x="47.4255%" y="789" width="0.1355%" height="15" fill="rgb(231,95,0)"/><text x="47.6755%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="47.5271%" y="773" width="0.0339%" height="15" fill="rgb(228,12,23)"/><text x="47.7771%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="47.5271%" y="757" width="0.0339%" height="15" fill="rgb(216,12,1)"/><text x="47.7771%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="47.5610%" y="869" width="0.0339%" height="15" fill="rgb(219,59,3)"/><text x="47.8110%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.03%)</title><rect x="47.5610%" y="853" width="0.0339%" height="15" fill="rgb(215,208,46)"/><text x="47.8110%" y="863.50"></text></g><g><title>&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (11 samples, 0.19%)</title><rect x="47.7473%" y="853" width="0.1863%" height="15" fill="rgb(254,224,29)"/><text x="47.9973%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.02%)</title><rect x="48.1369%" y="725" width="0.0169%" height="15" fill="rgb(232,14,29)"/><text x="48.3869%" y="735.50"></text></g><g><title>_int_free (8 samples, 0.14%)</title><rect x="48.7636%" y="565" width="0.1355%" height="15" fill="rgb(208,45,52)"/><text x="49.0136%" y="575.50"></text></g><g><title>_int_malloc (6 samples, 0.10%)</title><rect x="48.8991%" y="565" width="0.1016%" height="15" fill="rgb(234,191,28)"/><text x="49.1491%" y="575.50"></text></g><g><title>__GI___libc_realloc (47 samples, 0.80%)</title><rect x="48.2554%" y="597" width="0.7961%" height="15" fill="rgb(244,67,43)"/><text x="48.5054%" y="607.50"></text></g><g><title>_int_realloc (35 samples, 0.59%)</title><rect x="48.4587%" y="581" width="0.5928%" height="15" fill="rgb(236,189,24)"/><text x="48.7087%" y="591.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.05%)</title><rect x="49.0007%" y="565" width="0.0508%" height="15" fill="rgb(239,214,33)"/><text x="49.2507%" y="575.50"></text></g><g><title>__rdl_realloc (3 samples, 0.05%)</title><rect x="49.0515%" y="597" width="0.0508%" height="15" fill="rgb(226,176,41)"/><text x="49.3015%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.03%)</title><rect x="49.0684%" y="581" width="0.0339%" height="15" fill="rgb(248,47,8)"/><text x="49.3184%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (56 samples, 0.95%)</title><rect x="48.2215%" y="661" width="0.9485%" height="15" fill="rgb(218,81,44)"/><text x="48.4715%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (54 samples, 0.91%)</title><rect x="48.2554%" y="645" width="0.9146%" height="15" fill="rgb(213,98,6)"/><text x="48.5054%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (54 samples, 0.91%)</title><rect x="48.2554%" y="629" width="0.9146%" height="15" fill="rgb(222,85,22)"/><text x="48.5054%" y="639.50"></text></g><g><title>alloc::alloc::realloc (54 samples, 0.91%)</title><rect x="48.2554%" y="613" width="0.9146%" height="15" fill="rgb(239,46,39)"/><text x="48.5054%" y="623.50"></text></g><g><title>__rust_realloc (4 samples, 0.07%)</title><rect x="49.1023%" y="597" width="0.0678%" height="15" fill="rgb(237,12,29)"/><text x="49.3523%" y="607.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="49.1701%" y="661" width="0.0169%" height="15" fill="rgb(214,77,8)"/><text x="49.4201%" y="671.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="49.1701%" y="645" width="0.0169%" height="15" fill="rgb(217,168,37)"/><text x="49.4201%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="49.1701%" y="629" width="0.0169%" height="15" fill="rgb(221,217,23)"/><text x="49.4201%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (63 samples, 1.07%)</title><rect x="48.1538%" y="725" width="1.0671%" height="15" fill="rgb(243,229,36)"/><text x="48.4038%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (63 samples, 1.07%)</title><rect x="48.1538%" y="709" width="1.0671%" height="15" fill="rgb(251,163,40)"/><text x="48.4038%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (63 samples, 1.07%)</title><rect x="48.1538%" y="693" width="1.0671%" height="15" fill="rgb(237,222,12)"/><text x="48.4038%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 1.05%)</title><rect x="48.1707%" y="677" width="1.0501%" height="15" fill="rgb(248,132,6)"/><text x="48.4207%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.03%)</title><rect x="49.1870%" y="661" width="0.0339%" height="15" fill="rgb(227,167,50)"/><text x="49.4370%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned (7 samples, 0.12%)</title><rect x="49.2209%" y="709" width="0.1186%" height="15" fill="rgb(242,84,37)"/><text x="49.4709%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (98 samples, 1.66%)</title><rect x="47.9505%" y="821" width="1.6599%" height="15" fill="rgb(212,4,50)"/><text x="48.2005%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (88 samples, 1.49%)</title><rect x="48.1199%" y="805" width="1.4905%" height="15" fill="rgb(230,228,32)"/><text x="48.3699%" y="815.50"></text></g><g><title>alloc::string::String::push_str (88 samples, 1.49%)</title><rect x="48.1199%" y="789" width="1.4905%" height="15" fill="rgb(248,217,23)"/><text x="48.3699%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (88 samples, 1.49%)</title><rect x="48.1199%" y="773" width="1.4905%" height="15" fill="rgb(238,197,32)"/><text x="48.3699%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (88 samples, 1.49%)</title><rect x="48.1199%" y="757" width="1.4905%" height="15" fill="rgb(236,106,1)"/><text x="48.3699%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (88 samples, 1.49%)</title><rect x="48.1199%" y="741" width="1.4905%" height="15" fill="rgb(219,228,13)"/><text x="48.3699%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.39%)</title><rect x="49.2209%" y="725" width="0.3896%" height="15" fill="rgb(238,30,35)"/><text x="49.4709%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.27%)</title><rect x="49.3394%" y="709" width="0.2710%" height="15" fill="rgb(236,70,23)"/><text x="49.5894%" y="719.50"></text></g><g><title>&lt;core::fmt::num::LowerHex as core::fmt::num::GenericRadix&gt;::digit (17 samples, 0.29%)</title><rect x="49.6104%" y="821" width="0.2879%" height="15" fill="rgb(249,104,48)"/><text x="49.8604%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="49.8984%" y="821" width="0.1186%" height="15" fill="rgb(254,117,50)"/><text x="50.1484%" y="831.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (7 samples, 0.12%)</title><rect x="49.8984%" y="805" width="0.1186%" height="15" fill="rgb(223,152,4)"/><text x="50.1484%" y="815.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::pre_dec_end (7 samples, 0.12%)</title><rect x="49.8984%" y="789" width="0.1186%" height="15" fill="rgb(245,6,2)"/><text x="50.1484%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.12%)</title><rect x="49.8984%" y="773" width="0.1186%" height="15" fill="rgb(249,150,24)"/><text x="50.1484%" y="783.50"></text></g><g><title>&lt;u8 as core::ops::arith::Div&gt;::div (2 samples, 0.03%)</title><rect x="50.0169%" y="821" width="0.0339%" height="15" fill="rgb(228,185,42)"/><text x="50.2669%" y="831.50"></text></g><g><title>&lt;u8 as core::ops::arith::Rem&gt;::rem (1 samples, 0.02%)</title><rect x="50.0508%" y="821" width="0.0169%" height="15" fill="rgb(226,39,33)"/><text x="50.3008%" y="831.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.12%)</title><rect x="50.5589%" y="805" width="0.1186%" height="15" fill="rgb(221,166,19)"/><text x="50.8089%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.10%)</title><rect x="50.5759%" y="789" width="0.1016%" height="15" fill="rgb(209,109,2)"/><text x="50.8259%" y="799.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.10%)</title><rect x="50.5759%" y="773" width="0.1016%" height="15" fill="rgb(252,216,26)"/><text x="50.8259%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.10%)</title><rect x="50.5759%" y="757" width="0.1016%" height="15" fill="rgb(227,173,36)"/><text x="50.8259%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.10%)</title><rect x="50.5759%" y="741" width="0.1016%" height="15" fill="rgb(209,90,7)"/><text x="50.8259%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.10%)</title><rect x="50.5759%" y="725" width="0.1016%" height="15" fill="rgb(250,194,11)"/><text x="50.8259%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.10%)</title><rect x="50.5759%" y="709" width="0.1016%" height="15" fill="rgb(220,72,50)"/><text x="50.8259%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.08%)</title><rect x="50.5928%" y="693" width="0.0847%" height="15" fill="rgb(222,106,48)"/><text x="50.8428%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.08%)</title><rect x="50.5928%" y="677" width="0.0847%" height="15" fill="rgb(216,220,45)"/><text x="50.8428%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.08%)</title><rect x="50.5928%" y="661" width="0.0847%" height="15" fill="rgb(234,112,18)"/><text x="50.8428%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.08%)</title><rect x="50.5928%" y="645" width="0.0847%" height="15" fill="rgb(206,179,9)"/><text x="50.8428%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (5 samples, 0.08%)</title><rect x="50.5928%" y="629" width="0.0847%" height="15" fill="rgb(215,115,40)"/><text x="50.8428%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.08%)</title><rect x="50.5928%" y="613" width="0.0847%" height="15" fill="rgb(222,69,34)"/><text x="50.8428%" y="623.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.08%)</title><rect x="50.5928%" y="597" width="0.0847%" height="15" fill="rgb(209,161,10)"/><text x="50.8428%" y="607.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.08%)</title><rect x="50.5928%" y="581" width="0.0847%" height="15" fill="rgb(217,6,38)"/><text x="50.8428%" y="591.50"></text></g><g><title>_int_realloc (2 samples, 0.03%)</title><rect x="50.6436%" y="565" width="0.0339%" height="15" fill="rgb(229,229,48)"/><text x="50.8936%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.03%)</title><rect x="50.6436%" y="549" width="0.0339%" height="15" fill="rgb(225,21,28)"/><text x="50.8936%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (14 samples, 0.24%)</title><rect x="50.6775%" y="805" width="0.2371%" height="15" fill="rgb(206,33,13)"/><text x="50.9275%" y="815.50"></text></g><g><title>core::fmt::Formatter::padding (4 samples, 0.07%)</title><rect x="50.9146%" y="805" width="0.0678%" height="15" fill="rgb(242,178,17)"/><text x="51.1646%" y="815.50"></text></g><g><title>core::fmt::Formatter::sign_plus (7 samples, 0.12%)</title><rect x="50.9824%" y="805" width="0.1186%" height="15" fill="rgb(220,162,5)"/><text x="51.2324%" y="815.50"></text></g><g><title>core::fmt::Formatter::pad_integral (62 samples, 1.05%)</title><rect x="50.0678%" y="821" width="1.0501%" height="15" fill="rgb(210,33,43)"/><text x="50.3178%" y="831.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="51.1009%" y="805" width="0.0169%" height="15" fill="rgb(216,116,54)"/><text x="51.3509%" y="815.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="51.1009%" y="789" width="0.0169%" height="15" fill="rgb(249,92,24)"/><text x="51.3509%" y="799.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.02%)</title><rect x="51.1009%" y="773" width="0.0169%" height="15" fill="rgb(231,189,14)"/><text x="51.3509%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="51.1009%" y="757" width="0.0169%" height="15" fill="rgb(230,8,41)"/><text x="51.3509%" y="767.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.08%)</title><rect x="51.1179%" y="821" width="0.0847%" height="15" fill="rgb(249,7,27)"/><text x="51.3679%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (13 samples, 0.22%)</title><rect x="51.2026%" y="821" width="0.2202%" height="15" fill="rgb(232,86,5)"/><text x="51.4526%" y="831.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (13 samples, 0.22%)</title><rect x="51.2026%" y="805" width="0.2202%" height="15" fill="rgb(224,175,18)"/><text x="51.4526%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.22%)</title><rect x="51.2026%" y="789" width="0.2202%" height="15" fill="rgb(220,129,12)"/><text x="51.4526%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.22%)</title><rect x="51.2026%" y="773" width="0.2202%" height="15" fill="rgb(210,19,36)"/><text x="51.4526%" y="783.50"></text></g><g><title>core::fmt::run (229 samples, 3.88%)</title><rect x="47.5949%" y="869" width="3.8787%" height="15" fill="rgb(219,96,14)"/><text x="47.8449%" y="879.50">core..</text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i8&gt;::fmt (209 samples, 3.54%)</title><rect x="47.9336%" y="853" width="3.5400%" height="15" fill="rgb(249,106,1)"/><text x="48.1836%" y="863.50">cor..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (209 samples, 3.54%)</title><rect x="47.9336%" y="837" width="3.5400%" height="15" fill="rgb(249,155,20)"/><text x="48.1836%" y="847.50">cor..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.05%)</title><rect x="51.4228%" y="821" width="0.0508%" height="15" fill="rgb(244,168,9)"/><text x="51.6728%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.05%)</title><rect x="51.4228%" y="805" width="0.0508%" height="15" fill="rgb(216,23,50)"/><text x="51.6728%" y="815.50"></text></g><g><title>alloc::fmt::format (412 samples, 6.98%)</title><rect x="44.5122%" y="997" width="6.9783%" height="15" fill="rgb(224,219,20)"/><text x="44.7622%" y="1007.50">alloc::fm..</text></g><g><title>core::fmt::Write::write_fmt (407 samples, 6.89%)</title><rect x="44.5969%" y="981" width="6.8936%" height="15" fill="rgb(222,156,15)"/><text x="44.8469%" y="991.50">core::fmt..</text></g><g><title>core::fmt::write (406 samples, 6.88%)</title><rect x="44.6138%" y="965" width="6.8767%" height="15" fill="rgb(231,97,17)"/><text x="44.8638%" y="975.50">core::fmt..</text></g><g><title>core::fmt::run (403 samples, 6.83%)</title><rect x="44.6646%" y="949" width="6.8259%" height="15" fill="rgb(218,70,48)"/><text x="44.9146%" y="959.50">core::fmt..</text></g><g><title>&lt;ring::digest::Digest as core::fmt::Debug&gt;::fmt (403 samples, 6.83%)</title><rect x="44.6646%" y="933" width="6.8259%" height="15" fill="rgb(212,196,52)"/><text x="44.9146%" y="943.50">&lt;ring::di..</text></g><g><title>ring::debug::write_hex_bytes (382 samples, 6.47%)</title><rect x="45.0203%" y="917" width="6.4702%" height="15" fill="rgb(243,203,18)"/><text x="45.2703%" y="927.50">ring::de..</text></g><g><title>core::fmt::Formatter::write_fmt (368 samples, 6.23%)</title><rect x="45.2575%" y="901" width="6.2331%" height="15" fill="rgb(252,125,41)"/><text x="45.5075%" y="911.50">core::fm..</text></g><g><title>core::fmt::write (278 samples, 4.71%)</title><rect x="46.7818%" y="885" width="4.7087%" height="15" fill="rgb(223,180,33)"/><text x="47.0318%" y="895.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="51.4736%" y="869" width="0.0169%" height="15" fill="rgb(254,159,46)"/><text x="51.7236%" y="879.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="51.4736%" y="853" width="0.0169%" height="15" fill="rgb(254,38,10)"/><text x="51.7236%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.07%)</title><rect x="51.4905%" y="997" width="0.0678%" height="15" fill="rgb(208,217,32)"/><text x="51.7405%" y="1007.50"></text></g><g><title>core::ptr::write (3 samples, 0.05%)</title><rect x="51.5075%" y="981" width="0.0508%" height="15" fill="rgb(221,120,13)"/><text x="51.7575%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (75 samples, 1.27%)</title><rect x="51.5583%" y="997" width="1.2703%" height="15" fill="rgb(246,54,52)"/><text x="51.8083%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (75 samples, 1.27%)</title><rect x="51.5583%" y="981" width="1.2703%" height="15" fill="rgb(242,34,25)"/><text x="51.8083%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (75 samples, 1.27%)</title><rect x="51.5583%" y="965" width="1.2703%" height="15" fill="rgb(247,209,9)"/><text x="51.8083%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (75 samples, 1.27%)</title><rect x="51.5583%" y="949" width="1.2703%" height="15" fill="rgb(228,71,26)"/><text x="51.8083%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (75 samples, 1.27%)</title><rect x="51.5583%" y="933" width="1.2703%" height="15" fill="rgb(222,145,49)"/><text x="51.8083%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 1.27%)</title><rect x="51.5583%" y="917" width="1.2703%" height="15" fill="rgb(218,121,17)"/><text x="51.8083%" y="927.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 1.27%)</title><rect x="51.5583%" y="901" width="1.2703%" height="15" fill="rgb(244,50,7)"/><text x="51.8083%" y="911.50"></text></g><g><title>__GI___libc_malloc (75 samples, 1.27%)</title><rect x="51.5583%" y="885" width="1.2703%" height="15" fill="rgb(246,229,37)"/><text x="51.8083%" y="895.50"></text></g><g><title>_int_malloc (75 samples, 1.27%)</title><rect x="51.5583%" y="869" width="1.2703%" height="15" fill="rgb(225,18,5)"/><text x="51.8083%" y="879.50"></text></g><g><title>malloc_consolidate (67 samples, 1.13%)</title><rect x="51.6938%" y="853" width="1.1348%" height="15" fill="rgb(213,204,8)"/><text x="51.9438%" y="863.50"></text></g><g><title>unlink_chunk.constprop.0 (18 samples, 0.30%)</title><rect x="52.5237%" y="837" width="0.3049%" height="15" fill="rgb(238,103,6)"/><text x="52.7737%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="52.8455%" y="981" width="0.0169%" height="15" fill="rgb(222,25,35)"/><text x="53.0955%" y="991.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="52.8455%" y="965" width="0.0169%" height="15" fill="rgb(213,203,35)"/><text x="53.0955%" y="975.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="52.8455%" y="949" width="0.0169%" height="15" fill="rgb(221,79,53)"/><text x="53.0955%" y="959.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.02%)</title><rect x="52.9302%" y="901" width="0.0169%" height="15" fill="rgb(243,200,35)"/><text x="53.1802%" y="911.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.02%)</title><rect x="52.9302%" y="885" width="0.0169%" height="15" fill="rgb(248,60,25)"/><text x="53.1802%" y="895.50"></text></g><g><title>&lt;core::str::iter::MatchIndices&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="52.9302%" y="965" width="0.0678%" height="15" fill="rgb(227,53,46)"/><text x="53.1802%" y="975.50"></text></g><g><title>core::str::iter::MatchIndicesInternal&lt;P&gt;::next (4 samples, 0.07%)</title><rect x="52.9302%" y="949" width="0.0678%" height="15" fill="rgb(216,120,32)"/><text x="53.1802%" y="959.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (4 samples, 0.07%)</title><rect x="52.9302%" y="933" width="0.0678%" height="15" fill="rgb(220,134,1)"/><text x="53.1802%" y="943.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (4 samples, 0.07%)</title><rect x="52.9302%" y="917" width="0.0678%" height="15" fill="rgb(237,168,5)"/><text x="53.1802%" y="927.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_contains (3 samples, 0.05%)</title><rect x="52.9472%" y="901" width="0.0508%" height="15" fill="rgb(231,100,33)"/><text x="53.1972%" y="911.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="53.0318%" y="821" width="0.0169%" height="15" fill="rgb(236,177,47)"/><text x="53.2818%" y="831.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="53.0318%" y="805" width="0.0169%" height="15" fill="rgb(235,7,49)"/><text x="53.2818%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="53.0318%" y="837" width="0.0339%" height="15" fill="rgb(232,119,22)"/><text x="53.2818%" y="847.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="53.0488%" y="821" width="0.0169%" height="15" fill="rgb(254,73,53)"/><text x="53.2988%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="53.0488%" y="805" width="0.0169%" height="15" fill="rgb(251,35,20)"/><text x="53.2988%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.07%)</title><rect x="53.0149%" y="901" width="0.0678%" height="15" fill="rgb(241,119,20)"/><text x="53.2649%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.05%)</title><rect x="53.0318%" y="885" width="0.0508%" height="15" fill="rgb(207,102,14)"/><text x="53.2818%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.05%)</title><rect x="53.0318%" y="869" width="0.0508%" height="15" fill="rgb(248,201,50)"/><text x="53.2818%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.05%)</title><rect x="53.0318%" y="853" width="0.0508%" height="15" fill="rgb(222,185,44)"/><text x="53.2818%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="53.0657%" y="837" width="0.0169%" height="15" fill="rgb(218,107,18)"/><text x="53.3157%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.02%)</title><rect x="53.0657%" y="821" width="0.0169%" height="15" fill="rgb(237,177,39)"/><text x="53.3157%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="53.0657%" y="805" width="0.0169%" height="15" fill="rgb(246,69,6)"/><text x="53.3157%" y="815.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="53.0657%" y="789" width="0.0169%" height="15" fill="rgb(234,208,37)"/><text x="53.3157%" y="799.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="53.0657%" y="773" width="0.0169%" height="15" fill="rgb(225,4,6)"/><text x="53.3157%" y="783.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="53.0657%" y="757" width="0.0169%" height="15" fill="rgb(233,45,0)"/><text x="53.3157%" y="767.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.10%)</title><rect x="52.9980%" y="965" width="0.1016%" height="15" fill="rgb(226,136,5)"/><text x="53.2480%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.10%)</title><rect x="52.9980%" y="949" width="0.1016%" height="15" fill="rgb(211,91,47)"/><text x="53.2480%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.10%)</title><rect x="52.9980%" y="933" width="0.1016%" height="15" fill="rgb(242,88,51)"/><text x="53.2480%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.10%)</title><rect x="52.9980%" y="917" width="0.1016%" height="15" fill="rgb(230,91,28)"/><text x="53.2480%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="53.0827%" y="901" width="0.0169%" height="15" fill="rgb(254,186,29)"/><text x="53.3327%" y="911.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="53.0827%" y="885" width="0.0169%" height="15" fill="rgb(238,6,4)"/><text x="53.3327%" y="895.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.02%)</title><rect x="53.1165%" y="917" width="0.0169%" height="15" fill="rgb(221,151,16)"/><text x="53.3665%" y="927.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (20 samples, 0.34%)</title><rect x="52.8625%" y="981" width="0.3388%" height="15" fill="rgb(251,143,52)"/><text x="53.1125%" y="991.50"></text></g><g><title>core::str::&lt;impl str&gt;::match_indices (6 samples, 0.10%)</title><rect x="53.0996%" y="965" width="0.1016%" height="15" fill="rgb(206,90,15)"/><text x="53.3496%" y="975.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (6 samples, 0.10%)</title><rect x="53.0996%" y="949" width="0.1016%" height="15" fill="rgb(218,35,8)"/><text x="53.3496%" y="959.50"></text></g><g><title>core::str::pattern::StrSearcher::new (6 samples, 0.10%)</title><rect x="53.0996%" y="933" width="0.1016%" height="15" fill="rgb(239,215,6)"/><text x="53.3496%" y="943.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (4 samples, 0.07%)</title><rect x="53.1335%" y="917" width="0.0678%" height="15" fill="rgb(245,116,39)"/><text x="53.3835%" y="927.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.07%)</title><rect x="53.1335%" y="901" width="0.0678%" height="15" fill="rgb(242,65,28)"/><text x="53.3835%" y="911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.07%)</title><rect x="53.1335%" y="885" width="0.0678%" height="15" fill="rgb(252,132,53)"/><text x="53.3835%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (1 samples, 0.02%)</title><rect x="53.2012%" y="981" width="0.0169%" height="15" fill="rgb(224,159,50)"/><text x="53.4512%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (1 samples, 0.02%)</title><rect x="53.2012%" y="965" width="0.0169%" height="15" fill="rgb(224,93,4)"/><text x="53.4512%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="53.2012%" y="949" width="0.0169%" height="15" fill="rgb(208,81,34)"/><text x="53.4512%" y="959.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="53.2012%" y="933" width="0.0169%" height="15" fill="rgb(233,92,54)"/><text x="53.4512%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="53.2012%" y="917" width="0.0169%" height="15" fill="rgb(237,21,14)"/><text x="53.4512%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="53.2012%" y="901" width="0.0169%" height="15" fill="rgb(249,128,51)"/><text x="53.4512%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="53.2012%" y="885" width="0.0169%" height="15" fill="rgb(223,129,24)"/><text x="53.4512%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="53.2012%" y="869" width="0.0169%" height="15" fill="rgb(231,168,25)"/><text x="53.4512%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="53.2012%" y="853" width="0.0169%" height="15" fill="rgb(224,39,20)"/><text x="53.4512%" y="863.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="53.2012%" y="837" width="0.0169%" height="15" fill="rgb(225,152,53)"/><text x="53.4512%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.03%)</title><rect x="53.2182%" y="981" width="0.0339%" height="15" fill="rgb(252,17,24)"/><text x="53.4682%" y="991.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="53.2351%" y="965" width="0.0169%" height="15" fill="rgb(250,114,30)"/><text x="53.4851%" y="975.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="53.2520%" y="949" width="0.0169%" height="15" fill="rgb(229,5,4)"/><text x="53.5020%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (7 samples, 0.12%)</title><rect x="53.3028%" y="917" width="0.1186%" height="15" fill="rgb(225,176,49)"/><text x="53.5528%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (7 samples, 0.12%)</title><rect x="53.3028%" y="901" width="0.1186%" height="15" fill="rgb(224,221,49)"/><text x="53.5528%" y="911.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="53.3367%" y="885" width="0.0847%" height="15" fill="rgb(253,169,27)"/><text x="53.5867%" y="895.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3 samples, 0.05%)</title><rect x="53.3706%" y="869" width="0.0508%" height="15" fill="rgb(211,206,16)"/><text x="53.6206%" y="879.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.05%)</title><rect x="53.3706%" y="853" width="0.0508%" height="15" fill="rgb(244,87,35)"/><text x="53.6206%" y="863.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.05%)</title><rect x="53.3706%" y="837" width="0.0508%" height="15" fill="rgb(246,28,10)"/><text x="53.6206%" y="847.50"></text></g><g><title>core::slice::memchr::memchr_general_case (3 samples, 0.05%)</title><rect x="53.3706%" y="821" width="0.0508%" height="15" fill="rgb(229,12,44)"/><text x="53.6206%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="53.4045%" y="805" width="0.0169%" height="15" fill="rgb(210,145,37)"/><text x="53.6545%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.02%)</title><rect x="53.4214%" y="869" width="0.0169%" height="15" fill="rgb(227,112,52)"/><text x="53.6714%" y="879.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.02%)</title><rect x="53.4214%" y="853" width="0.0169%" height="15" fill="rgb(238,155,34)"/><text x="53.6714%" y="863.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="53.4214%" y="837" width="0.0169%" height="15" fill="rgb(239,226,36)"/><text x="53.6714%" y="847.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="53.4214%" y="821" width="0.0169%" height="15" fill="rgb(230,16,23)"/><text x="53.6714%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="53.4383%" y="853" width="0.0169%" height="15" fill="rgb(236,171,36)"/><text x="53.6883%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.02%)</title><rect x="53.7432%" y="837" width="0.0169%" height="15" fill="rgb(221,22,14)"/><text x="53.9932%" y="847.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.02%)</title><rect x="53.7432%" y="821" width="0.0169%" height="15" fill="rgb(242,43,11)"/><text x="53.9932%" y="831.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (21 samples, 0.36%)</title><rect x="53.4214%" y="885" width="0.3557%" height="15" fill="rgb(232,69,23)"/><text x="53.6714%" y="895.50"></text></g><g><title>core::slice::memchr::memchr (20 samples, 0.34%)</title><rect x="53.4383%" y="869" width="0.3388%" height="15" fill="rgb(216,180,54)"/><text x="53.6883%" y="879.50"></text></g><g><title>core::slice::memchr::memchr_general_case (19 samples, 0.32%)</title><rect x="53.4553%" y="853" width="0.3218%" height="15" fill="rgb(216,5,24)"/><text x="53.7053%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="53.7602%" y="837" width="0.0169%" height="15" fill="rgb(225,89,9)"/><text x="54.0102%" y="847.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="53.7602%" y="821" width="0.0169%" height="15" fill="rgb(243,75,33)"/><text x="54.0102%" y="831.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.37%)</title><rect x="53.4214%" y="917" width="0.3726%" height="15" fill="rgb(247,141,45)"/><text x="53.6714%" y="927.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (22 samples, 0.37%)</title><rect x="53.4214%" y="901" width="0.3726%" height="15" fill="rgb(232,177,36)"/><text x="53.6714%" y="911.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1 samples, 0.02%)</title><rect x="53.7771%" y="885" width="0.0169%" height="15" fill="rgb(219,125,36)"/><text x="54.0271%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.68%)</title><rect x="53.2520%" y="981" width="0.6775%" height="15" fill="rgb(227,94,9)"/><text x="53.5020%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 0.68%)</title><rect x="53.2520%" y="965" width="0.6775%" height="15" fill="rgb(240,34,52)"/><text x="53.5020%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 0.66%)</title><rect x="53.2690%" y="949" width="0.6606%" height="15" fill="rgb(216,45,12)"/><text x="53.5190%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (37 samples, 0.63%)</title><rect x="53.3028%" y="933" width="0.6267%" height="15" fill="rgb(246,21,19)"/><text x="53.5528%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.14%)</title><rect x="53.7940%" y="917" width="0.1355%" height="15" fill="rgb(213,98,42)"/><text x="54.0440%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.14%)</title><rect x="53.7940%" y="901" width="0.1355%" height="15" fill="rgb(250,136,47)"/><text x="54.0440%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.14%)</title><rect x="53.7940%" y="885" width="0.1355%" height="15" fill="rgb(251,124,27)"/><text x="54.0440%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.14%)</title><rect x="53.7940%" y="869" width="0.1355%" height="15" fill="rgb(229,180,14)"/><text x="54.0440%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.14%)</title><rect x="53.7940%" y="853" width="0.1355%" height="15" fill="rgb(245,216,25)"/><text x="54.0440%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.14%)</title><rect x="53.7940%" y="837" width="0.1355%" height="15" fill="rgb(251,43,5)"/><text x="54.0440%" y="847.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.14%)</title><rect x="53.7940%" y="821" width="0.1355%" height="15" fill="rgb(250,128,24)"/><text x="54.0440%" y="831.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.14%)</title><rect x="53.7940%" y="805" width="0.1355%" height="15" fill="rgb(217,117,27)"/><text x="54.0440%" y="815.50"></text></g><g><title>_int_malloc (5 samples, 0.08%)</title><rect x="53.8449%" y="789" width="0.0847%" height="15" fill="rgb(245,147,4)"/><text x="54.0949%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="53.9295%" y="949" width="0.0169%" height="15" fill="rgb(242,201,35)"/><text x="54.1795%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.02%)</title><rect x="53.9295%" y="933" width="0.0169%" height="15" fill="rgb(218,181,1)"/><text x="54.1795%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="53.9295%" y="917" width="0.0169%" height="15" fill="rgb(222,6,29)"/><text x="54.1795%" y="927.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="53.9295%" y="901" width="0.0169%" height="15" fill="rgb(208,186,3)"/><text x="54.1795%" y="911.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="53.9465%" y="885" width="0.0169%" height="15" fill="rgb(216,36,26)"/><text x="54.1965%" y="895.50"></text></g><g><title>cf_log_sender::update_keys_from_header (69 samples, 1.17%)</title><rect x="52.8286%" y="997" width="1.1687%" height="15" fill="rgb(248,201,23)"/><text x="53.0786%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="53.9295%" y="981" width="0.0678%" height="15" fill="rgb(251,170,31)"/><text x="54.1795%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.07%)</title><rect x="53.9295%" y="965" width="0.0678%" height="15" fill="rgb(207,110,25)"/><text x="54.1795%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.05%)</title><rect x="53.9465%" y="949" width="0.0508%" height="15" fill="rgb(250,54,15)"/><text x="54.1965%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="53.9465%" y="933" width="0.0508%" height="15" fill="rgb(227,68,33)"/><text x="54.1965%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.05%)</title><rect x="53.9465%" y="917" width="0.0508%" height="15" fill="rgb(238,34,41)"/><text x="54.1965%" y="927.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="53.9465%" y="901" width="0.0508%" height="15" fill="rgb(220,11,15)"/><text x="54.1965%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="53.9634%" y="885" width="0.0339%" height="15" fill="rgb(246,111,35)"/><text x="54.2134%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="54.1667%" y="869" width="0.0678%" height="15" fill="rgb(209,88,53)"/><text x="54.4167%" y="879.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.30%)</title><rect x="54.5393%" y="789" width="0.3049%" height="15" fill="rgb(231,185,47)"/><text x="54.7893%" y="799.50"></text></g><g><title>__memcmp_avx2_movbe (12 samples, 0.20%)</title><rect x="54.6409%" y="773" width="0.2033%" height="15" fill="rgb(233,154,1)"/><text x="54.8909%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.34%)</title><rect x="54.5393%" y="821" width="0.3388%" height="15" fill="rgb(225,15,46)"/><text x="54.7893%" y="831.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (20 samples, 0.34%)</title><rect x="54.5393%" y="805" width="0.3388%" height="15" fill="rgb(211,135,41)"/><text x="54.7893%" y="815.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="54.8442%" y="789" width="0.0339%" height="15" fill="rgb(208,54,0)"/><text x="55.0942%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.17%)</title><rect x="56.2331%" y="773" width="0.1694%" height="15" fill="rgb(244,136,14)"/><text x="56.4831%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (22 samples, 0.37%)</title><rect x="56.0806%" y="789" width="0.3726%" height="15" fill="rgb(241,56,14)"/><text x="56.3306%" y="799.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (3 samples, 0.05%)</title><rect x="56.4024%" y="773" width="0.0508%" height="15" fill="rgb(205,80,24)"/><text x="56.6524%" y="783.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.10%)</title><rect x="56.4533%" y="789" width="0.1016%" height="15" fill="rgb(220,57,4)"/><text x="56.7033%" y="799.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.10%)</title><rect x="56.4533%" y="773" width="0.1016%" height="15" fill="rgb(226,193,50)"/><text x="56.7033%" y="783.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3 samples, 0.05%)</title><rect x="56.5549%" y="789" width="0.0508%" height="15" fill="rgb(231,168,22)"/><text x="56.8049%" y="799.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (135 samples, 2.29%)</title><rect x="54.3699%" y="837" width="2.2866%" height="15" fill="rgb(254,215,14)"/><text x="54.6199%" y="847.50">&lt;..</text></g><g><title>core::slice::memchr::memchr (105 samples, 1.78%)</title><rect x="54.8780%" y="821" width="1.7785%" height="15" fill="rgb(211,115,16)"/><text x="55.1280%" y="831.50">c..</text></g><g><title>core::slice::memchr::memchr_general_case (100 samples, 1.69%)</title><rect x="54.9627%" y="805" width="1.6938%" height="15" fill="rgb(236,210,16)"/><text x="55.2127%" y="815.50"></text></g><g><title>core::slice::memchr::repeat_byte (3 samples, 0.05%)</title><rect x="56.6057%" y="789" width="0.0508%" height="15" fill="rgb(221,94,12)"/><text x="56.8557%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 2.56%)</title><rect x="54.1159%" y="901" width="2.5576%" height="15" fill="rgb(235,218,49)"/><text x="54.3659%" y="911.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (151 samples, 2.56%)</title><rect x="54.1159%" y="885" width="2.5576%" height="15" fill="rgb(217,114,14)"/><text x="54.3659%" y="895.50">&lt;c..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 2.44%)</title><rect x="54.2344%" y="869" width="2.4390%" height="15" fill="rgb(216,145,22)"/><text x="54.4844%" y="879.50">&lt;c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (139 samples, 2.35%)</title><rect x="54.3191%" y="853" width="2.3543%" height="15" fill="rgb(217,112,39)"/><text x="54.5691%" y="863.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="56.6565%" y="837" width="0.0169%" height="15" fill="rgb(225,85,32)"/><text x="56.9065%" y="847.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="56.6565%" y="821" width="0.0169%" height="15" fill="rgb(245,209,47)"/><text x="56.9065%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="56.6565%" y="805" width="0.0169%" height="15" fill="rgb(218,220,15)"/><text x="56.9065%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="56.6565%" y="789" width="0.0169%" height="15" fill="rgb(222,202,31)"/><text x="56.9065%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.12%)</title><rect x="56.7073%" y="853" width="0.1186%" height="15" fill="rgb(243,203,4)"/><text x="56.9573%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="57.2324%" y="773" width="0.0169%" height="15" fill="rgb(237,92,17)"/><text x="57.4824%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.14%)</title><rect x="57.2154%" y="789" width="0.1355%" height="15" fill="rgb(231,119,7)"/><text x="57.4654%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.10%)</title><rect x="57.2493%" y="773" width="0.1016%" height="15" fill="rgb(237,82,41)"/><text x="57.4993%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.30%)</title><rect x="57.4864%" y="773" width="0.3049%" height="15" fill="rgb(226,81,48)"/><text x="57.7364%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (59 samples, 1.00%)</title><rect x="56.8767%" y="837" width="0.9993%" height="15" fill="rgb(234,70,51)"/><text x="57.1267%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (59 samples, 1.00%)</title><rect x="56.8767%" y="821" width="0.9993%" height="15" fill="rgb(251,86,4)"/><text x="57.1267%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (59 samples, 1.00%)</title><rect x="56.8767%" y="805" width="0.9993%" height="15" fill="rgb(244,144,28)"/><text x="57.1267%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31 samples, 0.53%)</title><rect x="57.3509%" y="789" width="0.5251%" height="15" fill="rgb(232,161,39)"/><text x="57.6009%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.08%)</title><rect x="57.7913%" y="773" width="0.0847%" height="15" fill="rgb(247,34,51)"/><text x="58.0413%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (28 samples, 0.47%)</title><rect x="57.8760%" y="837" width="0.4743%" height="15" fill="rgb(225,132,2)"/><text x="58.1260%" y="847.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (20 samples, 0.34%)</title><rect x="58.0115%" y="821" width="0.3388%" height="15" fill="rgb(209,159,44)"/><text x="58.2615%" y="831.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (20 samples, 0.34%)</title><rect x="58.0115%" y="805" width="0.3388%" height="15" fill="rgb(251,214,1)"/><text x="58.2615%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (20 samples, 0.34%)</title><rect x="58.0115%" y="789" width="0.3388%" height="15" fill="rgb(247,84,47)"/><text x="58.2615%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="58.3503%" y="805" width="0.0169%" height="15" fill="rgb(240,111,43)"/><text x="58.6003%" y="815.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="58.3503%" y="789" width="0.0169%" height="15" fill="rgb(215,214,35)"/><text x="58.6003%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.20%)</title><rect x="58.6890%" y="725" width="0.2033%" height="15" fill="rgb(248,207,23)"/><text x="58.9390%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 0.39%)</title><rect x="58.5705%" y="741" width="0.3896%" height="15" fill="rgb(214,186,4)"/><text x="58.8205%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.07%)</title><rect x="58.8923%" y="725" width="0.0678%" height="15" fill="rgb(220,133,22)"/><text x="59.1423%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="58.9600%" y="741" width="0.0339%" height="15" fill="rgb(239,134,19)"/><text x="59.2100%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.08%)</title><rect x="59.2141%" y="725" width="0.0847%" height="15" fill="rgb(250,140,9)"/><text x="59.4641%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (58 samples, 0.98%)</title><rect x="58.3841%" y="757" width="0.9824%" height="15" fill="rgb(225,59,14)"/><text x="58.6341%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (22 samples, 0.37%)</title><rect x="58.9939%" y="741" width="0.3726%" height="15" fill="rgb(214,152,51)"/><text x="59.2439%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.07%)</title><rect x="59.2988%" y="725" width="0.0678%" height="15" fill="rgb(251,227,43)"/><text x="59.5488%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (71 samples, 1.20%)</title><rect x="58.3672%" y="789" width="1.2026%" height="15" fill="rgb(241,96,17)"/><text x="58.6172%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (70 samples, 1.19%)</title><rect x="58.3841%" y="773" width="1.1856%" height="15" fill="rgb(234,198,43)"/><text x="58.6341%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.20%)</title><rect x="59.3665%" y="757" width="0.2033%" height="15" fill="rgb(220,108,29)"/><text x="59.6165%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="59.8577%" y="725" width="0.0169%" height="15" fill="rgb(226,163,33)"/><text x="60.1077%" y="735.50"></text></g><g><title>core::cmp::min (1 samples, 0.02%)</title><rect x="59.8747%" y="725" width="0.0169%" height="15" fill="rgb(205,194,45)"/><text x="60.1247%" y="735.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.02%)</title><rect x="59.8747%" y="709" width="0.0169%" height="15" fill="rgb(206,143,44)"/><text x="60.1247%" y="719.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.02%)</title><rect x="59.8747%" y="693" width="0.0169%" height="15" fill="rgb(236,136,36)"/><text x="60.1247%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (192 samples, 3.25%)</title><rect x="56.8259%" y="853" width="3.2520%" height="15" fill="rgb(249,172,42)"/><text x="57.0759%" y="863.50">has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (102 samples, 1.73%)</title><rect x="58.3503%" y="837" width="1.7276%" height="15" fill="rgb(216,139,23)"/><text x="58.6003%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (102 samples, 1.73%)</title><rect x="58.3503%" y="821" width="1.7276%" height="15" fill="rgb(207,166,20)"/><text x="58.6003%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (101 samples, 1.71%)</title><rect x="58.3672%" y="805" width="1.7107%" height="15" fill="rgb(210,209,22)"/><text x="58.6172%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u8 (30 samples, 0.51%)</title><rect x="59.5698%" y="789" width="0.5081%" height="15" fill="rgb(232,118,20)"/><text x="59.8198%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.47%)</title><rect x="59.6037%" y="773" width="0.4743%" height="15" fill="rgb(238,113,42)"/><text x="59.8537%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (26 samples, 0.44%)</title><rect x="59.6375%" y="757" width="0.4404%" height="15" fill="rgb(231,42,5)"/><text x="59.8875%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.44%)</title><rect x="59.6375%" y="741" width="0.4404%" height="15" fill="rgb(243,166,24)"/><text x="59.8875%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.19%)</title><rect x="59.8916%" y="725" width="0.1863%" height="15" fill="rgb(237,226,12)"/><text x="60.1416%" y="735.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.07%)</title><rect x="60.1287%" y="821" width="0.0678%" height="15" fill="rgb(229,133,24)"/><text x="60.3787%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="60.1965%" y="821" width="0.0508%" height="15" fill="rgb(238,33,43)"/><text x="60.4465%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.17%)</title><rect x="60.1118%" y="837" width="0.1694%" height="15" fill="rgb(227,59,38)"/><text x="60.3618%" y="847.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (2 samples, 0.03%)</title><rect x="60.2473%" y="821" width="0.0339%" height="15" fill="rgb(230,97,0)"/><text x="60.4973%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (2 samples, 0.03%)</title><rect x="60.2812%" y="837" width="0.0339%" height="15" fill="rgb(250,173,50)"/><text x="60.5312%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.03%)</title><rect x="60.2812%" y="821" width="0.0339%" height="15" fill="rgb(240,15,50)"/><text x="60.5312%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.03%)</title><rect x="60.2812%" y="805" width="0.0339%" height="15" fill="rgb(221,93,22)"/><text x="60.5312%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (2 samples, 0.03%)</title><rect x="60.2812%" y="789" width="0.0339%" height="15" fill="rgb(245,180,53)"/><text x="60.5312%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.03%)</title><rect x="60.2812%" y="773" width="0.0339%" height="15" fill="rgb(231,88,51)"/><text x="60.5312%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="60.3150%" y="805" width="0.0678%" height="15" fill="rgb(240,58,21)"/><text x="60.5650%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (3 samples, 0.05%)</title><rect x="60.3828%" y="805" width="0.0508%" height="15" fill="rgb(237,21,10)"/><text x="60.6328%" y="815.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.03%)</title><rect x="60.4336%" y="805" width="0.0339%" height="15" fill="rgb(218,43,11)"/><text x="60.6836%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.05%)</title><rect x="60.4675%" y="805" width="0.0508%" height="15" fill="rgb(218,221,29)"/><text x="60.7175%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.05%)</title><rect x="60.4675%" y="789" width="0.0508%" height="15" fill="rgb(214,118,42)"/><text x="60.7175%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="60.4675%" y="773" width="0.0508%" height="15" fill="rgb(251,200,26)"/><text x="60.7175%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (36 samples, 0.61%)</title><rect x="60.0779%" y="853" width="0.6098%" height="15" fill="rgb(237,101,39)"/><text x="60.3279%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (22 samples, 0.37%)</title><rect x="60.3150%" y="837" width="0.3726%" height="15" fill="rgb(251,117,11)"/><text x="60.5650%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (22 samples, 0.37%)</title><rect x="60.3150%" y="821" width="0.3726%" height="15" fill="rgb(216,223,23)"/><text x="60.5650%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (10 samples, 0.17%)</title><rect x="60.5183%" y="805" width="0.1694%" height="15" fill="rgb(251,54,12)"/><text x="60.7683%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (10 samples, 0.17%)</title><rect x="60.5183%" y="789" width="0.1694%" height="15" fill="rgb(254,176,54)"/><text x="60.7683%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (10 samples, 0.17%)</title><rect x="60.5183%" y="773" width="0.1694%" height="15" fill="rgb(210,32,8)"/><text x="60.7683%" y="783.50"></text></g><g><title>core::core_arch::simd::i8x16::new (10 samples, 0.17%)</title><rect x="60.5183%" y="757" width="0.1694%" height="15" fill="rgb(235,52,38)"/><text x="60.7683%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (6 samples, 0.10%)</title><rect x="60.9925%" y="837" width="0.1016%" height="15" fill="rgb(231,4,44)"/><text x="61.2425%" y="847.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.10%)</title><rect x="60.9925%" y="821" width="0.1016%" height="15" fill="rgb(249,2,32)"/><text x="61.2425%" y="831.50"></text></g><g><title>core::ptr::write (6 samples, 0.10%)</title><rect x="60.9925%" y="805" width="0.1016%" height="15" fill="rgb(224,65,26)"/><text x="61.2425%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="61.3482%" y="821" width="0.0508%" height="15" fill="rgb(250,73,40)"/><text x="61.5982%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (5 samples, 0.08%)</title><rect x="61.3991%" y="821" width="0.0847%" height="15" fill="rgb(253,177,16)"/><text x="61.6491%" y="831.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.12%)</title><rect x="61.4837%" y="821" width="0.1186%" height="15" fill="rgb(217,32,34)"/><text x="61.7337%" y="831.50"></text></g><g><title>hashbrown::raw::is_full (18 samples, 0.30%)</title><rect x="61.6023%" y="821" width="0.3049%" height="15" fill="rgb(212,7,10)"/><text x="61.8523%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (52 samples, 0.88%)</title><rect x="61.0942%" y="837" width="0.8808%" height="15" fill="rgb(245,89,8)"/><text x="61.3442%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.07%)</title><rect x="61.9072%" y="821" width="0.0678%" height="15" fill="rgb(237,16,53)"/><text x="62.1572%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.07%)</title><rect x="61.9072%" y="805" width="0.0678%" height="15" fill="rgb(250,204,30)"/><text x="62.1572%" y="815.50"></text></g><g><title>core::mem::swap (5 samples, 0.08%)</title><rect x="62.0427%" y="789" width="0.0847%" height="15" fill="rgb(208,77,27)"/><text x="62.2927%" y="799.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (5 samples, 0.08%)</title><rect x="62.0427%" y="773" width="0.0847%" height="15" fill="rgb(250,204,28)"/><text x="62.2927%" y="783.50"></text></g><g><title>core::ptr::swap_nonoverlapping (5 samples, 0.08%)</title><rect x="62.0427%" y="757" width="0.0847%" height="15" fill="rgb(244,63,21)"/><text x="62.2927%" y="767.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (5 samples, 0.08%)</title><rect x="62.0427%" y="741" width="0.0847%" height="15" fill="rgb(236,85,44)"/><text x="62.2927%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.08%)</title><rect x="62.0427%" y="725" width="0.0847%" height="15" fill="rgb(215,98,4)"/><text x="62.2927%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="62.1274%" y="709" width="0.0169%" height="15" fill="rgb(235,38,11)"/><text x="62.3774%" y="719.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="62.1443%" y="709" width="0.0169%" height="15" fill="rgb(254,186,25)"/><text x="62.3943%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.14%)</title><rect x="62.1274%" y="725" width="0.1355%" height="15" fill="rgb(225,55,31)"/><text x="62.3774%" y="735.50"></text></g><g><title>_int_free (6 samples, 0.10%)</title><rect x="62.1612%" y="709" width="0.1016%" height="15" fill="rgb(211,15,21)"/><text x="62.4112%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.15%)</title><rect x="62.1274%" y="789" width="0.1524%" height="15" fill="rgb(215,187,41)"/><text x="62.3774%" y="799.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.15%)</title><rect x="62.1274%" y="773" width="0.1524%" height="15" fill="rgb(248,69,32)"/><text x="62.3774%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (9 samples, 0.15%)</title><rect x="62.1274%" y="757" width="0.1524%" height="15" fill="rgb(252,102,52)"/><text x="62.3774%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (9 samples, 0.15%)</title><rect x="62.1274%" y="741" width="0.1524%" height="15" fill="rgb(253,140,32)"/><text x="62.3774%" y="751.50"></text></g><g><title>hashbrown::raw::calculate_layout (1 samples, 0.02%)</title><rect x="62.2629%" y="725" width="0.0169%" height="15" fill="rgb(216,56,42)"/><text x="62.5129%" y="735.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.02%)</title><rect x="62.2629%" y="709" width="0.0169%" height="15" fill="rgb(216,184,14)"/><text x="62.5129%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="62.2629%" y="693" width="0.0169%" height="15" fill="rgb(237,187,27)"/><text x="62.5129%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="62.2629%" y="677" width="0.0169%" height="15" fill="rgb(219,65,3)"/><text x="62.5129%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.05%)</title><rect x="62.6524%" y="693" width="0.0508%" height="15" fill="rgb(245,83,25)"/><text x="62.9024%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.08%)</title><rect x="62.6524%" y="709" width="0.0847%" height="15" fill="rgb(214,205,45)"/><text x="62.9024%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.03%)</title><rect x="62.7033%" y="693" width="0.0339%" height="15" fill="rgb(241,20,18)"/><text x="62.9533%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (24 samples, 0.41%)</title><rect x="62.8218%" y="693" width="0.4065%" height="15" fill="rgb(232,163,23)"/><text x="63.0718%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (64 samples, 1.08%)</title><rect x="62.3645%" y="757" width="1.0840%" height="15" fill="rgb(214,5,46)"/><text x="62.6145%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (64 samples, 1.08%)</title><rect x="62.3645%" y="741" width="1.0840%" height="15" fill="rgb(229,78,17)"/><text x="62.6145%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (64 samples, 1.08%)</title><rect x="62.3645%" y="725" width="1.0840%" height="15" fill="rgb(248,89,10)"/><text x="62.6145%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (42 samples, 0.71%)</title><rect x="62.7371%" y="709" width="0.7114%" height="15" fill="rgb(248,54,15)"/><text x="62.9871%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.22%)</title><rect x="63.2283%" y="693" width="0.2202%" height="15" fill="rgb(223,116,6)"/><text x="63.4783%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (6 samples, 0.10%)</title><rect x="63.4485%" y="757" width="0.1016%" height="15" fill="rgb(205,125,38)"/><text x="63.6985%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.05%)</title><rect x="63.4993%" y="741" width="0.0508%" height="15" fill="rgb(251,78,38)"/><text x="63.7493%" y="751.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.05%)</title><rect x="63.4993%" y="725" width="0.0508%" height="15" fill="rgb(253,78,28)"/><text x="63.7493%" y="735.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.05%)</title><rect x="63.4993%" y="709" width="0.0508%" height="15" fill="rgb(209,120,3)"/><text x="63.7493%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="63.5501%" y="725" width="0.0339%" height="15" fill="rgb(238,229,9)"/><text x="63.8001%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="63.5501%" y="709" width="0.0339%" height="15" fill="rgb(253,159,18)"/><text x="63.8001%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="63.7026%" y="645" width="0.0169%" height="15" fill="rgb(244,42,34)"/><text x="63.9526%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="63.7195%" y="645" width="0.0169%" height="15" fill="rgb(224,8,7)"/><text x="63.9695%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.08%)</title><rect x="63.6687%" y="661" width="0.0847%" height="15" fill="rgb(210,201,45)"/><text x="63.9187%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="63.7364%" y="645" width="0.0169%" height="15" fill="rgb(252,185,21)"/><text x="63.9864%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.12%)</title><rect x="64.0413%" y="645" width="0.1186%" height="15" fill="rgb(223,131,1)"/><text x="64.2913%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (32 samples, 0.54%)</title><rect x="63.7534%" y="661" width="0.5420%" height="15" fill="rgb(245,141,16)"/><text x="64.0034%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.14%)</title><rect x="64.1599%" y="645" width="0.1355%" height="15" fill="rgb(229,55,45)"/><text x="64.4099%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (42 samples, 0.71%)</title><rect x="63.6009%" y="677" width="0.7114%" height="15" fill="rgb(208,92,15)"/><text x="63.8509%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="64.2954%" y="661" width="0.0169%" height="15" fill="rgb(234,185,47)"/><text x="64.5454%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (59 samples, 1.00%)</title><rect x="63.5840%" y="709" width="0.9993%" height="15" fill="rgb(253,104,50)"/><text x="63.8340%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (58 samples, 0.98%)</title><rect x="63.6009%" y="693" width="0.9824%" height="15" fill="rgb(205,70,7)"/><text x="63.8509%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.27%)</title><rect x="64.3123%" y="677" width="0.2710%" height="15" fill="rgb(240,178,43)"/><text x="64.5623%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.10%)</title><rect x="64.8374%" y="645" width="0.1016%" height="15" fill="rgb(214,112,2)"/><text x="65.0874%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.02%)</title><rect x="64.9221%" y="629" width="0.0169%" height="15" fill="rgb(206,46,17)"/><text x="65.1721%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="64.9390%" y="645" width="0.0169%" height="15" fill="rgb(225,220,16)"/><text x="65.1890%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28 samples, 0.47%)</title><rect x="64.6511%" y="661" width="0.4743%" height="15" fill="rgb(238,65,40)"/><text x="64.9011%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.17%)</title><rect x="64.9560%" y="645" width="0.1694%" height="15" fill="rgb(230,151,21)"/><text x="65.2060%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (170 samples, 2.88%)</title><rect x="62.2798%" y="789" width="2.8794%" height="15" fill="rgb(218,58,49)"/><text x="62.5298%" y="799.50">ha..</text></g><g><title>hashbrown::map::make_hash (170 samples, 2.88%)</title><rect x="62.2798%" y="773" width="2.8794%" height="15" fill="rgb(219,179,14)"/><text x="62.5298%" y="783.50">ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (95 samples, 1.61%)</title><rect x="63.5501%" y="757" width="1.6091%" height="15" fill="rgb(223,72,1)"/><text x="63.8001%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (95 samples, 1.61%)</title><rect x="63.5501%" y="741" width="1.6091%" height="15" fill="rgb(238,126,10)"/><text x="63.8001%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (93 samples, 1.58%)</title><rect x="63.5840%" y="725" width="1.5752%" height="15" fill="rgb(224,206,38)"/><text x="63.8340%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u8 (34 samples, 0.58%)</title><rect x="64.5833%" y="709" width="0.5759%" height="15" fill="rgb(212,201,54)"/><text x="64.8333%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.51%)</title><rect x="64.6511%" y="693" width="0.5081%" height="15" fill="rgb(218,154,48)"/><text x="64.9011%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (30 samples, 0.51%)</title><rect x="64.6511%" y="677" width="0.5081%" height="15" fill="rgb(232,93,24)"/><text x="64.9011%" y="687.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="65.1253%" y="661" width="0.0339%" height="15" fill="rgb(245,30,21)"/><text x="65.3753%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4 samples, 0.07%)</title><rect x="65.1592%" y="789" width="0.0678%" height="15" fill="rgb(242,148,29)"/><text x="65.4092%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4 samples, 0.07%)</title><rect x="65.1592%" y="773" width="0.0678%" height="15" fill="rgb(244,153,54)"/><text x="65.4092%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.07%)</title><rect x="65.1592%" y="757" width="0.0678%" height="15" fill="rgb(252,87,22)"/><text x="65.4092%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.07%)</title><rect x="65.1592%" y="741" width="0.0678%" height="15" fill="rgb(210,51,29)"/><text x="65.4092%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (3 samples, 0.05%)</title><rect x="65.2270%" y="789" width="0.0508%" height="15" fill="rgb(242,136,47)"/><text x="65.4770%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (3 samples, 0.05%)</title><rect x="65.2270%" y="773" width="0.0508%" height="15" fill="rgb(238,68,4)"/><text x="65.4770%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.05%)</title><rect x="65.2270%" y="757" width="0.0508%" height="15" fill="rgb(242,161,30)"/><text x="65.4770%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (2 samples, 0.03%)</title><rect x="65.2778%" y="789" width="0.0339%" height="15" fill="rgb(218,58,44)"/><text x="65.5278%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.03%)</title><rect x="65.2778%" y="773" width="0.0339%" height="15" fill="rgb(252,125,32)"/><text x="65.5278%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.03%)</title><rect x="65.2778%" y="757" width="0.0339%" height="15" fill="rgb(219,178,0)"/><text x="65.5278%" y="767.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (2 samples, 0.03%)</title><rect x="65.2778%" y="741" width="0.0339%" height="15" fill="rgb(213,152,7)"/><text x="65.5278%" y="751.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (2 samples, 0.03%)</title><rect x="65.2778%" y="725" width="0.0339%" height="15" fill="rgb(249,109,34)"/><text x="65.5278%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.03%)</title><rect x="65.3455%" y="773" width="0.0339%" height="15" fill="rgb(232,96,21)"/><text x="65.5955%" y="783.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.03%)</title><rect x="65.3455%" y="757" width="0.0339%" height="15" fill="rgb(228,27,39)"/><text x="65.5955%" y="767.50"></text></g><g><title>__memset_avx2_unaligned (2 samples, 0.03%)</title><rect x="65.3455%" y="741" width="0.0339%" height="15" fill="rgb(211,182,52)"/><text x="65.5955%" y="751.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.10%)</title><rect x="65.3794%" y="757" width="0.1016%" height="15" fill="rgb(234,178,38)"/><text x="65.6294%" y="767.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.10%)</title><rect x="65.3794%" y="741" width="0.1016%" height="15" fill="rgb(221,111,3)"/><text x="65.6294%" y="751.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="65.4810%" y="757" width="0.0169%" height="15" fill="rgb(228,175,21)"/><text x="65.7310%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (9 samples, 0.15%)</title><rect x="65.3794%" y="773" width="0.1524%" height="15" fill="rgb(228,174,43)"/><text x="65.6294%" y="783.50"></text></g><g><title>hashbrown::raw::calculate_layout (2 samples, 0.03%)</title><rect x="65.4980%" y="757" width="0.0339%" height="15" fill="rgb(211,191,0)"/><text x="65.7480%" y="767.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.02%)</title><rect x="65.5149%" y="741" width="0.0169%" height="15" fill="rgb(253,117,3)"/><text x="65.7649%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (14 samples, 0.24%)</title><rect x="65.3117%" y="789" width="0.2371%" height="15" fill="rgb(241,127,19)"/><text x="65.5617%" y="799.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.02%)</title><rect x="65.5318%" y="773" width="0.0169%" height="15" fill="rgb(218,103,12)"/><text x="65.7818%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.02%)</title><rect x="65.5318%" y="757" width="0.0169%" height="15" fill="rgb(236,214,43)"/><text x="65.7818%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.02%)</title><rect x="65.5318%" y="741" width="0.0169%" height="15" fill="rgb(244,144,19)"/><text x="65.7818%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="65.9553%" y="773" width="0.0339%" height="15" fill="rgb(246,188,10)"/><text x="66.2053%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.22%)</title><rect x="65.9892%" y="773" width="0.2202%" height="15" fill="rgb(212,193,33)"/><text x="66.2392%" y="783.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.03%)</title><rect x="66.2093%" y="773" width="0.0339%" height="15" fill="rgb(241,51,29)"/><text x="66.4593%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (53 samples, 0.90%)</title><rect x="65.5488%" y="789" width="0.8977%" height="15" fill="rgb(211,58,19)"/><text x="65.7988%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.20%)</title><rect x="66.2432%" y="773" width="0.2033%" height="15" fill="rgb(229,111,26)"/><text x="66.4932%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.20%)</title><rect x="66.2432%" y="757" width="0.2033%" height="15" fill="rgb(213,115,40)"/><text x="66.4932%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="66.4465%" y="757" width="0.0169%" height="15" fill="rgb(209,56,44)"/><text x="66.6965%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="66.4465%" y="741" width="0.0169%" height="15" fill="rgb(230,108,32)"/><text x="66.6965%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (2 samples, 0.03%)</title><rect x="66.4465%" y="789" width="0.0339%" height="15" fill="rgb(216,165,31)"/><text x="66.6965%" y="799.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="66.4465%" y="773" width="0.0339%" height="15" fill="rgb(218,122,21)"/><text x="66.6965%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.02%)</title><rect x="66.4634%" y="757" width="0.0169%" height="15" fill="rgb(223,224,47)"/><text x="66.7134%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="66.4634%" y="741" width="0.0169%" height="15" fill="rgb(238,102,44)"/><text x="66.7134%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="66.4634%" y="725" width="0.0169%" height="15" fill="rgb(236,46,40)"/><text x="66.7134%" y="735.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.05%)</title><rect x="66.4804%" y="789" width="0.0508%" height="15" fill="rgb(247,202,50)"/><text x="66.7304%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (268 samples, 4.54%)</title><rect x="62.0088%" y="805" width="4.5393%" height="15" fill="rgb(209,99,20)"/><text x="62.2588%" y="815.50">hashb..</text></g><g><title>hashbrown::scopeguard::guard (1 samples, 0.02%)</title><rect x="66.5312%" y="789" width="0.0169%" height="15" fill="rgb(252,27,34)"/><text x="66.7812%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (271 samples, 4.59%)</title><rect x="61.9749%" y="837" width="4.5901%" height="15" fill="rgb(215,206,23)"/><text x="62.2249%" y="847.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (271 samples, 4.59%)</title><rect x="61.9749%" y="821" width="4.5901%" height="15" fill="rgb(212,135,36)"/><text x="62.2249%" y="831.50">hashb..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="66.5481%" y="805" width="0.0169%" height="15" fill="rgb(240,189,1)"/><text x="66.7981%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (743 samples, 12.58%)</title><rect x="53.9973%" y="965" width="12.5847%" height="15" fill="rgb(242,56,20)"/><text x="54.2473%" y="975.50">&lt;std::collections::..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (743 samples, 12.58%)</title><rect x="53.9973%" y="949" width="12.5847%" height="15" fill="rgb(247,132,33)"/><text x="54.2473%" y="959.50">&lt;hashbrown::map::Ha..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (743 samples, 12.58%)</title><rect x="53.9973%" y="933" width="12.5847%" height="15" fill="rgb(208,149,11)"/><text x="54.2473%" y="943.50">core::iter::traits:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (736 samples, 12.47%)</title><rect x="54.1159%" y="917" width="12.4661%" height="15" fill="rgb(211,33,11)"/><text x="54.3659%" y="927.50">core::iter::traits:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (585 samples, 9.91%)</title><rect x="56.6734%" y="901" width="9.9085%" height="15" fill="rgb(221,29,38)"/><text x="56.9234%" y="911.50">core::iter::tr..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (585 samples, 9.91%)</title><rect x="56.6734%" y="885" width="9.9085%" height="15" fill="rgb(206,182,49)"/><text x="56.9234%" y="895.50">&lt;hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (585 samples, 9.91%)</title><rect x="56.6734%" y="869" width="9.9085%" height="15" fill="rgb(216,140,1)"/><text x="56.9234%" y="879.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (348 samples, 5.89%)</title><rect x="60.6877%" y="853" width="5.8943%" height="15" fill="rgb(232,57,40)"/><text x="60.9377%" y="863.50">hashbro..</text></g><g><title>hashbrown::raw::h2 (1 samples, 0.02%)</title><rect x="66.5650%" y="837" width="0.0169%" height="15" fill="rgb(224,186,18)"/><text x="66.8150%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (744 samples, 12.60%)</title><rect x="53.9973%" y="997" width="12.6016%" height="15" fill="rgb(215,121,11)"/><text x="54.2473%" y="1007.50">core::iter::traits:..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (744 samples, 12.60%)</title><rect x="53.9973%" y="981" width="12.6016%" height="15" fill="rgb(245,147,10)"/><text x="54.2473%" y="991.50">&lt;std::collections::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (1 samples, 0.02%)</title><rect x="66.5820%" y="965" width="0.0169%" height="15" fill="rgb(238,153,13)"/><text x="66.8320%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (1 samples, 0.02%)</title><rect x="66.5820%" y="949" width="0.0169%" height="15" fill="rgb(233,108,0)"/><text x="66.8320%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="66.5820%" y="933" width="0.0169%" height="15" fill="rgb(212,157,17)"/><text x="66.8320%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::static_empty (1 samples, 0.02%)</title><rect x="66.5820%" y="917" width="0.0169%" height="15" fill="rgb(225,213,38)"/><text x="66.8320%" y="927.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="66.6159%" y="901" width="0.0169%" height="15" fill="rgb(248,16,11)"/><text x="66.8659%" y="911.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="66.6159%" y="885" width="0.0169%" height="15" fill="rgb(241,33,4)"/><text x="66.8659%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.10%)</title><rect x="66.5989%" y="949" width="0.1016%" height="15" fill="rgb(222,26,43)"/><text x="66.8489%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (5 samples, 0.08%)</title><rect x="66.6159%" y="933" width="0.0847%" height="15" fill="rgb(243,29,36)"/><text x="66.8659%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.08%)</title><rect x="66.6159%" y="917" width="0.0847%" height="15" fill="rgb(241,9,27)"/><text x="66.8659%" y="927.50"></text></g><g><title>_int_free (4 samples, 0.07%)</title><rect x="66.6328%" y="901" width="0.0678%" height="15" fill="rgb(205,117,26)"/><text x="66.8828%" y="911.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="66.7005%" y="901" width="0.0169%" height="15" fill="rgb(209,80,39)"/><text x="66.9505%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.05%)</title><rect x="66.7005%" y="917" width="0.0508%" height="15" fill="rgb(239,155,6)"/><text x="66.9505%" y="927.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="66.7175%" y="901" width="0.0339%" height="15" fill="rgb(212,104,12)"/><text x="66.9675%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.07%)</title><rect x="66.7005%" y="949" width="0.0678%" height="15" fill="rgb(234,204,3)"/><text x="66.9505%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (4 samples, 0.07%)</title><rect x="66.7005%" y="933" width="0.0678%" height="15" fill="rgb(251,218,7)"/><text x="66.9505%" y="943.50"></text></g><g><title>hashbrown::raw::calculate_layout (1 samples, 0.02%)</title><rect x="66.7514%" y="917" width="0.0169%" height="15" fill="rgb(221,81,32)"/><text x="67.0014%" y="927.50"></text></g><g><title>cf_log_sender::main::_{{closure}} (1 samples, 0.02%)</title><rect x="66.7514%" y="901" width="0.0169%" height="15" fill="rgb(214,152,26)"/><text x="67.0014%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.19%)</title><rect x="66.5989%" y="997" width="0.1863%" height="15" fill="rgb(223,22,3)"/><text x="66.8489%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.19%)</title><rect x="66.5989%" y="981" width="0.1863%" height="15" fill="rgb(207,174,7)"/><text x="66.8489%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.19%)</title><rect x="66.5989%" y="965" width="0.1863%" height="15" fill="rgb(224,19,52)"/><text x="66.8489%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="949" width="0.0169%" height="15" fill="rgb(228,24,14)"/><text x="67.0183%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="66.7683%" y="933" width="0.0169%" height="15" fill="rgb(230,153,43)"/><text x="67.0183%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="66.7683%" y="917" width="0.0169%" height="15" fill="rgb(231,106,12)"/><text x="67.0183%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="901" width="0.0169%" height="15" fill="rgb(215,92,2)"/><text x="67.0183%" y="911.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="885" width="0.0169%" height="15" fill="rgb(249,143,25)"/><text x="67.0183%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="869" width="0.0169%" height="15" fill="rgb(252,7,35)"/><text x="67.0183%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="853" width="0.0169%" height="15" fill="rgb(216,69,40)"/><text x="67.0183%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="837" width="0.0169%" height="15" fill="rgb(240,36,33)"/><text x="67.0183%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="821" width="0.0169%" height="15" fill="rgb(231,128,14)"/><text x="67.0183%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="805" width="0.0169%" height="15" fill="rgb(245,143,14)"/><text x="67.0183%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="66.7683%" y="789" width="0.0169%" height="15" fill="rgb(222,130,28)"/><text x="67.0183%" y="799.50"></text></g><g><title>&lt;openssl::ssl::SslContext as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="66.7683%" y="773" width="0.0169%" height="15" fill="rgb(212,10,48)"/><text x="67.0183%" y="783.50"></text></g><g><title>SSL_CTX_free (1 samples, 0.02%)</title><rect x="66.7683%" y="757" width="0.0169%" height="15" fill="rgb(254,118,45)"/><text x="67.0183%" y="767.50"></text></g><g><title>X509_STORE_free (1 samples, 0.02%)</title><rect x="66.7683%" y="741" width="0.0169%" height="15" fill="rgb(228,6,45)"/><text x="67.0183%" y="751.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.02%)</title><rect x="66.7683%" y="725" width="0.0169%" height="15" fill="rgb(241,18,35)"/><text x="67.0183%" y="735.50"></text></g><g><title>X509_OBJECT_free (1 samples, 0.02%)</title><rect x="66.7683%" y="709" width="0.0169%" height="15" fill="rgb(227,214,53)"/><text x="67.0183%" y="719.50"></text></g><g><title>ASN1_item_free (1 samples, 0.02%)</title><rect x="66.7683%" y="693" width="0.0169%" height="15" fill="rgb(224,107,51)"/><text x="67.0183%" y="703.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.7683%" y="677" width="0.0169%" height="15" fill="rgb(248,60,28)"/><text x="67.0183%" y="687.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.7683%" y="661" width="0.0169%" height="15" fill="rgb(249,101,23)"/><text x="67.0183%" y="671.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.7683%" y="645" width="0.0169%" height="15" fill="rgb(228,51,19)"/><text x="67.0183%" y="655.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.7683%" y="629" width="0.0169%" height="15" fill="rgb(213,20,6)"/><text x="67.0183%" y="639.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.7683%" y="613" width="0.0169%" height="15" fill="rgb(212,124,10)"/><text x="67.0183%" y="623.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.02%)</title><rect x="66.7683%" y="597" width="0.0169%" height="15" fill="rgb(248,3,40)"/><text x="67.0183%" y="607.50"></text></g><g><title>ASN1_item_free (1 samples, 0.02%)</title><rect x="66.7683%" y="581" width="0.0169%" height="15" fill="rgb(223,178,23)"/><text x="67.0183%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="66.7852%" y="997" width="0.0169%" height="15" fill="rgb(240,132,45)"/><text x="67.0352%" y="1007.50"></text></g><g><title>ASN1_item_new (1 samples, 0.02%)</title><rect x="66.8022%" y="629" width="0.0169%" height="15" fill="rgb(245,164,36)"/><text x="67.0522%" y="639.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.8022%" y="613" width="0.0169%" height="15" fill="rgb(231,188,53)"/><text x="67.0522%" y="623.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.02%)</title><rect x="66.8022%" y="597" width="0.0169%" height="15" fill="rgb(237,198,39)"/><text x="67.0522%" y="607.50"></text></g><g><title>__memset_avx2_unaligned (1 samples, 0.02%)</title><rect x="66.8022%" y="581" width="0.0169%" height="15" fill="rgb(223,120,35)"/><text x="67.0522%" y="591.50"></text></g><g><title>ASN1_item_d2i (2 samples, 0.03%)</title><rect x="66.8022%" y="805" width="0.0339%" height="15" fill="rgb(253,107,49)"/><text x="67.0522%" y="815.50"></text></g><g><title>ASN1_item_ex_d2i (2 samples, 0.03%)</title><rect x="66.8022%" y="789" width="0.0339%" height="15" fill="rgb(216,44,31)"/><text x="67.0522%" y="799.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="773" width="0.0339%" height="15" fill="rgb(253,87,21)"/><text x="67.0522%" y="783.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="757" width="0.0339%" height="15" fill="rgb(226,18,2)"/><text x="67.0522%" y="767.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="741" width="0.0339%" height="15" fill="rgb(216,8,46)"/><text x="67.0522%" y="751.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="725" width="0.0339%" height="15" fill="rgb(226,140,39)"/><text x="67.0522%" y="735.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="709" width="0.0339%" height="15" fill="rgb(221,194,54)"/><text x="67.0522%" y="719.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="693" width="0.0339%" height="15" fill="rgb(213,92,11)"/><text x="67.0522%" y="703.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="677" width="0.0339%" height="15" fill="rgb(229,162,46)"/><text x="67.0522%" y="687.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="661" width="0.0339%" height="15" fill="rgb(214,111,36)"/><text x="67.0522%" y="671.50"></text></g><g><title>[libcrypto.so.1.1.1i] (2 samples, 0.03%)</title><rect x="66.8022%" y="645" width="0.0339%" height="15" fill="rgb(207,6,21)"/><text x="67.0522%" y="655.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.8191%" y="629" width="0.0169%" height="15" fill="rgb(213,127,38)"/><text x="67.0691%" y="639.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.8191%" y="613" width="0.0169%" height="15" fill="rgb(238,118,32)"/><text x="67.0691%" y="623.50"></text></g><g><title>ASN1_item_ex_i2d (1 samples, 0.02%)</title><rect x="66.8191%" y="597" width="0.0169%" height="15" fill="rgb(240,139,39)"/><text x="67.0691%" y="607.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.8191%" y="581" width="0.0169%" height="15" fill="rgb(235,10,37)"/><text x="67.0691%" y="591.50"></text></g><g><title>[libcrypto.so.1.1.1i] (1 samples, 0.02%)</title><rect x="66.8191%" y="565" width="0.0169%" height="15" fill="rgb(249,171,38)"/><text x="67.0691%" y="575.50"></text></g><g><title>elasticsearch::http::transport::Transport::single_node (3 samples, 0.05%)</title><rect x="66.8022%" y="997" width="0.0508%" height="15" fill="rgb(242,144,32)"/><text x="67.0522%" y="1007.50"></text></g><g><title>elasticsearch::http::transport::TransportBuilder::build (3 samples, 0.05%)</title><rect x="66.8022%" y="981" width="0.0508%" height="15" fill="rgb(217,117,21)"/><text x="67.0522%" y="991.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.05%)</title><rect x="66.8022%" y="965" width="0.0508%" height="15" fill="rgb(249,87,1)"/><text x="67.0522%" y="975.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (3 samples, 0.05%)</title><rect x="66.8022%" y="949" width="0.0508%" height="15" fill="rgb(248,196,48)"/><text x="67.0522%" y="959.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.05%)</title><rect x="66.8022%" y="933" width="0.0508%" height="15" fill="rgb(251,206,33)"/><text x="67.0522%" y="943.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.05%)</title><rect x="66.8022%" y="917" width="0.0508%" height="15" fill="rgb(232,141,28)"/><text x="67.0522%" y="927.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (3 samples, 0.05%)</title><rect x="66.8022%" y="901" width="0.0508%" height="15" fill="rgb(209,167,14)"/><text x="67.0522%" y="911.50"></text></g><g><title>openssl::ssl::SslContextBuilder::set_default_verify_paths (3 samples, 0.05%)</title><rect x="66.8022%" y="885" width="0.0508%" height="15" fill="rgb(225,11,50)"/><text x="67.0522%" y="895.50"></text></g><g><title>X509_STORE_set_default_paths (3 samples, 0.05%)</title><rect x="66.8022%" y="869" width="0.0508%" height="15" fill="rgb(209,50,20)"/><text x="67.0522%" y="879.50"></text></g><g><title>[libcrypto.so.1.1.1i] (3 samples, 0.05%)</title><rect x="66.8022%" y="853" width="0.0508%" height="15" fill="rgb(212,17,46)"/><text x="67.0522%" y="863.50"></text></g><g><title>X509_load_cert_crl_file (3 samples, 0.05%)</title><rect x="66.8022%" y="837" width="0.0508%" height="15" fill="rgb(216,101,39)"/><text x="67.0522%" y="847.50"></text></g><g><title>PEM_X509_INFO_read_bio (3 samples, 0.05%)</title><rect x="66.8022%" y="821" width="0.0508%" height="15" fill="rgb(212,228,48)"/><text x="67.0522%" y="831.50"></text></g><g><title>PEM_read_bio_ex (1 samples, 0.02%)</title><rect x="66.8360%" y="805" width="0.0169%" height="15" fill="rgb(250,6,50)"/><text x="67.0860%" y="815.50"></text></g><g><title>__strncmp_avx2 (1 samples, 0.02%)</title><rect x="66.8360%" y="789" width="0.0169%" height="15" fill="rgb(250,160,48)"/><text x="67.0860%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.03%)</title><rect x="66.8530%" y="981" width="0.0339%" height="15" fill="rgb(244,216,33)"/><text x="67.1030%" y="991.50"></text></g><g><title>GFp_sha256_block_data_order (1 samples, 0.02%)</title><rect x="66.9377%" y="949" width="0.0169%" height="15" fill="rgb(207,157,5)"/><text x="67.1877%" y="959.50"></text></g><g><title>GFp_sha256_block_data_order_ssse3 (43 samples, 0.73%)</title><rect x="66.9546%" y="949" width="0.7283%" height="15" fill="rgb(228,199,8)"/><text x="67.2046%" y="959.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.02%)</title><rect x="67.6829%" y="949" width="0.0169%" height="15" fill="rgb(227,80,20)"/><text x="67.9329%" y="959.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="67.6829%" y="933" width="0.0169%" height="15" fill="rgb(222,9,33)"/><text x="67.9329%" y="943.50"></text></g><g><title>ring::digest::sha256_format_output (3 samples, 0.05%)</title><rect x="67.6999%" y="949" width="0.0508%" height="15" fill="rgb(239,44,28)"/><text x="67.9499%" y="959.50"></text></g><g><title>&lt;ring::endian::BigEndian&lt;u32&gt; as core::convert::From&lt;core::num::wrapping::Wrapping&lt;u32&gt;&gt;&gt;::from (2 samples, 0.03%)</title><rect x="67.7168%" y="933" width="0.0339%" height="15" fill="rgb(249,187,43)"/><text x="67.9668%" y="943.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_be (2 samples, 0.03%)</title><rect x="67.7168%" y="917" width="0.0339%" height="15" fill="rgb(216,141,28)"/><text x="67.9668%" y="927.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (2 samples, 0.03%)</title><rect x="67.7168%" y="901" width="0.0339%" height="15" fill="rgb(230,154,53)"/><text x="67.9668%" y="911.50"></text></g><g><title>ring::digest::Context::finish (53 samples, 0.90%)</title><rect x="66.8869%" y="981" width="0.8977%" height="15" fill="rgb(227,82,4)"/><text x="67.1369%" y="991.50"></text></g><g><title>ring::digest::BlockContext::finish (53 samples, 0.90%)</title><rect x="66.8869%" y="965" width="0.8977%" height="15" fill="rgb(220,107,16)"/><text x="67.1369%" y="975.50"></text></g><g><title>ring::polyfill::slice::fill (2 samples, 0.03%)</title><rect x="67.7507%" y="949" width="0.0339%" height="15" fill="rgb(207,187,2)"/><text x="68.0007%" y="959.50"></text></g><g><title>__memset_avx2_unaligned (2 samples, 0.03%)</title><rect x="67.7507%" y="933" width="0.0339%" height="15" fill="rgb(210,162,52)"/><text x="68.0007%" y="943.50"></text></g><g><title>ring::digest::digest (3 samples, 0.05%)</title><rect x="67.7846%" y="933" width="0.0508%" height="15" fill="rgb(217,216,49)"/><text x="68.0346%" y="943.50"></text></g><g><title>ring::digest::Context::new (4 samples, 0.07%)</title><rect x="67.7846%" y="981" width="0.0678%" height="15" fill="rgb(218,146,49)"/><text x="68.0346%" y="991.50"></text></g><g><title>ring::digest::BlockContext::new (4 samples, 0.07%)</title><rect x="67.7846%" y="965" width="0.0678%" height="15" fill="rgb(216,55,40)"/><text x="68.0346%" y="975.50"></text></g><g><title>ring::cpu::features (4 samples, 0.07%)</title><rect x="67.7846%" y="949" width="0.0678%" height="15" fill="rgb(208,196,21)"/><text x="68.0346%" y="959.50"></text></g><g><title>spin::once::Once&lt;T&gt;::call_once (1 samples, 0.02%)</title><rect x="67.8354%" y="933" width="0.0169%" height="15" fill="rgb(242,117,42)"/><text x="68.0854%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.07%)</title><rect x="67.8862%" y="965" width="0.0678%" height="15" fill="rgb(210,11,23)"/><text x="68.1362%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.07%)</title><rect x="67.8862%" y="949" width="0.0678%" height="15" fill="rgb(217,110,2)"/><text x="68.1362%" y="959.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.07%)</title><rect x="67.8862%" y="933" width="0.0678%" height="15" fill="rgb(229,77,54)"/><text x="68.1362%" y="943.50"></text></g><g><title>GFp_sha256_block_data_order (1 samples, 0.02%)</title><rect x="67.9539%" y="949" width="0.0169%" height="15" fill="rgb(218,53,16)"/><text x="68.2039%" y="959.50"></text></g><g><title>ring::digest::digest (409 samples, 6.93%)</title><rect x="66.8530%" y="997" width="6.9275%" height="15" fill="rgb(215,38,13)"/><text x="67.1030%" y="1007.50">ring::dig..</text></g><g><title>ring::digest::Context::update (350 samples, 5.93%)</title><rect x="67.8523%" y="981" width="5.9282%" height="15" fill="rgb(235,42,18)"/><text x="68.1023%" y="991.50">ring::di..</text></g><g><title>ring::digest::BlockContext::update (344 samples, 5.83%)</title><rect x="67.9539%" y="965" width="5.8266%" height="15" fill="rgb(219,66,54)"/><text x="68.2039%" y="975.50">ring::d..</text></g><g><title>GFp_sha256_block_data_order_ssse3 (343 samples, 5.81%)</title><rect x="67.9709%" y="949" width="5.8096%" height="15" fill="rgb(222,205,4)"/><text x="68.2209%" y="959.50">GFp_sha..</text></g><g><title>__memcpy_avx_unaligned (4 samples, 0.07%)</title><rect x="73.9160%" y="869" width="0.0678%" height="15" fill="rgb(227,213,46)"/><text x="74.1660%" y="879.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.14%)</title><rect x="73.9837%" y="869" width="0.1355%" height="15" fill="rgb(250,145,42)"/><text x="74.2337%" y="879.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.47%)</title><rect x="74.1192%" y="805" width="0.4743%" height="15" fill="rgb(219,15,2)"/><text x="74.3692%" y="815.50"></text></g><g><title>_int_malloc (24 samples, 0.41%)</title><rect x="74.1870%" y="789" width="0.4065%" height="15" fill="rgb(231,181,52)"/><text x="74.4370%" y="799.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.08%)</title><rect x="74.5088%" y="773" width="0.0847%" height="15" fill="rgb(235,1,42)"/><text x="74.7588%" y="783.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (42 samples, 0.71%)</title><rect x="73.9160%" y="949" width="0.7114%" height="15" fill="rgb(249,88,27)"/><text x="74.1660%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (42 samples, 0.71%)</title><rect x="73.9160%" y="933" width="0.7114%" height="15" fill="rgb(235,145,16)"/><text x="74.1660%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (42 samples, 0.71%)</title><rect x="73.9160%" y="917" width="0.7114%" height="15" fill="rgb(237,114,19)"/><text x="74.1660%" y="927.50"></text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::new_leaf (42 samples, 0.71%)</title><rect x="73.9160%" y="901" width="0.7114%" height="15" fill="rgb(238,51,50)"/><text x="74.1660%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.71%)</title><rect x="73.9160%" y="885" width="0.7114%" height="15" fill="rgb(205,194,25)"/><text x="74.1660%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.51%)</title><rect x="74.1192%" y="869" width="0.5081%" height="15" fill="rgb(215,203,17)"/><text x="74.3692%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (30 samples, 0.51%)</title><rect x="74.1192%" y="853" width="0.5081%" height="15" fill="rgb(233,112,49)"/><text x="74.3692%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.51%)</title><rect x="74.1192%" y="837" width="0.5081%" height="15" fill="rgb(241,130,26)"/><text x="74.3692%" y="847.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.51%)</title><rect x="74.1192%" y="821" width="0.5081%" height="15" fill="rgb(252,223,19)"/><text x="74.3692%" y="831.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="74.5935%" y="805" width="0.0339%" height="15" fill="rgb(211,95,25)"/><text x="74.8435%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="74.6104%" y="789" width="0.0169%" height="15" fill="rgb(251,182,27)"/><text x="74.8604%" y="799.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (44 samples, 0.75%)</title><rect x="73.9160%" y="965" width="0.7453%" height="15" fill="rgb(238,24,4)"/><text x="74.1660%" y="975.50"></text></g><g><title>alloc::collections::btree::search::search_tree (2 samples, 0.03%)</title><rect x="74.6274%" y="949" width="0.0339%" height="15" fill="rgb(224,220,25)"/><text x="74.8774%" y="959.50"></text></g><g><title>alloc::collections::btree::search::search_node (1 samples, 0.02%)</title><rect x="74.6443%" y="933" width="0.0169%" height="15" fill="rgb(239,133,26)"/><text x="74.8943%" y="943.50"></text></g><g><title>alloc::collections::btree::search::search_linear (1 samples, 0.02%)</title><rect x="74.6443%" y="917" width="0.0169%" height="15" fill="rgb(211,94,48)"/><text x="74.8943%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="74.6443%" y="901" width="0.0169%" height="15" fill="rgb(239,87,6)"/><text x="74.8943%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.02%)</title><rect x="74.6443%" y="885" width="0.0169%" height="15" fill="rgb(227,62,0)"/><text x="74.8943%" y="895.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="74.6443%" y="869" width="0.0169%" height="15" fill="rgb(211,226,4)"/><text x="74.8943%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="74.6612%" y="965" width="0.0169%" height="15" fill="rgb(253,38,52)"/><text x="74.9112%" y="975.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.02%)</title><rect x="74.8814%" y="933" width="0.0169%" height="15" fill="rgb(229,126,40)"/><text x="75.1314%" y="943.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (67 samples, 1.13%)</title><rect x="73.7805%" y="997" width="1.1348%" height="15" fill="rgb(229,165,44)"/><text x="74.0305%" y="1007.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (62 samples, 1.05%)</title><rect x="73.8652%" y="981" width="1.0501%" height="15" fill="rgb(247,95,47)"/><text x="74.1152%" y="991.50"></text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.24%)</title><rect x="74.6782%" y="965" width="0.2371%" height="15" fill="rgb(216,140,30)"/><text x="74.9282%" y="975.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.17%)</title><rect x="74.7459%" y="949" width="0.1694%" height="15" fill="rgb(246,214,8)"/><text x="74.9959%" y="959.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.02%)</title><rect x="74.8984%" y="933" width="0.0169%" height="15" fill="rgb(227,224,15)"/><text x="75.1484%" y="943.50"></text></g><g><title>serde_json::value::index::&lt;impl core::ops::index::Index&lt;I&gt; for serde_json::value::Value&gt;::index (1 samples, 0.02%)</title><rect x="74.9153%" y="997" width="0.0169%" height="15" fill="rgb(233,175,4)"/><text x="75.1653%" y="1007.50"></text></g><g><title>&lt;&amp;T as serde_json::value::index::Index&gt;::index_into (1 samples, 0.02%)</title><rect x="74.9153%" y="981" width="0.0169%" height="15" fill="rgb(221,66,45)"/><text x="75.1653%" y="991.50"></text></g><g><title>&lt;str as serde_json::value::index::Index&gt;::index_into (1 samples, 0.02%)</title><rect x="74.9153%" y="965" width="0.0169%" height="15" fill="rgb(221,178,18)"/><text x="75.1653%" y="975.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.02%)</title><rect x="74.9661%" y="933" width="0.0169%" height="15" fill="rgb(213,81,29)"/><text x="75.2161%" y="943.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="74.9831%" y="901" width="0.1016%" height="15" fill="rgb(220,89,49)"/><text x="75.2331%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.10%)</title><rect x="74.9831%" y="885" width="0.1016%" height="15" fill="rgb(227,60,33)"/><text x="75.2331%" y="895.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="74.9831%" y="933" width="0.1186%" height="15" fill="rgb(205,113,12)"/><text x="75.2331%" y="943.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.12%)</title><rect x="74.9831%" y="917" width="0.1186%" height="15" fill="rgb(211,32,1)"/><text x="75.2331%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="75.0847%" y="901" width="0.0169%" height="15" fill="rgb(246,2,12)"/><text x="75.3347%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="75.0847%" y="885" width="0.0169%" height="15" fill="rgb(243,37,27)"/><text x="75.3347%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="75.0847%" y="869" width="0.0169%" height="15" fill="rgb(248,211,31)"/><text x="75.3347%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="75.0847%" y="853" width="0.0169%" height="15" fill="rgb(242,146,47)"/><text x="75.3347%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.17%)</title><rect x="75.1863%" y="901" width="0.1694%" height="15" fill="rgb(206,70,20)"/><text x="75.4363%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (16 samples, 0.27%)</title><rect x="75.3557%" y="853" width="0.2710%" height="15" fill="rgb(215,10,51)"/><text x="75.6057%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.27%)</title><rect x="75.3557%" y="837" width="0.2710%" height="15" fill="rgb(243,178,53)"/><text x="75.6057%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (7 samples, 0.12%)</title><rect x="75.5081%" y="821" width="0.1186%" height="15" fill="rgb(233,221,20)"/><text x="75.7581%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.12%)</title><rect x="75.5081%" y="805" width="0.1186%" height="15" fill="rgb(218,95,35)"/><text x="75.7581%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (24 samples, 0.41%)</title><rect x="75.6267%" y="725" width="0.4065%" height="15" fill="rgb(229,13,5)"/><text x="75.8767%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.36%)</title><rect x="75.6775%" y="709" width="0.3557%" height="15" fill="rgb(252,164,30)"/><text x="75.9275%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (10 samples, 0.17%)</title><rect x="75.8638%" y="693" width="0.1694%" height="15" fill="rgb(232,68,36)"/><text x="76.1138%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (10 samples, 0.17%)</title><rect x="75.8638%" y="677" width="0.1694%" height="15" fill="rgb(219,59,54)"/><text x="76.1138%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (10 samples, 0.17%)</title><rect x="75.8638%" y="661" width="0.1694%" height="15" fill="rgb(250,92,33)"/><text x="76.1138%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned (8 samples, 0.14%)</title><rect x="76.0501%" y="709" width="0.1355%" height="15" fill="rgb(229,162,54)"/><text x="76.3001%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (61 samples, 1.03%)</title><rect x="75.6267%" y="773" width="1.0332%" height="15" fill="rgb(244,114,52)"/><text x="75.8767%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (61 samples, 1.03%)</title><rect x="75.6267%" y="757" width="1.0332%" height="15" fill="rgb(212,211,43)"/><text x="75.8767%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (61 samples, 1.03%)</title><rect x="75.6267%" y="741" width="1.0332%" height="15" fill="rgb(226,147,8)"/><text x="75.8767%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.63%)</title><rect x="76.0332%" y="725" width="0.6267%" height="15" fill="rgb(226,23,13)"/><text x="76.2832%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 0.47%)</title><rect x="76.1856%" y="709" width="0.4743%" height="15" fill="rgb(240,63,4)"/><text x="76.4356%" y="719.50"></text></g><g><title>alloc_perturb (3 samples, 0.05%)</title><rect x="79.7764%" y="629" width="0.0508%" height="15" fill="rgb(221,1,32)"/><text x="80.0264%" y="639.50"></text></g><g><title>__GI___libc_malloc (196 samples, 3.32%)</title><rect x="76.6599%" y="661" width="3.3198%" height="15" fill="rgb(242,117,10)"/><text x="76.9099%" y="671.50">__G..</text></g><g><title>_int_malloc (130 samples, 2.20%)</title><rect x="77.7778%" y="645" width="2.2019%" height="15" fill="rgb(249,172,44)"/><text x="78.0278%" y="655.50">_..</text></g><g><title>unlink_chunk.constprop.0 (9 samples, 0.15%)</title><rect x="79.8272%" y="629" width="0.1524%" height="15" fill="rgb(244,46,45)"/><text x="80.0772%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (203 samples, 3.44%)</title><rect x="76.6599%" y="725" width="3.4383%" height="15" fill="rgb(206,43,17)"/><text x="76.9099%" y="735.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (203 samples, 3.44%)</title><rect x="76.6599%" y="709" width="3.4383%" height="15" fill="rgb(239,218,39)"/><text x="76.9099%" y="719.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (203 samples, 3.44%)</title><rect x="76.6599%" y="693" width="3.4383%" height="15" fill="rgb(208,169,54)"/><text x="76.9099%" y="703.50">all..</text></g><g><title>alloc::alloc::alloc (203 samples, 3.44%)</title><rect x="76.6599%" y="677" width="3.4383%" height="15" fill="rgb(247,25,42)"/><text x="76.9099%" y="687.50">all..</text></g><g><title>__rdl_alloc (7 samples, 0.12%)</title><rect x="79.9797%" y="661" width="0.1186%" height="15" fill="rgb(226,23,31)"/><text x="80.2297%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (266 samples, 4.51%)</title><rect x="75.6267%" y="821" width="4.5054%" height="15" fill="rgb(247,16,28)"/><text x="75.8767%" y="831.50">alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (266 samples, 4.51%)</title><rect x="75.6267%" y="805" width="4.5054%" height="15" fill="rgb(231,147,38)"/><text x="75.8767%" y="815.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (266 samples, 4.51%)</title><rect x="75.6267%" y="789" width="4.5054%" height="15" fill="rgb(253,81,48)"/><text x="75.8767%" y="799.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (205 samples, 3.47%)</title><rect x="76.6599%" y="773" width="3.4722%" height="15" fill="rgb(249,222,43)"/><text x="76.9099%" y="783.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (205 samples, 3.47%)</title><rect x="76.6599%" y="757" width="3.4722%" height="15" fill="rgb(221,3,27)"/><text x="76.9099%" y="767.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (205 samples, 3.47%)</title><rect x="76.6599%" y="741" width="3.4722%" height="15" fill="rgb(228,180,5)"/><text x="76.9099%" y="751.50">all..</text></g><g><title>serde_json::value::to_value (2 samples, 0.03%)</title><rect x="80.0982%" y="725" width="0.0339%" height="15" fill="rgb(227,131,42)"/><text x="80.3482%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_key (316 samples, 5.35%)</title><rect x="75.1016%" y="917" width="5.3523%" height="15" fill="rgb(212,3,39)"/><text x="75.3516%" y="927.50">&lt;serde_..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (301 samples, 5.10%)</title><rect x="75.3557%" y="901" width="5.0982%" height="15" fill="rgb(226,45,5)"/><text x="75.6057%" y="911.50">serde:..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (301 samples, 5.10%)</title><rect x="75.3557%" y="885" width="5.0982%" height="15" fill="rgb(215,167,45)"/><text x="75.6057%" y="895.50">serde:..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (301 samples, 5.10%)</title><rect x="75.3557%" y="869" width="5.0982%" height="15" fill="rgb(250,218,53)"/><text x="75.6057%" y="879.50">serde:..</text></g><g><title>&lt;serde_json::value::ser::MapKeySerializer as serde::ser::Serializer&gt;::serialize_str (285 samples, 4.83%)</title><rect x="75.6267%" y="853" width="4.8272%" height="15" fill="rgb(207,140,0)"/><text x="75.8767%" y="863.50">&lt;serde..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (285 samples, 4.83%)</title><rect x="75.6267%" y="837" width="4.8272%" height="15" fill="rgb(238,133,51)"/><text x="75.8767%" y="847.50">alloc:..</text></g><g><title>alloc::string::String::from_utf8_unchecked (19 samples, 0.32%)</title><rect x="80.1321%" y="821" width="0.3218%" height="15" fill="rgb(218,203,53)"/><text x="80.3821%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (16 samples, 0.27%)</title><rect x="80.7080%" y="901" width="0.2710%" height="15" fill="rgb(226,184,25)"/><text x="80.9580%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.07%)</title><rect x="80.9790%" y="901" width="0.0678%" height="15" fill="rgb(231,121,21)"/><text x="81.2290%" y="911.50"></text></g><g><title>core::mem::take (4 samples, 0.07%)</title><rect x="80.9790%" y="885" width="0.0678%" height="15" fill="rgb(251,14,34)"/><text x="81.2290%" y="895.50"></text></g><g><title>core::mem::replace (4 samples, 0.07%)</title><rect x="80.9790%" y="869" width="0.0678%" height="15" fill="rgb(249,193,11)"/><text x="81.2290%" y="879.50"></text></g><g><title>core::mem::swap (4 samples, 0.07%)</title><rect x="80.9790%" y="853" width="0.0678%" height="15" fill="rgb(220,172,37)"/><text x="81.2290%" y="863.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.07%)</title><rect x="80.9790%" y="837" width="0.0678%" height="15" fill="rgb(231,229,43)"/><text x="81.2290%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.07%)</title><rect x="80.9790%" y="821" width="0.0678%" height="15" fill="rgb(250,161,5)"/><text x="81.2290%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.10%)</title><rect x="81.0467%" y="901" width="0.1016%" height="15" fill="rgb(218,225,18)"/><text x="81.2967%" y="911.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.02%)</title><rect x="81.7412%" y="773" width="0.0169%" height="15" fill="rgb(245,45,42)"/><text x="81.9912%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="81.7581%" y="773" width="0.0508%" height="15" fill="rgb(211,115,1)"/><text x="82.0081%" y="783.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.19%)</title><rect x="81.8259%" y="709" width="0.1863%" height="15" fill="rgb(248,133,52)"/><text x="82.0759%" y="719.50"></text></g><g><title>_int_malloc (7 samples, 0.12%)</title><rect x="81.8936%" y="693" width="0.1186%" height="15" fill="rgb(238,100,21)"/><text x="82.1436%" y="703.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="81.9953%" y="677" width="0.0169%" height="15" fill="rgb(247,144,11)"/><text x="82.2453%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="82.0122%" y="709" width="0.0169%" height="15" fill="rgb(206,164,16)"/><text x="82.2622%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="82.0122%" y="693" width="0.0169%" height="15" fill="rgb(222,34,3)"/><text x="82.2622%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::ensure_is_owned (21 samples, 0.36%)</title><rect x="81.6904%" y="853" width="0.3557%" height="15" fill="rgb(248,82,4)"/><text x="81.9404%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (21 samples, 0.36%)</title><rect x="81.6904%" y="837" width="0.3557%" height="15" fill="rgb(228,81,46)"/><text x="81.9404%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.30%)</title><rect x="81.7412%" y="821" width="0.3049%" height="15" fill="rgb(227,67,47)"/><text x="81.9912%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::new_leaf (18 samples, 0.30%)</title><rect x="81.7412%" y="805" width="0.3049%" height="15" fill="rgb(215,93,53)"/><text x="81.9912%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.30%)</title><rect x="81.7412%" y="789" width="0.3049%" height="15" fill="rgb(248,194,39)"/><text x="81.9912%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.24%)</title><rect x="81.8089%" y="773" width="0.2371%" height="15" fill="rgb(215,5,19)"/><text x="82.0589%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.24%)</title><rect x="81.8089%" y="757" width="0.2371%" height="15" fill="rgb(226,215,51)"/><text x="82.0589%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.24%)</title><rect x="81.8089%" y="741" width="0.2371%" height="15" fill="rgb(225,56,26)"/><text x="82.0589%" y="751.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.24%)</title><rect x="81.8089%" y="725" width="0.2371%" height="15" fill="rgb(222,75,29)"/><text x="82.0589%" y="735.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="82.0291%" y="709" width="0.0169%" height="15" fill="rgb(236,139,6)"/><text x="82.2791%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 0.36%)</title><rect x="82.0461%" y="853" width="0.3557%" height="15" fill="rgb(223,137,36)"/><text x="82.2961%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (4 samples, 0.07%)</title><rect x="82.4018%" y="837" width="0.0678%" height="15" fill="rgb(226,99,2)"/><text x="82.6518%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.02%)</title><rect x="82.4695%" y="837" width="0.0169%" height="15" fill="rgb(206,133,23)"/><text x="82.7195%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (16 samples, 0.27%)</title><rect x="82.4864%" y="837" width="0.2710%" height="15" fill="rgb(243,173,15)"/><text x="82.7364%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (16 samples, 0.27%)</title><rect x="82.4864%" y="821" width="0.2710%" height="15" fill="rgb(228,69,28)"/><text x="82.7364%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (6 samples, 0.10%)</title><rect x="82.7575%" y="821" width="0.1016%" height="15" fill="rgb(212,51,22)"/><text x="83.0075%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.20%)</title><rect x="82.9776%" y="773" width="0.2033%" height="15" fill="rgb(227,113,0)"/><text x="83.2276%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (8 samples, 0.14%)</title><rect x="83.0454%" y="757" width="0.1355%" height="15" fill="rgb(252,84,27)"/><text x="83.2954%" y="767.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.14%)</title><rect x="83.0454%" y="741" width="0.1355%" height="15" fill="rgb(223,145,39)"/><text x="83.2954%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="83.1809%" y="773" width="0.0169%" height="15" fill="rgb(239,219,30)"/><text x="83.4309%" y="783.50"></text></g><g><title>__memcmp_avx2_movbe (182 samples, 3.08%)</title><rect x="83.2656%" y="741" width="3.0827%" height="15" fill="rgb(224,196,39)"/><text x="83.5156%" y="751.50">__m..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (10 samples, 0.17%)</title><rect x="86.3482%" y="709" width="0.1694%" height="15" fill="rgb(205,35,43)"/><text x="86.5982%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (211 samples, 3.57%)</title><rect x="82.9776%" y="805" width="3.5738%" height="15" fill="rgb(228,201,21)"/><text x="83.2276%" y="815.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::cmp::Ord&gt;::cmp (211 samples, 3.57%)</title><rect x="82.9776%" y="789" width="3.5738%" height="15" fill="rgb(237,118,16)"/><text x="83.2276%" y="799.50">&lt;all..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (198 samples, 3.35%)</title><rect x="83.1978%" y="773" width="3.3537%" height="15" fill="rgb(241,17,19)"/><text x="83.4478%" y="783.50">cor..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (198 samples, 3.35%)</title><rect x="83.1978%" y="757" width="3.3537%" height="15" fill="rgb(214,10,25)"/><text x="83.4478%" y="767.50">&lt;u8..</text></g><g><title>core::cmp::min (12 samples, 0.20%)</title><rect x="86.3482%" y="741" width="0.2033%" height="15" fill="rgb(238,37,29)"/><text x="86.5982%" y="751.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.20%)</title><rect x="86.3482%" y="725" width="0.2033%" height="15" fill="rgb(253,83,25)"/><text x="86.5982%" y="735.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.03%)</title><rect x="86.5176%" y="709" width="0.0339%" height="15" fill="rgb(234,192,12)"/><text x="86.7676%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (293 samples, 4.96%)</title><rect x="81.6226%" y="869" width="4.9627%" height="15" fill="rgb(241,216,45)"/><text x="81.8726%" y="879.50">alloc:..</text></g><g><title>alloc::collections::btree::search::search_tree (247 samples, 4.18%)</title><rect x="82.4018%" y="853" width="4.1836%" height="15" fill="rgb(242,22,33)"/><text x="82.6518%" y="863.50">alloc..</text></g><g><title>alloc::collections::btree::search::search_node (226 samples, 3.83%)</title><rect x="82.7575%" y="837" width="3.8279%" height="15" fill="rgb(231,105,49)"/><text x="83.0075%" y="847.50">allo..</text></g><g><title>alloc::collections::btree::search::search_linear (220 samples, 3.73%)</title><rect x="82.8591%" y="821" width="3.7263%" height="15" fill="rgb(218,204,15)"/><text x="83.1091%" y="831.50">allo..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="86.5515%" y="805" width="0.0339%" height="15" fill="rgb(235,138,41)"/><text x="86.8015%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.03%)</title><rect x="86.5515%" y="789" width="0.0339%" height="15" fill="rgb(246,0,9)"/><text x="86.8015%" y="799.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (4 samples, 0.07%)</title><rect x="86.5854%" y="869" width="0.0678%" height="15" fill="rgb(210,74,4)"/><text x="86.8354%" y="879.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::leafy_insert_fit (1 samples, 0.02%)</title><rect x="88.2961%" y="805" width="0.0169%" height="15" fill="rgb(250,60,41)"/><text x="88.5461%" y="815.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.02%)</title><rect x="88.2961%" y="789" width="0.0169%" height="15" fill="rgb(220,115,12)"/><text x="88.5461%" y="799.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="88.2961%" y="773" width="0.0169%" height="15" fill="rgb(237,100,13)"/><text x="88.5461%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.07%)</title><rect x="88.2622%" y="837" width="0.0678%" height="15" fill="rgb(213,55,26)"/><text x="88.5122%" y="847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.03%)</title><rect x="88.2961%" y="821" width="0.0339%" height="15" fill="rgb(216,17,4)"/><text x="88.5461%" y="831.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.02%)</title><rect x="88.3130%" y="805" width="0.0169%" height="15" fill="rgb(220,153,47)"/><text x="88.5630%" y="815.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.02%)</title><rect x="88.3130%" y="789" width="0.0169%" height="15" fill="rgb(215,131,9)"/><text x="88.5630%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="88.3130%" y="773" width="0.0169%" height="15" fill="rgb(233,46,42)"/><text x="88.5630%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="88.5332%" y="773" width="0.0339%" height="15" fill="rgb(226,86,7)"/><text x="88.7832%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned (11 samples, 0.19%)</title><rect x="88.6348%" y="757" width="0.1863%" height="15" fill="rgb(239,226,21)"/><text x="88.8848%" y="767.50"></text></g><g><title>core::intrinsics::copy (49 samples, 0.83%)</title><rect x="88.5671%" y="773" width="0.8299%" height="15" fill="rgb(244,137,22)"/><text x="88.8171%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.58%)</title><rect x="88.8211%" y="757" width="0.5759%" height="15" fill="rgb(211,139,35)"/><text x="89.0711%" y="767.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (60 samples, 1.02%)</title><rect x="88.5332%" y="821" width="1.0163%" height="15" fill="rgb(214,62,50)"/><text x="88.7832%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::leafy_insert_fit (60 samples, 1.02%)</title><rect x="88.5332%" y="805" width="1.0163%" height="15" fill="rgb(212,113,44)"/><text x="88.7832%" y="815.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (60 samples, 1.02%)</title><rect x="88.5332%" y="789" width="1.0163%" height="15" fill="rgb(226,150,43)"/><text x="88.7832%" y="799.50"></text></g><g><title>core::ptr::write (9 samples, 0.15%)</title><rect x="89.3970%" y="773" width="0.1524%" height="15" fill="rgb(250,71,37)"/><text x="89.6470%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned (2 samples, 0.03%)</title><rect x="89.5664%" y="789" width="0.0339%" height="15" fill="rgb(219,76,19)"/><text x="89.8164%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.15%)</title><rect x="89.6003%" y="789" width="0.1524%" height="15" fill="rgb(250,39,11)"/><text x="89.8503%" y="799.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.51%)</title><rect x="89.7527%" y="725" width="0.5081%" height="15" fill="rgb(230,64,31)"/><text x="90.0027%" y="735.50"></text></g><g><title>_int_malloc (27 samples, 0.46%)</title><rect x="89.8035%" y="709" width="0.4573%" height="15" fill="rgb(208,222,23)"/><text x="90.0535%" y="719.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.12%)</title><rect x="90.1423%" y="693" width="0.1186%" height="15" fill="rgb(227,125,18)"/><text x="90.3923%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="90.2608%" y="725" width="0.0169%" height="15" fill="rgb(234,210,9)"/><text x="90.5108%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="90.2608%" y="709" width="0.0169%" height="15" fill="rgb(217,127,24)"/><text x="90.5108%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (44 samples, 0.75%)</title><rect x="89.5495%" y="805" width="0.7453%" height="15" fill="rgb(239,141,48)"/><text x="89.7995%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.54%)</title><rect x="89.7527%" y="789" width="0.5420%" height="15" fill="rgb(227,109,8)"/><text x="90.0027%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (32 samples, 0.54%)</title><rect x="89.7527%" y="773" width="0.5420%" height="15" fill="rgb(235,184,23)"/><text x="90.0027%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.54%)</title><rect x="89.7527%" y="757" width="0.5420%" height="15" fill="rgb(227,226,48)"/><text x="90.0027%" y="767.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.54%)</title><rect x="89.7527%" y="741" width="0.5420%" height="15" fill="rgb(206,150,11)"/><text x="90.0027%" y="751.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="90.2778%" y="725" width="0.0169%" height="15" fill="rgb(254,2,33)"/><text x="90.5278%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::val_at (1 samples, 0.02%)</title><rect x="90.3117%" y="789" width="0.0169%" height="15" fill="rgb(243,160,20)"/><text x="90.5617%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_at (1 samples, 0.02%)</title><rect x="90.3117%" y="773" width="0.0169%" height="15" fill="rgb(218,208,30)"/><text x="90.5617%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="90.3117%" y="757" width="0.0169%" height="15" fill="rgb(224,120,49)"/><text x="90.5617%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="90.3117%" y="741" width="0.0169%" height="15" fill="rgb(246,12,2)"/><text x="90.5617%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="90.3117%" y="725" width="0.0169%" height="15" fill="rgb(236,117,3)"/><text x="90.5617%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="90.3117%" y="709" width="0.0169%" height="15" fill="rgb(216,128,52)"/><text x="90.5617%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.14%)</title><rect x="90.3286%" y="789" width="0.1355%" height="15" fill="rgb(246,145,19)"/><text x="90.5786%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.14%)</title><rect x="90.3286%" y="773" width="0.1355%" height="15" fill="rgb(222,11,46)"/><text x="90.5786%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (55 samples, 0.93%)</title><rect x="89.5495%" y="821" width="0.9316%" height="15" fill="rgb(245,82,36)"/><text x="89.7995%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::leafy_split (11 samples, 0.19%)</title><rect x="90.2947%" y="805" width="0.1863%" height="15" fill="rgb(250,73,51)"/><text x="90.5447%" y="815.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="90.4641%" y="789" width="0.0169%" height="15" fill="rgb(221,189,23)"/><text x="90.7141%" y="799.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (130 samples, 2.20%)</title><rect x="88.3299%" y="837" width="2.2019%" height="15" fill="rgb(210,33,7)"/><text x="88.5799%" y="847.50">a..</text></g><g><title>alloc::collections::btree::node::splitpoint (3 samples, 0.05%)</title><rect x="90.4810%" y="821" width="0.0508%" height="15" fill="rgb(210,107,22)"/><text x="90.7310%" y="831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (186 samples, 3.15%)</title><rect x="87.4492%" y="853" width="3.1504%" height="15" fill="rgb(222,116,37)"/><text x="87.6992%" y="863.50">all..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.07%)</title><rect x="90.5318%" y="837" width="0.0678%" height="15" fill="rgb(254,17,48)"/><text x="90.7818%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (2 samples, 0.03%)</title><rect x="90.5996%" y="853" width="0.0339%" height="15" fill="rgb(224,36,32)"/><text x="90.8496%" y="863.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.08%)</title><rect x="90.6335%" y="821" width="0.0847%" height="15" fill="rgb(232,90,46)"/><text x="90.8835%" y="831.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.24%)</title><rect x="90.7182%" y="757" width="0.2371%" height="15" fill="rgb(241,66,40)"/><text x="90.9682%" y="767.50"></text></g><g><title>_int_malloc (8 samples, 0.14%)</title><rect x="90.8198%" y="741" width="0.1355%" height="15" fill="rgb(249,184,29)"/><text x="91.0698%" y="751.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.03%)</title><rect x="90.9214%" y="725" width="0.0339%" height="15" fill="rgb(231,181,1)"/><text x="91.1714%" y="735.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (581 samples, 9.84%)</title><rect x="81.1484%" y="901" width="9.8408%" height="15" fill="rgb(224,94,2)"/><text x="81.3984%" y="911.50">serde_json::ma..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (569 samples, 9.64%)</title><rect x="81.3516%" y="885" width="9.6375%" height="15" fill="rgb(229,170,15)"/><text x="81.6016%" y="895.50">alloc::collect..</text></g><g><title>alloc::collections::btree::map::VacantEntry&lt;K,V&gt;::insert (256 samples, 4.34%)</title><rect x="86.6531%" y="869" width="4.3360%" height="15" fill="rgb(240,127,35)"/><text x="86.9031%" y="879.50">alloc..</text></g><g><title>alloc::collections::btree::node::Root&lt;K,V&gt;::push_internal_level (21 samples, 0.36%)</title><rect x="90.6335%" y="853" width="0.3557%" height="15" fill="rgb(248,196,34)"/><text x="90.8835%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (21 samples, 0.36%)</title><rect x="90.6335%" y="837" width="0.3557%" height="15" fill="rgb(236,137,7)"/><text x="90.8835%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.27%)</title><rect x="90.7182%" y="821" width="0.2710%" height="15" fill="rgb(235,127,16)"/><text x="90.9682%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.27%)</title><rect x="90.7182%" y="805" width="0.2710%" height="15" fill="rgb(250,192,54)"/><text x="90.9682%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.27%)</title><rect x="90.7182%" y="789" width="0.2710%" height="15" fill="rgb(218,98,20)"/><text x="90.9682%" y="799.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.27%)</title><rect x="90.7182%" y="773" width="0.2710%" height="15" fill="rgb(230,176,47)"/><text x="90.9682%" y="783.50"></text></g><g><title>__rdl_alloc (2 samples, 0.03%)</title><rect x="90.9553%" y="757" width="0.0339%" height="15" fill="rgb(244,2,33)"/><text x="91.2053%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (3 samples, 0.05%)</title><rect x="91.1077%" y="677" width="0.0508%" height="15" fill="rgb(231,100,17)"/><text x="91.3577%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.05%)</title><rect x="91.1077%" y="661" width="0.0508%" height="15" fill="rgb(245,23,12)"/><text x="91.3577%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.30%)</title><rect x="91.1585%" y="677" width="0.3049%" height="15" fill="rgb(249,55,22)"/><text x="91.4085%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.29%)</title><rect x="91.1755%" y="661" width="0.2879%" height="15" fill="rgb(207,134,9)"/><text x="91.4255%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned (11 samples, 0.19%)</title><rect x="91.5142%" y="661" width="0.1863%" height="15" fill="rgb(218,134,0)"/><text x="91.7642%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.80%)</title><rect x="91.4634%" y="677" width="0.7961%" height="15" fill="rgb(213,212,33)"/><text x="91.7134%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.56%)</title><rect x="91.7005%" y="661" width="0.5589%" height="15" fill="rgb(252,106,18)"/><text x="91.9505%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (75 samples, 1.27%)</title><rect x="91.0061%" y="725" width="1.2703%" height="15" fill="rgb(208,126,42)"/><text x="91.2561%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (75 samples, 1.27%)</title><rect x="91.0061%" y="709" width="1.2703%" height="15" fill="rgb(246,175,29)"/><text x="91.2561%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (75 samples, 1.27%)</title><rect x="91.0061%" y="693" width="1.2703%" height="15" fill="rgb(215,13,50)"/><text x="91.2561%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="92.2595%" y="677" width="0.0169%" height="15" fill="rgb(216,172,15)"/><text x="92.5095%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="92.2595%" y="661" width="0.0169%" height="15" fill="rgb(212,103,13)"/><text x="92.5095%" y="671.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="94.5630%" y="581" width="0.0169%" height="15" fill="rgb(231,171,36)"/><text x="94.8130%" y="591.50"></text></g><g><title>__GI___libc_malloc (139 samples, 2.35%)</title><rect x="92.3950%" y="613" width="2.3543%" height="15" fill="rgb(250,123,20)"/><text x="92.6450%" y="623.50">_..</text></g><g><title>_int_malloc (91 samples, 1.54%)</title><rect x="93.2080%" y="597" width="1.5413%" height="15" fill="rgb(212,53,50)"/><text x="93.4580%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (10 samples, 0.17%)</title><rect x="94.5799%" y="581" width="0.1694%" height="15" fill="rgb(243,54,12)"/><text x="94.8299%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="94.7493%" y="613" width="0.0169%" height="15" fill="rgb(234,101,34)"/><text x="94.9993%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (225 samples, 3.81%)</title><rect x="91.0061%" y="773" width="3.8110%" height="15" fill="rgb(254,67,22)"/><text x="91.2561%" y="783.50">allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (225 samples, 3.81%)</title><rect x="91.0061%" y="757" width="3.8110%" height="15" fill="rgb(250,35,47)"/><text x="91.2561%" y="767.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (225 samples, 3.81%)</title><rect x="91.0061%" y="741" width="3.8110%" height="15" fill="rgb(226,126,38)"/><text x="91.2561%" y="751.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (150 samples, 2.54%)</title><rect x="92.2764%" y="725" width="2.5407%" height="15" fill="rgb(216,138,53)"/><text x="92.5264%" y="735.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (144 samples, 2.44%)</title><rect x="92.3780%" y="709" width="2.4390%" height="15" fill="rgb(246,199,43)"/><text x="92.6280%" y="719.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (144 samples, 2.44%)</title><rect x="92.3780%" y="693" width="2.4390%" height="15" fill="rgb(232,125,11)"/><text x="92.6280%" y="703.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (144 samples, 2.44%)</title><rect x="92.3780%" y="677" width="2.4390%" height="15" fill="rgb(218,219,45)"/><text x="92.6280%" y="687.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (144 samples, 2.44%)</title><rect x="92.3780%" y="661" width="2.4390%" height="15" fill="rgb(216,102,54)"/><text x="92.6280%" y="671.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (144 samples, 2.44%)</title><rect x="92.3780%" y="645" width="2.4390%" height="15" fill="rgb(250,228,7)"/><text x="92.6280%" y="655.50">al..</text></g><g><title>alloc::alloc::alloc (144 samples, 2.44%)</title><rect x="92.3780%" y="629" width="2.4390%" height="15" fill="rgb(226,125,25)"/><text x="92.6280%" y="639.50">al..</text></g><g><title>__rust_alloc (3 samples, 0.05%)</title><rect x="94.7663%" y="613" width="0.0508%" height="15" fill="rgb(224,165,27)"/><text x="95.0163%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1,178 samples, 19.95%)</title><rect x="74.9322%" y="949" width="19.9526%" height="15" fill="rgb(233,86,3)"/><text x="75.1822%" y="959.50">serde::ser::Serializer::collect..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (1,168 samples, 19.78%)</title><rect x="75.1016%" y="933" width="19.7832%" height="15" fill="rgb(228,116,20)"/><text x="75.3516%" y="943.50">serde::ser::SerializeMap::seria..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (852 samples, 14.43%)</title><rect x="80.4539%" y="917" width="14.4309%" height="15" fill="rgb(209,192,17)"/><text x="80.7039%" y="927.50">&lt;serde_json::value::se..</text></g><g><title>serde_json::value::to_value (230 samples, 3.90%)</title><rect x="90.9892%" y="901" width="3.8957%" height="15" fill="rgb(224,88,34)"/><text x="91.2392%" y="911.50">serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (229 samples, 3.88%)</title><rect x="91.0061%" y="885" width="3.8787%" height="15" fill="rgb(233,38,6)"/><text x="91.2561%" y="895.50">serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (229 samples, 3.88%)</title><rect x="91.0061%" y="869" width="3.8787%" height="15" fill="rgb(212,59,30)"/><text x="91.2561%" y="879.50">serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (229 samples, 3.88%)</title><rect x="91.0061%" y="853" width="3.8787%" height="15" fill="rgb(213,80,3)"/><text x="91.2561%" y="863.50">serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (229 samples, 3.88%)</title><rect x="91.0061%" y="837" width="3.8787%" height="15" fill="rgb(251,178,7)"/><text x="91.2561%" y="847.50">serd..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (229 samples, 3.88%)</title><rect x="91.0061%" y="821" width="3.8787%" height="15" fill="rgb(213,154,26)"/><text x="91.2561%" y="831.50">serd..</text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (229 samples, 3.88%)</title><rect x="91.0061%" y="805" width="3.8787%" height="15" fill="rgb(238,165,49)"/><text x="91.2561%" y="815.50">&lt;ser..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (229 samples, 3.88%)</title><rect x="91.0061%" y="789" width="3.8787%" height="15" fill="rgb(248,91,46)"/><text x="91.2561%" y="799.50">allo..</text></g><g><title>alloc::string::String::from_utf8_unchecked (4 samples, 0.07%)</title><rect x="94.8171%" y="773" width="0.0678%" height="15" fill="rgb(244,21,52)"/><text x="95.0671%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1,179 samples, 19.97%)</title><rect x="74.9322%" y="965" width="19.9695%" height="15" fill="rgb(247,122,20)"/><text x="75.1822%" y="975.50">serde::ser::impls::&lt;impl serde:..</text></g><g><title>serde_json::value::to_value (1 samples, 0.02%)</title><rect x="94.8848%" y="949" width="0.0169%" height="15" fill="rgb(218,27,9)"/><text x="95.1348%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="94.9018%" y="869" width="0.0169%" height="15" fill="rgb(246,7,6)"/><text x="95.1518%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="94.9018%" y="853" width="0.0169%" height="15" fill="rgb(227,135,54)"/><text x="95.1518%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="94.9018%" y="837" width="0.0169%" height="15" fill="rgb(247,14,11)"/><text x="95.1518%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="94.9018%" y="821" width="0.0169%" height="15" fill="rgb(206,149,34)"/><text x="95.1518%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="94.9018%" y="805" width="0.0169%" height="15" fill="rgb(227,228,4)"/><text x="95.1518%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.02%)</title><rect x="94.9018%" y="789" width="0.0169%" height="15" fill="rgb(238,218,28)"/><text x="95.1518%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.02%)</title><rect x="94.9018%" y="773" width="0.0169%" height="15" fill="rgb(252,86,40)"/><text x="95.1518%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="94.9018%" y="757" width="0.0169%" height="15" fill="rgb(251,225,11)"/><text x="95.1518%" y="767.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.34%)</title><rect x="94.9356%" y="757" width="0.3388%" height="15" fill="rgb(206,46,49)"/><text x="95.1856%" y="767.50"></text></g><g><title>_int_malloc (16 samples, 0.27%)</title><rect x="95.0034%" y="741" width="0.2710%" height="15" fill="rgb(245,128,24)"/><text x="95.2534%" y="751.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.05%)</title><rect x="95.2236%" y="725" width="0.0508%" height="15" fill="rgb(219,177,34)"/><text x="95.4736%" y="735.50"></text></g><g><title>serde_json::value::to_value (1,202 samples, 20.36%)</title><rect x="74.9322%" y="997" width="20.3591%" height="15" fill="rgb(218,60,48)"/><text x="75.1822%" y="1007.50">serde_json::value::to_value</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1,202 samples, 20.36%)</title><rect x="74.9322%" y="981" width="20.3591%" height="15" fill="rgb(221,11,5)"/><text x="75.1822%" y="991.50">serde::ser::impls::&lt;impl serde::..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (23 samples, 0.39%)</title><rect x="94.9018%" y="965" width="0.3896%" height="15" fill="rgb(220,148,13)"/><text x="95.1518%" y="975.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (23 samples, 0.39%)</title><rect x="94.9018%" y="949" width="0.3896%" height="15" fill="rgb(210,16,3)"/><text x="95.1518%" y="959.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (23 samples, 0.39%)</title><rect x="94.9018%" y="933" width="0.3896%" height="15" fill="rgb(236,80,2)"/><text x="95.1518%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (23 samples, 0.39%)</title><rect x="94.9018%" y="917" width="0.3896%" height="15" fill="rgb(239,129,19)"/><text x="95.1518%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.39%)</title><rect x="94.9018%" y="901" width="0.3896%" height="15" fill="rgb(220,106,35)"/><text x="95.1518%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.39%)</title><rect x="94.9018%" y="885" width="0.3896%" height="15" fill="rgb(252,139,45)"/><text x="95.1518%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (22 samples, 0.37%)</title><rect x="94.9187%" y="869" width="0.3726%" height="15" fill="rgb(229,8,36)"/><text x="95.1687%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (22 samples, 0.37%)</title><rect x="94.9187%" y="853" width="0.3726%" height="15" fill="rgb(230,126,33)"/><text x="95.1687%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.37%)</title><rect x="94.9187%" y="837" width="0.3726%" height="15" fill="rgb(239,140,21)"/><text x="95.1687%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.37%)</title><rect x="94.9187%" y="821" width="0.3726%" height="15" fill="rgb(254,104,9)"/><text x="95.1687%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (22 samples, 0.37%)</title><rect x="94.9187%" y="805" width="0.3726%" height="15" fill="rgb(239,52,14)"/><text x="95.1687%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.37%)</title><rect x="94.9187%" y="789" width="0.3726%" height="15" fill="rgb(208,227,44)"/><text x="95.1687%" y="799.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.36%)</title><rect x="94.9356%" y="773" width="0.3557%" height="15" fill="rgb(246,18,19)"/><text x="95.1856%" y="783.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="95.2744%" y="757" width="0.0169%" height="15" fill="rgb(235,228,25)"/><text x="95.5244%" y="767.50"></text></g><g><title>cf_log_sender::main::{{closure}} (5,548 samples, 93.97%)</title><rect x="1.4905%" y="1013" width="93.9702%" height="15" fill="rgb(240,156,20)"/><text x="1.7405%" y="1023.50">cf_log_sender::main::{{closure}}</text></g><g><title>std::fs::read_to_string (10 samples, 0.17%)</title><rect x="95.2913%" y="997" width="0.1694%" height="15" fill="rgb(224,8,20)"/><text x="95.5413%" y="1007.50"></text></g><g><title>std::fs::read_to_string::inner (10 samples, 0.17%)</title><rect x="95.2913%" y="981" width="0.1694%" height="15" fill="rgb(214,12,52)"/><text x="95.5413%" y="991.50"></text></g><g><title>std::io::Read::read_to_string (10 samples, 0.17%)</title><rect x="95.2913%" y="965" width="0.1694%" height="15" fill="rgb(211,220,47)"/><text x="95.5413%" y="975.50"></text></g><g><title>std::io::append_to_string (10 samples, 0.17%)</title><rect x="95.2913%" y="949" width="0.1694%" height="15" fill="rgb(250,173,5)"/><text x="95.5413%" y="959.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.17%)</title><rect x="95.2913%" y="933" width="0.1694%" height="15" fill="rgb(250,125,52)"/><text x="95.5413%" y="943.50"></text></g><g><title>core::str::validations::run_utf8_validation (10 samples, 0.17%)</title><rect x="95.2913%" y="917" width="0.1694%" height="15" fill="rgb(209,133,18)"/><text x="95.5413%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="95.4607%" y="1013" width="0.0169%" height="15" fill="rgb(216,173,22)"/><text x="95.7107%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (1 samples, 0.02%)</title><rect x="95.4607%" y="997" width="0.0169%" height="15" fill="rgb(205,3,22)"/><text x="95.7107%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (1 samples, 0.02%)</title><rect x="95.4607%" y="981" width="0.0169%" height="15" fill="rgb(248,22,20)"/><text x="95.7107%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="95.4607%" y="965" width="0.0169%" height="15" fill="rgb(233,6,29)"/><text x="95.7107%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="95.4607%" y="949" width="0.0169%" height="15" fill="rgb(240,22,54)"/><text x="95.7107%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (1 samples, 0.02%)</title><rect x="95.4776%" y="949" width="0.0169%" height="15" fill="rgb(231,133,32)"/><text x="95.7276%" y="959.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="95.5285%" y="821" width="0.0169%" height="15" fill="rgb(248,193,4)"/><text x="95.7785%" y="831.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (4 samples, 0.07%)</title><rect x="95.4946%" y="949" width="0.0678%" height="15" fill="rgb(211,178,46)"/><text x="95.7446%" y="959.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (2 samples, 0.03%)</title><rect x="95.5285%" y="933" width="0.0339%" height="15" fill="rgb(224,5,42)"/><text x="95.7785%" y="943.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (2 samples, 0.03%)</title><rect x="95.5285%" y="917" width="0.0339%" height="15" fill="rgb(239,176,25)"/><text x="95.7785%" y="927.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="95.5285%" y="901" width="0.0339%" height="15" fill="rgb(245,187,50)"/><text x="95.7785%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="95.5285%" y="885" width="0.0339%" height="15" fill="rgb(248,24,15)"/><text x="95.7785%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.03%)</title><rect x="95.5285%" y="869" width="0.0339%" height="15" fill="rgb(205,166,13)"/><text x="95.7785%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="95.5285%" y="853" width="0.0339%" height="15" fill="rgb(208,114,23)"/><text x="95.7785%" y="863.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="95.5285%" y="837" width="0.0339%" height="15" fill="rgb(239,127,18)"/><text x="95.7785%" y="847.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="95.5454%" y="821" width="0.0169%" height="15" fill="rgb(219,154,28)"/><text x="95.7954%" y="831.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve (1 samples, 0.02%)</title><rect x="95.5623%" y="949" width="0.0169%" height="15" fill="rgb(225,157,23)"/><text x="95.8123%" y="959.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="95.5623%" y="933" width="0.0169%" height="15" fill="rgb(219,8,6)"/><text x="95.8123%" y="943.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="95.5623%" y="917" width="0.0169%" height="15" fill="rgb(212,47,6)"/><text x="95.8123%" y="927.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (1 samples, 0.02%)</title><rect x="95.5793%" y="949" width="0.0169%" height="15" fill="rgb(224,190,4)"/><text x="95.8293%" y="959.50"></text></g><g><title>http::header::name::parse_hdr (1 samples, 0.02%)</title><rect x="95.5793%" y="933" width="0.0169%" height="15" fill="rgb(239,183,29)"/><text x="95.8293%" y="943.50"></text></g><g><title>http::header::value::HeaderValue::from_maybe_shared_unchecked (1 samples, 0.02%)</title><rect x="95.5962%" y="949" width="0.0169%" height="15" fill="rgb(213,57,7)"/><text x="95.8462%" y="959.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.02%)</title><rect x="95.5962%" y="933" width="0.0169%" height="15" fill="rgb(216,148,1)"/><text x="95.8462%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.02%)</title><rect x="95.5962%" y="917" width="0.0169%" height="15" fill="rgb(236,182,29)"/><text x="95.8462%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="95.5962%" y="901" width="0.0169%" height="15" fill="rgb(244,120,48)"/><text x="95.8462%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="95.5962%" y="885" width="0.0169%" height="15" fill="rgb(206,71,34)"/><text x="95.8462%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="95.5962%" y="869" width="0.0169%" height="15" fill="rgb(242,32,6)"/><text x="95.8462%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="95.5962%" y="853" width="0.0169%" height="15" fill="rgb(241,35,3)"/><text x="95.8462%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="95.5962%" y="837" width="0.0169%" height="15" fill="rgb(222,62,19)"/><text x="95.8462%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.02%)</title><rect x="95.5962%" y="821" width="0.0169%" height="15" fill="rgb(223,110,41)"/><text x="95.8462%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="95.5962%" y="805" width="0.0169%" height="15" fill="rgb(208,224,4)"/><text x="95.8462%" y="815.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="95.5962%" y="789" width="0.0169%" height="15" fill="rgb(241,137,19)"/><text x="95.8462%" y="799.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="95.5962%" y="773" width="0.0169%" height="15" fill="rgb(244,24,17)"/><text x="95.8462%" y="783.50"></text></g><g><title>httparse::parse_headers_iter (2 samples, 0.03%)</title><rect x="95.6640%" y="933" width="0.0339%" height="15" fill="rgb(245,178,49)"/><text x="95.9140%" y="943.50"></text></g><g><title>httparse::simd::runtime::match_header_value_vectored (1 samples, 0.02%)</title><rect x="95.6809%" y="917" width="0.0169%" height="15" fill="rgb(219,160,38)"/><text x="95.9309%" y="927.50"></text></g><g><title>httparse::simd::avx2::match_header_value_batch_32 (1 samples, 0.02%)</title><rect x="95.6809%" y="901" width="0.0169%" height="15" fill="rgb(228,137,14)"/><text x="95.9309%" y="911.50"></text></g><g><title>httparse::simd::avx2::match_header_value_char_32_avx (1 samples, 0.02%)</title><rect x="95.6809%" y="885" width="0.0169%" height="15" fill="rgb(237,134,11)"/><text x="95.9309%" y="895.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_lddqu_si256 (1 samples, 0.02%)</title><rect x="95.6809%" y="869" width="0.0169%" height="15" fill="rgb(211,126,44)"/><text x="95.9309%" y="879.50"></text></g><g><title>httparse::Response::parse (6 samples, 0.10%)</title><rect x="95.6131%" y="949" width="0.1016%" height="15" fill="rgb(226,171,33)"/><text x="95.8631%" y="959.50"></text></g><g><title>httparse::parse_version (1 samples, 0.02%)</title><rect x="95.6978%" y="933" width="0.0169%" height="15" fill="rgb(253,99,13)"/><text x="95.9478%" y="943.50"></text></g><g><title>httparse::iter::Bytes8::_0 (1 samples, 0.02%)</title><rect x="95.6978%" y="917" width="0.0169%" height="15" fill="rgb(244,48,7)"/><text x="95.9478%" y="927.50"></text></g><g><title>&lt;http::header::map::ValueIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="95.7317%" y="885" width="0.0169%" height="15" fill="rgb(244,217,54)"/><text x="95.9817%" y="895.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (17 samples, 0.29%)</title><rect x="95.4776%" y="1013" width="0.2879%" height="15" fill="rgb(224,15,18)"/><text x="95.7276%" y="1023.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (17 samples, 0.29%)</title><rect x="95.4776%" y="997" width="0.2879%" height="15" fill="rgb(244,99,12)"/><text x="95.7276%" y="1007.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (17 samples, 0.29%)</title><rect x="95.4776%" y="981" width="0.2879%" height="15" fill="rgb(233,226,8)"/><text x="95.7276%" y="991.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (17 samples, 0.29%)</title><rect x="95.4776%" y="965" width="0.2879%" height="15" fill="rgb(229,211,3)"/><text x="95.7276%" y="975.50"></text></g><g><title>hyper::proto::h1::role::Client::decoder (3 samples, 0.05%)</title><rect x="95.7148%" y="949" width="0.0508%" height="15" fill="rgb(216,140,21)"/><text x="95.9648%" y="959.50"></text></g><g><title>hyper::headers::content_length_parse_all (2 samples, 0.03%)</title><rect x="95.7317%" y="933" width="0.0339%" height="15" fill="rgb(234,122,30)"/><text x="95.9817%" y="943.50"></text></g><g><title>hyper::headers::content_length_parse_all_values (2 samples, 0.03%)</title><rect x="95.7317%" y="917" width="0.0339%" height="15" fill="rgb(236,25,46)"/><text x="95.9817%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.03%)</title><rect x="95.7317%" y="901" width="0.0339%" height="15" fill="rgb(217,52,54)"/><text x="95.9817%" y="911.50"></text></g><g><title>hyper::headers::content_length_parse_all_values::{{closure}} (1 samples, 0.02%)</title><rect x="95.7486%" y="885" width="0.0169%" height="15" fill="rgb(222,29,26)"/><text x="95.9986%" y="895.50"></text></g><g><title>http::header::value::HeaderValue::to_str (1 samples, 0.02%)</title><rect x="95.7486%" y="869" width="0.0169%" height="15" fill="rgb(216,177,29)"/><text x="95.9986%" y="879.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="95.7486%" y="853" width="0.0169%" height="15" fill="rgb(247,136,51)"/><text x="95.9986%" y="863.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="95.7486%" y="837" width="0.0169%" height="15" fill="rgb(231,47,47)"/><text x="95.9986%" y="847.50"></text></g><g><title>bytes::bytes::Bytes::as_slice (1 samples, 0.02%)</title><rect x="95.7486%" y="821" width="0.0169%" height="15" fill="rgb(211,192,36)"/><text x="95.9986%" y="831.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (1 samples, 0.02%)</title><rect x="95.7825%" y="917" width="0.0169%" height="15" fill="rgb(229,156,32)"/><text x="96.0325%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="95.7825%" y="901" width="0.0169%" height="15" fill="rgb(248,213,20)"/><text x="96.0325%" y="911.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="95.7825%" y="885" width="0.0169%" height="15" fill="rgb(217,64,7)"/><text x="96.0325%" y="895.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (1 samples, 0.02%)</title><rect x="95.7995%" y="917" width="0.0169%" height="15" fill="rgb(232,142,8)"/><text x="96.0495%" y="927.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (5 samples, 0.08%)</title><rect x="95.7656%" y="965" width="0.0847%" height="15" fill="rgb(224,92,44)"/><text x="96.0156%" y="975.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::append (5 samples, 0.08%)</title><rect x="95.7656%" y="949" width="0.0847%" height="15" fill="rgb(214,169,17)"/><text x="96.0156%" y="959.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append2 (5 samples, 0.08%)</title><rect x="95.7656%" y="933" width="0.0847%" height="15" fill="rgb(210,59,37)"/><text x="96.0156%" y="943.50"></text></g><g><title>http::header::map::hash_elem_using (2 samples, 0.03%)</title><rect x="95.8164%" y="917" width="0.0339%" height="15" fill="rgb(214,116,48)"/><text x="96.0664%" y="927.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (8 samples, 0.14%)</title><rect x="95.7656%" y="1013" width="0.1355%" height="15" fill="rgb(244,191,6)"/><text x="96.0156%" y="1023.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (8 samples, 0.14%)</title><rect x="95.7656%" y="997" width="0.1355%" height="15" fill="rgb(241,50,52)"/><text x="96.0156%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (8 samples, 0.14%)</title><rect x="95.7656%" y="981" width="0.1355%" height="15" fill="rgb(236,75,39)"/><text x="96.0156%" y="991.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (3 samples, 0.05%)</title><rect x="95.8503%" y="965" width="0.0508%" height="15" fill="rgb(236,99,0)"/><text x="96.1003%" y="975.50"></text></g><g><title>http::header::name::parse_hdr (3 samples, 0.05%)</title><rect x="95.8503%" y="949" width="0.0508%" height="15" fill="rgb(207,202,15)"/><text x="96.1003%" y="959.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.02%)</title><rect x="95.9011%" y="1013" width="0.0169%" height="15" fill="rgb(233,207,14)"/><text x="96.1511%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="95.9011%" y="997" width="0.0169%" height="15" fill="rgb(226,27,51)"/><text x="96.1511%" y="1007.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="95.9858%" y="421" width="0.0169%" height="15" fill="rgb(206,104,42)"/><text x="96.2358%" y="431.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.02%)</title><rect x="95.9858%" y="405" width="0.0169%" height="15" fill="rgb(212,225,4)"/><text x="96.2358%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.02%)</title><rect x="95.9858%" y="389" width="0.0169%" height="15" fill="rgb(233,96,42)"/><text x="96.2358%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.02%)</title><rect x="95.9858%" y="373" width="0.0169%" height="15" fill="rgb(229,21,32)"/><text x="96.2358%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.9858%" y="357" width="0.0169%" height="15" fill="rgb(226,216,24)"/><text x="96.2358%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.9858%" y="341" width="0.0169%" height="15" fill="rgb(221,163,17)"/><text x="96.2358%" y="351.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="96.0027%" y="325" width="0.0508%" height="15" fill="rgb(216,216,42)"/><text x="96.2527%" y="335.50"></text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="96.0027%" y="309" width="0.0508%" height="15" fill="rgb(240,118,7)"/><text x="96.2527%" y="319.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="96.0027%" y="293" width="0.0508%" height="15" fill="rgb(221,67,37)"/><text x="96.2527%" y="303.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.05%)</title><rect x="96.0027%" y="277" width="0.0508%" height="15" fill="rgb(241,32,44)"/><text x="96.2527%" y="287.50"></text></g><g><title>__libc_send (3 samples, 0.05%)</title><rect x="96.0027%" y="261" width="0.0508%" height="15" fill="rgb(235,204,43)"/><text x="96.2527%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="96.0196%" y="245" width="0.0339%" height="15" fill="rgb(213,116,10)"/><text x="96.2696%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="96.0196%" y="229" width="0.0339%" height="15" fill="rgb(239,15,48)"/><text x="96.2696%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="96.0196%" y="213" width="0.0339%" height="15" fill="rgb(207,123,36)"/><text x="96.2696%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="96.0196%" y="197" width="0.0339%" height="15" fill="rgb(209,103,30)"/><text x="96.2696%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.0366%" y="181" width="0.0169%" height="15" fill="rgb(238,100,19)"/><text x="96.2866%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.0366%" y="165" width="0.0169%" height="15" fill="rgb(244,30,14)"/><text x="96.2866%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.0366%" y="149" width="0.0169%" height="15" fill="rgb(249,174,6)"/><text x="96.2866%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.0366%" y="133" width="0.0169%" height="15" fill="rgb(235,213,41)"/><text x="96.2866%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.0366%" y="117" width="0.0169%" height="15" fill="rgb(213,118,6)"/><text x="96.2866%" y="127.50"></text></g><g><title>tokio::io::driver::platform::sys::error (1 samples, 0.02%)</title><rect x="96.0535%" y="309" width="0.0169%" height="15" fill="rgb(235,44,51)"/><text x="96.3035%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="96.0535%" y="293" width="0.0169%" height="15" fill="rgb(217,9,53)"/><text x="96.3035%" y="303.50"></text></g><g><title>mio::sys::unix::ready::&lt;impl core::convert::From&lt;mio::sys::unix::ready::UnixReady&gt; for mio::event_imp::Ready&gt;::from (1 samples, 0.02%)</title><rect x="96.0535%" y="277" width="0.0169%" height="15" fill="rgb(237,172,34)"/><text x="96.3035%" y="287.50"></text></g><g><title>mio::sys::unix::ready::&lt;impl core::convert::From&lt;mio::sys::unix::ready::UnixReady&gt; for mio::event_imp::Ready&gt;::from (1 samples, 0.02%)</title><rect x="96.0705%" y="277" width="0.0169%" height="15" fill="rgb(206,206,11)"/><text x="96.3205%" y="287.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (8 samples, 0.14%)</title><rect x="95.9688%" y="469" width="0.1355%" height="15" fill="rgb(214,149,29)"/><text x="96.2188%" y="479.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (7 samples, 0.12%)</title><rect x="95.9858%" y="453" width="0.1186%" height="15" fill="rgb(208,123,3)"/><text x="96.2358%" y="463.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (7 samples, 0.12%)</title><rect x="95.9858%" y="437" width="0.1186%" height="15" fill="rgb(229,126,4)"/><text x="96.2358%" y="447.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush_flattened (6 samples, 0.10%)</title><rect x="96.0027%" y="421" width="0.1016%" height="15" fill="rgb(222,92,36)"/><text x="96.2527%" y="431.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.10%)</title><rect x="96.0027%" y="405" width="0.1016%" height="15" fill="rgb(216,39,41)"/><text x="96.2527%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.10%)</title><rect x="96.0027%" y="389" width="0.1016%" height="15" fill="rgb(253,127,28)"/><text x="96.2527%" y="399.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.10%)</title><rect x="96.0027%" y="373" width="0.1016%" height="15" fill="rgb(249,152,51)"/><text x="96.2527%" y="383.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (6 samples, 0.10%)</title><rect x="96.0027%" y="357" width="0.1016%" height="15" fill="rgb(209,123,42)"/><text x="96.2527%" y="367.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (6 samples, 0.10%)</title><rect x="96.0027%" y="341" width="0.1016%" height="15" fill="rgb(241,118,22)"/><text x="96.2527%" y="351.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_ready (3 samples, 0.05%)</title><rect x="96.0535%" y="325" width="0.0508%" height="15" fill="rgb(208,25,7)"/><text x="96.3035%" y="335.50"></text></g><g><title>tokio::io::registration::Registration::take_write_ready (2 samples, 0.03%)</title><rect x="96.0705%" y="309" width="0.0339%" height="15" fill="rgb(243,144,39)"/><text x="96.3205%" y="319.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (2 samples, 0.03%)</title><rect x="96.0705%" y="293" width="0.0339%" height="15" fill="rgb(250,50,5)"/><text x="96.3205%" y="303.50"></text></g><g><title>tokio::io::driver::Direction::mask (1 samples, 0.02%)</title><rect x="96.0874%" y="277" width="0.0169%" height="15" fill="rgb(207,67,11)"/><text x="96.3374%" y="287.50"></text></g><g><title>tokio::io::driver::platform::sys::hup (1 samples, 0.02%)</title><rect x="96.0874%" y="261" width="0.0169%" height="15" fill="rgb(245,204,40)"/><text x="96.3374%" y="271.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="96.0874%" y="245" width="0.0169%" height="15" fill="rgb(238,228,24)"/><text x="96.3374%" y="255.50"></text></g><g><title>mio::sys::unix::ready::&lt;impl core::convert::From&lt;mio::sys::unix::ready::UnixReady&gt; for mio::event_imp::Ready&gt;::from (1 samples, 0.02%)</title><rect x="96.0874%" y="229" width="0.0169%" height="15" fill="rgb(217,116,22)"/><text x="96.3374%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="96.1551%" y="373" width="0.0169%" height="15" fill="rgb(234,98,12)"/><text x="96.4051%" y="383.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.1551%" y="357" width="0.0169%" height="15" fill="rgb(242,170,50)"/><text x="96.4051%" y="367.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.02%)</title><rect x="96.1551%" y="341" width="0.0169%" height="15" fill="rgb(235,7,5)"/><text x="96.4051%" y="351.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (1 samples, 0.02%)</title><rect x="96.1551%" y="325" width="0.0169%" height="15" fill="rgb(241,114,28)"/><text x="96.4051%" y="335.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="96.1551%" y="309" width="0.0169%" height="15" fill="rgb(246,112,42)"/><text x="96.4051%" y="319.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (3 samples, 0.05%)</title><rect x="96.1382%" y="453" width="0.0508%" height="15" fill="rgb(248,228,14)"/><text x="96.3882%" y="463.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (2 samples, 0.03%)</title><rect x="96.1551%" y="437" width="0.0339%" height="15" fill="rgb(208,133,18)"/><text x="96.4051%" y="447.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (2 samples, 0.03%)</title><rect x="96.1551%" y="421" width="0.0339%" height="15" fill="rgb(207,35,49)"/><text x="96.4051%" y="431.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (2 samples, 0.03%)</title><rect x="96.1551%" y="405" width="0.0339%" height="15" fill="rgb(205,68,36)"/><text x="96.4051%" y="415.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (2 samples, 0.03%)</title><rect x="96.1551%" y="389" width="0.0339%" height="15" fill="rgb(245,62,40)"/><text x="96.4051%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.02%)</title><rect x="96.1721%" y="373" width="0.0169%" height="15" fill="rgb(228,27,24)"/><text x="96.4221%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.02%)</title><rect x="96.1721%" y="357" width="0.0169%" height="15" fill="rgb(253,19,12)"/><text x="96.4221%" y="367.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.02%)</title><rect x="96.1721%" y="341" width="0.0169%" height="15" fill="rgb(232,28,20)"/><text x="96.4221%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.02%)</title><rect x="96.1721%" y="325" width="0.0169%" height="15" fill="rgb(218,35,51)"/><text x="96.4221%" y="335.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_read_head (2 samples, 0.03%)</title><rect x="96.1890%" y="453" width="0.0339%" height="15" fill="rgb(212,90,40)"/><text x="96.4390%" y="463.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (1 samples, 0.02%)</title><rect x="96.2060%" y="437" width="0.0169%" height="15" fill="rgb(220,172,12)"/><text x="96.4560%" y="447.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::is_server (1 samples, 0.02%)</title><rect x="96.2060%" y="421" width="0.0169%" height="15" fill="rgb(226,159,20)"/><text x="96.4560%" y="431.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::is_client (1 samples, 0.02%)</title><rect x="96.2060%" y="405" width="0.0169%" height="15" fill="rgb(234,205,16)"/><text x="96.4560%" y="415.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="96.2568%" y="293" width="0.0169%" height="15" fill="rgb(207,9,39)"/><text x="96.5068%" y="303.50"></text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="96.2568%" y="277" width="0.0169%" height="15" fill="rgb(249,143,15)"/><text x="96.5068%" y="287.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="96.2568%" y="261" width="0.0169%" height="15" fill="rgb(253,133,29)"/><text x="96.5068%" y="271.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.02%)</title><rect x="96.2568%" y="245" width="0.0169%" height="15" fill="rgb(221,187,0)"/><text x="96.5068%" y="255.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.02%)</title><rect x="96.2568%" y="229" width="0.0169%" height="15" fill="rgb(205,204,26)"/><text x="96.5068%" y="239.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.02%)</title><rect x="96.2568%" y="213" width="0.0169%" height="15" fill="rgb(224,68,54)"/><text x="96.5068%" y="223.50"></text></g><g><title>__libc_recv (1 samples, 0.02%)</title><rect x="96.2568%" y="197" width="0.0169%" height="15" fill="rgb(209,67,4)"/><text x="96.5068%" y="207.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.02%)</title><rect x="96.2737%" y="293" width="0.0169%" height="15" fill="rgb(228,229,18)"/><text x="96.5237%" y="303.50"></text></g><g><title>tokio::io::driver::Inner::register (2 samples, 0.03%)</title><rect x="96.2907%" y="229" width="0.0339%" height="15" fill="rgb(231,89,13)"/><text x="96.5407%" y="239.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register (2 samples, 0.03%)</title><rect x="96.2907%" y="213" width="0.0339%" height="15" fill="rgb(210,182,18)"/><text x="96.5407%" y="223.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (2 samples, 0.03%)</title><rect x="96.2907%" y="197" width="0.0339%" height="15" fill="rgb(240,105,2)"/><text x="96.5407%" y="207.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.03%)</title><rect x="96.2907%" y="181" width="0.0339%" height="15" fill="rgb(207,170,50)"/><text x="96.5407%" y="191.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (2 samples, 0.03%)</title><rect x="96.2907%" y="165" width="0.0339%" height="15" fill="rgb(232,133,24)"/><text x="96.5407%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="96.2907%" y="149" width="0.0339%" height="15" fill="rgb(235,166,27)"/><text x="96.5407%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="96.2907%" y="133" width="0.0339%" height="15" fill="rgb(209,19,13)"/><text x="96.5407%" y="143.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="96.2907%" y="117" width="0.0339%" height="15" fill="rgb(226,79,39)"/><text x="96.5407%" y="127.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (2 samples, 0.03%)</title><rect x="96.2907%" y="101" width="0.0339%" height="15" fill="rgb(222,163,10)"/><text x="96.5407%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (1 samples, 0.02%)</title><rect x="96.3076%" y="85" width="0.0169%" height="15" fill="rgb(214,44,19)"/><text x="96.5576%" y="95.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.02%)</title><rect x="96.3076%" y="69" width="0.0169%" height="15" fill="rgb(210,217,13)"/><text x="96.5576%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.02%)</title><rect x="96.3076%" y="53" width="0.0169%" height="15" fill="rgb(237,61,54)"/><text x="96.5576%" y="63.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.02%)</title><rect x="96.3076%" y="37" width="0.0169%" height="15" fill="rgb(226,184,24)"/><text x="96.5576%" y="47.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::clear_read_ready (3 samples, 0.05%)</title><rect x="96.2907%" y="293" width="0.0508%" height="15" fill="rgb(223,226,4)"/><text x="96.5407%" y="303.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (3 samples, 0.05%)</title><rect x="96.2907%" y="277" width="0.0508%" height="15" fill="rgb(210,26,41)"/><text x="96.5407%" y="287.50"></text></g><g><title>tokio::io::registration::Registration::poll_read_ready (3 samples, 0.05%)</title><rect x="96.2907%" y="261" width="0.0508%" height="15" fill="rgb(220,221,6)"/><text x="96.5407%" y="271.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (3 samples, 0.05%)</title><rect x="96.2907%" y="245" width="0.0508%" height="15" fill="rgb(225,89,49)"/><text x="96.5407%" y="255.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (1 samples, 0.02%)</title><rect x="96.3245%" y="229" width="0.0169%" height="15" fill="rgb(218,70,45)"/><text x="96.5745%" y="239.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready::{{closure}} (1 samples, 0.02%)</title><rect x="96.3245%" y="213" width="0.0169%" height="15" fill="rgb(238,166,21)"/><text x="96.5745%" y="223.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read_buf (6 samples, 0.10%)</title><rect x="96.2568%" y="389" width="0.1016%" height="15" fill="rgb(224,141,44)"/><text x="96.5068%" y="399.50"></text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (6 samples, 0.10%)</title><rect x="96.2568%" y="373" width="0.1016%" height="15" fill="rgb(230,12,49)"/><text x="96.5068%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.10%)</title><rect x="96.2568%" y="357" width="0.1016%" height="15" fill="rgb(212,174,12)"/><text x="96.5068%" y="367.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.10%)</title><rect x="96.2568%" y="341" width="0.1016%" height="15" fill="rgb(246,67,9)"/><text x="96.5068%" y="351.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (6 samples, 0.10%)</title><rect x="96.2568%" y="325" width="0.1016%" height="15" fill="rgb(239,35,23)"/><text x="96.5068%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 0.10%)</title><rect x="96.2568%" y="309" width="0.1016%" height="15" fill="rgb(211,167,0)"/><text x="96.5068%" y="319.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (1 samples, 0.02%)</title><rect x="96.3415%" y="293" width="0.0169%" height="15" fill="rgb(225,119,45)"/><text x="96.5915%" y="303.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (40 samples, 0.68%)</title><rect x="96.2568%" y="437" width="0.6775%" height="15" fill="rgb(210,162,6)"/><text x="96.5068%" y="447.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (40 samples, 0.68%)</title><rect x="96.2568%" y="421" width="0.6775%" height="15" fill="rgb(208,118,35)"/><text x="96.5068%" y="431.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (40 samples, 0.68%)</title><rect x="96.2568%" y="405" width="0.6775%" height="15" fill="rgb(239,4,53)"/><text x="96.5068%" y="415.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (34 samples, 0.58%)</title><rect x="96.3584%" y="389" width="0.5759%" height="15" fill="rgb(213,130,21)"/><text x="96.6084%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (34 samples, 0.58%)</title><rect x="96.3584%" y="373" width="0.5759%" height="15" fill="rgb(235,148,0)"/><text x="96.6084%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (34 samples, 0.58%)</title><rect x="96.3584%" y="357" width="0.5759%" height="15" fill="rgb(244,224,18)"/><text x="96.6084%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (34 samples, 0.58%)</title><rect x="96.3584%" y="341" width="0.5759%" height="15" fill="rgb(211,214,4)"/><text x="96.6084%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.58%)</title><rect x="96.3584%" y="325" width="0.5759%" height="15" fill="rgb(206,119,25)"/><text x="96.6084%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.58%)</title><rect x="96.3584%" y="309" width="0.5759%" height="15" fill="rgb(243,93,47)"/><text x="96.6084%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (34 samples, 0.58%)</title><rect x="96.3584%" y="293" width="0.5759%" height="15" fill="rgb(224,194,6)"/><text x="96.6084%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.58%)</title><rect x="96.3584%" y="277" width="0.5759%" height="15" fill="rgb(243,229,6)"/><text x="96.6084%" y="287.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.58%)</title><rect x="96.3584%" y="261" width="0.5759%" height="15" fill="rgb(207,23,50)"/><text x="96.6084%" y="271.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.58%)</title><rect x="96.3584%" y="245" width="0.5759%" height="15" fill="rgb(253,192,32)"/><text x="96.6084%" y="255.50"></text></g><g><title>_int_malloc (34 samples, 0.58%)</title><rect x="96.3584%" y="229" width="0.5759%" height="15" fill="rgb(213,21,6)"/><text x="96.6084%" y="239.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (43 samples, 0.73%)</title><rect x="96.2229%" y="453" width="0.7283%" height="15" fill="rgb(243,151,13)"/><text x="96.4729%" y="463.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (1 samples, 0.02%)</title><rect x="96.9343%" y="437" width="0.0169%" height="15" fill="rgb(233,165,41)"/><text x="97.1843%" y="447.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (1 samples, 0.02%)</title><rect x="96.9343%" y="421" width="0.0169%" height="15" fill="rgb(246,176,45)"/><text x="97.1843%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="96.9851%" y="245" width="0.0169%" height="15" fill="rgb(217,170,52)"/><text x="97.2351%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="96.9851%" y="229" width="0.0169%" height="15" fill="rgb(214,203,54)"/><text x="97.2351%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.02%)</title><rect x="96.9851%" y="213" width="0.0169%" height="15" fill="rgb(248,215,49)"/><text x="97.2351%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.03%)</title><rect x="96.9851%" y="357" width="0.0339%" height="15" fill="rgb(208,46,10)"/><text x="97.2351%" y="367.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.03%)</title><rect x="96.9851%" y="341" width="0.0339%" height="15" fill="rgb(254,5,31)"/><text x="97.2351%" y="351.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (2 samples, 0.03%)</title><rect x="96.9851%" y="325" width="0.0339%" height="15" fill="rgb(222,104,33)"/><text x="97.2351%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.03%)</title><rect x="96.9851%" y="309" width="0.0339%" height="15" fill="rgb(248,49,16)"/><text x="97.2351%" y="319.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (2 samples, 0.03%)</title><rect x="96.9851%" y="293" width="0.0339%" height="15" fill="rgb(232,198,41)"/><text x="97.2351%" y="303.50"></text></g><g><title>tokio::io::registration::Registration::poll_read_ready (2 samples, 0.03%)</title><rect x="96.9851%" y="277" width="0.0339%" height="15" fill="rgb(214,125,3)"/><text x="97.2351%" y="287.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (2 samples, 0.03%)</title><rect x="96.9851%" y="261" width="0.0339%" height="15" fill="rgb(229,220,28)"/><text x="97.2351%" y="271.50"></text></g><g><title>tokio::io::driver::Inner::register (1 samples, 0.02%)</title><rect x="97.0020%" y="245" width="0.0169%" height="15" fill="rgb(222,64,37)"/><text x="97.2520%" y="255.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register (1 samples, 0.02%)</title><rect x="97.0020%" y="229" width="0.0169%" height="15" fill="rgb(249,184,13)"/><text x="97.2520%" y="239.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (6 samples, 0.10%)</title><rect x="96.9512%" y="453" width="0.1016%" height="15" fill="rgb(252,176,6)"/><text x="97.2012%" y="463.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::require_empty_read (5 samples, 0.08%)</title><rect x="96.9682%" y="437" width="0.0847%" height="15" fill="rgb(228,153,7)"/><text x="97.2182%" y="447.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (5 samples, 0.08%)</title><rect x="96.9682%" y="421" width="0.0847%" height="15" fill="rgb(242,193,5)"/><text x="97.2182%" y="431.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.08%)</title><rect x="96.9682%" y="405" width="0.0847%" height="15" fill="rgb(232,140,9)"/><text x="97.2182%" y="415.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read_buf (4 samples, 0.07%)</title><rect x="96.9851%" y="389" width="0.0678%" height="15" fill="rgb(213,222,16)"/><text x="97.2351%" y="399.50"></text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (4 samples, 0.07%)</title><rect x="96.9851%" y="373" width="0.0678%" height="15" fill="rgb(222,75,50)"/><text x="97.2351%" y="383.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_read::AsyncRead&gt;::prepare_uninitialized_buffer (2 samples, 0.03%)</title><rect x="97.0190%" y="357" width="0.0339%" height="15" fill="rgb(205,180,2)"/><text x="97.2690%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::prepare_uninitialized_buffer (2 samples, 0.03%)</title><rect x="97.0190%" y="341" width="0.0339%" height="15" fill="rgb(216,34,7)"/><text x="97.2690%" y="351.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::prepare_uninitialized_buffer (2 samples, 0.03%)</title><rect x="97.0190%" y="325" width="0.0339%" height="15" fill="rgb(253,16,32)"/><text x="97.2690%" y="335.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (3 samples, 0.05%)</title><rect x="97.0867%" y="437" width="0.0508%" height="15" fill="rgb(208,97,28)"/><text x="97.3367%" y="447.50"></text></g><g><title>hyper::client::dispatch::Callback&lt;T,U&gt;::send (2 samples, 0.03%)</title><rect x="97.1037%" y="421" width="0.0339%" height="15" fill="rgb(225,92,11)"/><text x="97.3537%" y="431.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.03%)</title><rect x="97.1037%" y="405" width="0.0339%" height="15" fill="rgb(243,38,12)"/><text x="97.3537%" y="415.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (2 samples, 0.03%)</title><rect x="97.1037%" y="389" width="0.0339%" height="15" fill="rgb(208,139,16)"/><text x="97.3537%" y="399.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::with_rx_task (2 samples, 0.03%)</title><rect x="97.1037%" y="373" width="0.0339%" height="15" fill="rgb(227,24,9)"/><text x="97.3537%" y="383.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (2 samples, 0.03%)</title><rect x="97.1037%" y="357" width="0.0339%" height="15" fill="rgb(206,62,11)"/><text x="97.3537%" y="367.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::with_rx_task::{{closure}} (2 samples, 0.03%)</title><rect x="97.1037%" y="341" width="0.0339%" height="15" fill="rgb(228,134,27)"/><text x="97.3537%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="97.1037%" y="325" width="0.0339%" height="15" fill="rgb(205,55,33)"/><text x="97.3537%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake_by_ref (2 samples, 0.03%)</title><rect x="97.1037%" y="309" width="0.0339%" height="15" fill="rgb(243,75,43)"/><text x="97.3537%" y="319.50"></text></g><g><title>tokio::util::wake::wake_by_ref_arc_raw (2 samples, 0.03%)</title><rect x="97.1037%" y="293" width="0.0339%" height="15" fill="rgb(223,27,42)"/><text x="97.3537%" y="303.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.03%)</title><rect x="97.1037%" y="277" width="0.0339%" height="15" fill="rgb(232,189,33)"/><text x="97.3537%" y="287.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Unpark&gt;::unpark (2 samples, 0.03%)</title><rect x="97.1037%" y="261" width="0.0339%" height="15" fill="rgb(210,9,39)"/><text x="97.3537%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="97.1545%" y="405" width="0.0339%" height="15" fill="rgb(242,85,26)"/><text x="97.4045%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="97.1545%" y="389" width="0.0339%" height="15" fill="rgb(248,44,4)"/><text x="97.4045%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.03%)</title><rect x="97.1545%" y="373" width="0.0339%" height="15" fill="rgb(250,96,46)"/><text x="97.4045%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="97.1545%" y="357" width="0.0339%" height="15" fill="rgb(229,116,26)"/><text x="97.4045%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="97.1545%" y="341" width="0.0339%" height="15" fill="rgb(246,94,34)"/><text x="97.4045%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.03%)</title><rect x="97.1545%" y="325" width="0.0339%" height="15" fill="rgb(251,73,21)"/><text x="97.4045%" y="335.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="97.1883%" y="405" width="0.0339%" height="15" fill="rgb(254,121,25)"/><text x="97.4383%" y="415.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="97.1883%" y="389" width="0.0339%" height="15" fill="rgb(215,161,49)"/><text x="97.4383%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="97.1883%" y="373" width="0.0339%" height="15" fill="rgb(221,43,13)"/><text x="97.4383%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="97.1883%" y="357" width="0.0339%" height="15" fill="rgb(249,5,37)"/><text x="97.4383%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.03%)</title><rect x="97.1883%" y="341" width="0.0339%" height="15" fill="rgb(226,25,44)"/><text x="97.4383%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="97.1883%" y="325" width="0.0339%" height="15" fill="rgb(238,189,16)"/><text x="97.4383%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="97.1883%" y="309" width="0.0339%" height="15" fill="rgb(251,186,8)"/><text x="97.4383%" y="319.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.03%)</title><rect x="97.1883%" y="293" width="0.0339%" height="15" fill="rgb(254,34,31)"/><text x="97.4383%" y="303.50"></text></g><g><title>hyper::body::body::Body::new_channel (7 samples, 0.12%)</title><rect x="97.1375%" y="437" width="0.1186%" height="15" fill="rgb(225,215,27)"/><text x="97.3875%" y="447.50"></text></g><g><title>futures_channel::mpsc::channel (6 samples, 0.10%)</title><rect x="97.1545%" y="421" width="0.1016%" height="15" fill="rgb(221,192,48)"/><text x="97.4045%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (2 samples, 0.03%)</title><rect x="97.2222%" y="405" width="0.0339%" height="15" fill="rgb(219,137,20)"/><text x="97.4722%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::new (2 samples, 0.03%)</title><rect x="97.2222%" y="389" width="0.0339%" height="15" fill="rgb(219,84,11)"/><text x="97.4722%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.03%)</title><rect x="97.2222%" y="373" width="0.0339%" height="15" fill="rgb(224,10,23)"/><text x="97.4722%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.03%)</title><rect x="97.2222%" y="357" width="0.0339%" height="15" fill="rgb(248,22,39)"/><text x="97.4722%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="97.2222%" y="341" width="0.0339%" height="15" fill="rgb(212,154,20)"/><text x="97.4722%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="97.2222%" y="325" width="0.0339%" height="15" fill="rgb(236,199,50)"/><text x="97.4722%" y="335.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.03%)</title><rect x="97.2222%" y="309" width="0.0339%" height="15" fill="rgb(211,9,17)"/><text x="97.4722%" y="319.50"></text></g><g><title>hyper::proto::h1::Wants::contains (1 samples, 0.02%)</title><rect x="97.2561%" y="437" width="0.0169%" height="15" fill="rgb(243,216,36)"/><text x="97.5061%" y="447.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="97.2900%" y="389" width="0.0169%" height="15" fill="rgb(250,2,10)"/><text x="97.5400%" y="399.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (72 samples, 1.22%)</title><rect x="96.1043%" y="469" width="1.2195%" height="15" fill="rgb(226,50,48)"/><text x="96.3543%" y="479.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (16 samples, 0.27%)</title><rect x="97.0528%" y="453" width="0.2710%" height="15" fill="rgb(243,81,16)"/><text x="97.3028%" y="463.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (3 samples, 0.05%)</title><rect x="97.2730%" y="437" width="0.0508%" height="15" fill="rgb(250,14,2)"/><text x="97.5230%" y="447.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (3 samples, 0.05%)</title><rect x="97.2730%" y="421" width="0.0508%" height="15" fill="rgb(233,135,29)"/><text x="97.5230%" y="431.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (2 samples, 0.03%)</title><rect x="97.2900%" y="405" width="0.0339%" height="15" fill="rgb(224,64,43)"/><text x="97.5400%" y="415.50"></text></g><g><title>tracing::span::Span::enter (1 samples, 0.02%)</title><rect x="97.3069%" y="389" width="0.0169%" height="15" fill="rgb(238,84,13)"/><text x="97.5569%" y="399.50"></text></g><g><title>tracing_core::dispatcher::has_been_set (1 samples, 0.02%)</title><rect x="97.3069%" y="373" width="0.0169%" height="15" fill="rgb(253,48,26)"/><text x="97.5569%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.02%)</title><rect x="97.3069%" y="357" width="0.0169%" height="15" fill="rgb(205,223,31)"/><text x="97.5569%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="97.3069%" y="341" width="0.0169%" height="15" fill="rgb(221,41,32)"/><text x="97.5569%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="97.3747%" y="357" width="0.0169%" height="15" fill="rgb(213,158,31)"/><text x="97.6247%" y="367.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (3 samples, 0.05%)</title><rect x="97.3577%" y="453" width="0.0508%" height="15" fill="rgb(245,126,43)"/><text x="97.6077%" y="463.50"></text></g><g><title>hyper::client::dispatch::Receiver&lt;T,U&gt;::poll_next (3 samples, 0.05%)</title><rect x="97.3577%" y="437" width="0.0508%" height="15" fill="rgb(227,7,22)"/><text x="97.6077%" y="447.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (3 samples, 0.05%)</title><rect x="97.3577%" y="421" width="0.0508%" height="15" fill="rgb(252,90,44)"/><text x="97.6077%" y="431.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (3 samples, 0.05%)</title><rect x="97.3577%" y="405" width="0.0508%" height="15" fill="rgb(253,91,0)"/><text x="97.6077%" y="415.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 0.05%)</title><rect x="97.3577%" y="389" width="0.0508%" height="15" fill="rgb(252,175,49)"/><text x="97.6077%" y="399.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (2 samples, 0.03%)</title><rect x="97.3747%" y="373" width="0.0339%" height="15" fill="rgb(246,150,1)"/><text x="97.6247%" y="383.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="97.3916%" y="357" width="0.0169%" height="15" fill="rgb(241,192,25)"/><text x="97.6416%" y="367.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (1 samples, 0.02%)</title><rect x="97.3916%" y="341" width="0.0169%" height="15" fill="rgb(239,187,11)"/><text x="97.6416%" y="351.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_write_head (1 samples, 0.02%)</title><rect x="97.4085%" y="453" width="0.0169%" height="15" fill="rgb(218,202,51)"/><text x="97.6585%" y="463.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (1 samples, 0.02%)</title><rect x="97.4085%" y="437" width="0.0169%" height="15" fill="rgb(225,176,8)"/><text x="97.6585%" y="447.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::is_server (1 samples, 0.02%)</title><rect x="97.4085%" y="421" width="0.0169%" height="15" fill="rgb(219,122,41)"/><text x="97.6585%" y="431.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::is_client (1 samples, 0.02%)</title><rect x="97.4085%" y="405" width="0.0169%" height="15" fill="rgb(248,140,20)"/><text x="97.6585%" y="415.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (14 samples, 0.24%)</title><rect x="97.4255%" y="453" width="0.2371%" height="15" fill="rgb(245,41,37)"/><text x="97.6755%" y="463.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (14 samples, 0.24%)</title><rect x="97.4255%" y="437" width="0.2371%" height="15" fill="rgb(235,82,39)"/><text x="97.6755%" y="447.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (14 samples, 0.24%)</title><rect x="97.4255%" y="421" width="0.2371%" height="15" fill="rgb(230,108,42)"/><text x="97.6755%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.24%)</title><rect x="97.4255%" y="405" width="0.2371%" height="15" fill="rgb(215,150,50)"/><text x="97.6755%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.24%)</title><rect x="97.4255%" y="389" width="0.2371%" height="15" fill="rgb(233,212,5)"/><text x="97.6755%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (14 samples, 0.24%)</title><rect x="97.4255%" y="373" width="0.2371%" height="15" fill="rgb(245,80,22)"/><text x="97.6755%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.24%)</title><rect x="97.4255%" y="357" width="0.2371%" height="15" fill="rgb(238,129,16)"/><text x="97.6755%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.24%)</title><rect x="97.4255%" y="341" width="0.2371%" height="15" fill="rgb(240,19,0)"/><text x="97.6755%" y="351.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (1 samples, 0.02%)</title><rect x="97.6965%" y="389" width="0.0169%" height="15" fill="rgb(232,42,35)"/><text x="97.9465%" y="399.50"></text></g><g><title>&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_fmt (2 samples, 0.03%)</title><rect x="97.7134%" y="389" width="0.0339%" height="15" fill="rgb(223,130,24)"/><text x="97.9634%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.03%)</title><rect x="97.7134%" y="373" width="0.0339%" height="15" fill="rgb(237,16,22)"/><text x="97.9634%" y="383.50"></text></g><g><title>&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (2 samples, 0.03%)</title><rect x="97.7134%" y="357" width="0.0339%" height="15" fill="rgb(248,192,20)"/><text x="97.9634%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.02%)</title><rect x="97.7304%" y="341" width="0.0169%" height="15" fill="rgb(233,167,2)"/><text x="97.9804%" y="351.50"></text></g><g><title>hyper::headers::content_length_parse_all (1 samples, 0.02%)</title><rect x="97.7473%" y="373" width="0.0169%" height="15" fill="rgb(252,71,44)"/><text x="97.9973%" y="383.50"></text></g><g><title>hyper::headers::content_length_parse_all_values (1 samples, 0.02%)</title><rect x="97.7473%" y="357" width="0.0169%" height="15" fill="rgb(238,37,47)"/><text x="97.9973%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="97.7473%" y="341" width="0.0169%" height="15" fill="rgb(214,202,54)"/><text x="97.9973%" y="351.50"></text></g><g><title>&lt;http::header::map::ValueIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="97.7473%" y="325" width="0.0169%" height="15" fill="rgb(254,165,40)"/><text x="97.9973%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (1 samples, 0.02%)</title><rect x="97.7642%" y="341" width="0.0169%" height="15" fill="rgb(246,173,38)"/><text x="98.0142%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.02%)</title><rect x="97.7642%" y="325" width="0.0169%" height="15" fill="rgb(215,3,27)"/><text x="98.0142%" y="335.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.02%)</title><rect x="97.7642%" y="309" width="0.0169%" height="15" fill="rgb(239,169,51)"/><text x="98.0142%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::into_boxed_slice (1 samples, 0.02%)</title><rect x="97.7642%" y="293" width="0.0169%" height="15" fill="rgb(212,5,25)"/><text x="98.0142%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::shrink_to_fit (1 samples, 0.02%)</title><rect x="97.7642%" y="277" width="0.0169%" height="15" fill="rgb(243,45,17)"/><text x="98.0142%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.02%)</title><rect x="97.7642%" y="261" width="0.0169%" height="15" fill="rgb(242,97,9)"/><text x="98.0142%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.02%)</title><rect x="97.7642%" y="245" width="0.0169%" height="15" fill="rgb(228,71,31)"/><text x="98.0142%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::shrink (1 samples, 0.02%)</title><rect x="97.7642%" y="229" width="0.0169%" height="15" fill="rgb(252,184,16)"/><text x="98.0142%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="97.7642%" y="213" width="0.0169%" height="15" fill="rgb(236,169,46)"/><text x="98.0142%" y="223.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="97.7642%" y="197" width="0.0169%" height="15" fill="rgb(207,17,47)"/><text x="98.0142%" y="207.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="97.7642%" y="181" width="0.0169%" height="15" fill="rgb(206,201,28)"/><text x="98.0142%" y="191.50"></text></g><g><title>&lt;http::header::value::HeaderValue as core::convert::From&lt;u64&gt;&gt;::from (2 samples, 0.03%)</title><rect x="97.7642%" y="357" width="0.0339%" height="15" fill="rgb(224,184,23)"/><text x="98.0142%" y="367.50"></text></g><g><title>bytes::bytes_mut::BytesMut::new (1 samples, 0.02%)</title><rect x="97.7812%" y="341" width="0.0169%" height="15" fill="rgb(208,139,48)"/><text x="98.0312%" y="351.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (1 samples, 0.02%)</title><rect x="97.7812%" y="325" width="0.0169%" height="15" fill="rgb(208,130,10)"/><text x="98.0312%" y="335.50"></text></g><g><title>bytes::bytes_mut::BytesMut::from_vec (1 samples, 0.02%)</title><rect x="97.7812%" y="309" width="0.0169%" height="15" fill="rgb(211,213,45)"/><text x="98.0312%" y="319.50"></text></g><g><title>bytes::bytes_mut::original_capacity_to_repr (1 samples, 0.02%)</title><rect x="97.7812%" y="293" width="0.0169%" height="15" fill="rgb(235,100,30)"/><text x="98.0312%" y="303.50"></text></g><g><title>hyper::proto::h1::role::Client::set_length (4 samples, 0.07%)</title><rect x="97.7473%" y="389" width="0.0678%" height="15" fill="rgb(206,144,31)"/><text x="97.9973%" y="399.50"></text></g><g><title>hyper::proto::h1::role::set_content_length (3 samples, 0.05%)</title><rect x="97.7642%" y="373" width="0.0508%" height="15" fill="rgb(224,200,26)"/><text x="98.0142%" y="383.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (1 samples, 0.02%)</title><rect x="97.7981%" y="357" width="0.0169%" height="15" fill="rgb(247,104,53)"/><text x="98.0481%" y="367.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (1 samples, 0.02%)</title><rect x="97.7981%" y="341" width="0.0169%" height="15" fill="rgb(220,14,17)"/><text x="98.0481%" y="351.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (1 samples, 0.02%)</title><rect x="97.7981%" y="325" width="0.0169%" height="15" fill="rgb(230,140,40)"/><text x="98.0481%" y="335.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (1 samples, 0.02%)</title><rect x="97.7981%" y="309" width="0.0169%" height="15" fill="rgb(229,2,41)"/><text x="98.0481%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.02%)</title><rect x="97.7981%" y="293" width="0.0169%" height="15" fill="rgb(232,89,16)"/><text x="98.0481%" y="303.50"></text></g><g><title>http::header::name::HeaderName::as_str (1 samples, 0.02%)</title><rect x="97.8150%" y="373" width="0.0169%" height="15" fill="rgb(247,59,52)"/><text x="98.0650%" y="383.50"></text></g><g><title>&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (11 samples, 0.19%)</title><rect x="97.6626%" y="405" width="0.1863%" height="15" fill="rgb(226,110,21)"/><text x="97.9126%" y="415.50"></text></g><g><title>hyper::proto::h1::role::write_headers (2 samples, 0.03%)</title><rect x="97.8150%" y="389" width="0.0339%" height="15" fill="rgb(224,176,43)"/><text x="98.0650%" y="399.50"></text></g><g><title>hyper::proto::h1::role::extend (1 samples, 0.02%)</title><rect x="97.8320%" y="373" width="0.0169%" height="15" fill="rgb(221,73,6)"/><text x="98.0820%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="97.8320%" y="357" width="0.0169%" height="15" fill="rgb(232,78,19)"/><text x="98.0820%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="97.8320%" y="341" width="0.0169%" height="15" fill="rgb(233,112,48)"/><text x="98.0820%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.02%)</title><rect x="97.8320%" y="325" width="0.0169%" height="15" fill="rgb(243,131,47)"/><text x="98.0820%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="97.8320%" y="309" width="0.0169%" height="15" fill="rgb(226,51,1)"/><text x="98.0820%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="97.8320%" y="293" width="0.0169%" height="15" fill="rgb(247,58,7)"/><text x="98.0820%" y="303.50"></text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::{{closure}}::{{closure}} (116 samples, 1.96%)</title><rect x="95.9180%" y="885" width="1.9648%" height="15" fill="rgb(209,7,32)"/><text x="96.1680%" y="895.50">t..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (116 samples, 1.96%)</title><rect x="95.9180%" y="869" width="1.9648%" height="15" fill="rgb(209,39,41)"/><text x="96.1680%" y="879.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="853" width="1.9648%" height="15" fill="rgb(226,182,46)"/><text x="96.1680%" y="863.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="837" width="1.9648%" height="15" fill="rgb(230,219,10)"/><text x="96.1680%" y="847.50">t..</text></g><g><title>std::panic::catch_unwind (116 samples, 1.96%)</title><rect x="95.9180%" y="821" width="1.9648%" height="15" fill="rgb(227,175,30)"/><text x="96.1680%" y="831.50">s..</text></g><g><title>std::panicking::try (116 samples, 1.96%)</title><rect x="95.9180%" y="805" width="1.9648%" height="15" fill="rgb(217,2,50)"/><text x="96.1680%" y="815.50">s..</text></g><g><title>std::panicking::try::do_call (116 samples, 1.96%)</title><rect x="95.9180%" y="789" width="1.9648%" height="15" fill="rgb(229,160,0)"/><text x="96.1680%" y="799.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (116 samples, 1.96%)</title><rect x="95.9180%" y="773" width="1.9648%" height="15" fill="rgb(207,78,37)"/><text x="96.1680%" y="783.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (116 samples, 1.96%)</title><rect x="95.9180%" y="757" width="1.9648%" height="15" fill="rgb(225,57,0)"/><text x="96.1680%" y="767.50">c..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (116 samples, 1.96%)</title><rect x="95.9180%" y="741" width="1.9648%" height="15" fill="rgb(232,154,2)"/><text x="96.1680%" y="751.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="725" width="1.9648%" height="15" fill="rgb(241,212,25)"/><text x="96.1680%" y="735.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (116 samples, 1.96%)</title><rect x="95.9180%" y="709" width="1.9648%" height="15" fill="rgb(226,69,20)"/><text x="96.1680%" y="719.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (116 samples, 1.96%)</title><rect x="95.9180%" y="693" width="1.9648%" height="15" fill="rgb(247,184,54)"/><text x="96.1680%" y="703.50">t..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="677" width="1.9648%" height="15" fill="rgb(210,145,0)"/><text x="96.1680%" y="687.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="661" width="1.9648%" height="15" fill="rgb(253,82,12)"/><text x="96.1680%" y="671.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="645" width="1.9648%" height="15" fill="rgb(245,42,11)"/><text x="96.1680%" y="655.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="629" width="1.9648%" height="15" fill="rgb(219,147,32)"/><text x="96.1680%" y="639.50">&lt;..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="613" width="1.9648%" height="15" fill="rgb(246,12,7)"/><text x="96.1680%" y="623.50">&lt;..</text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="597" width="1.9648%" height="15" fill="rgb(243,50,9)"/><text x="96.1680%" y="607.50">&lt;..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (116 samples, 1.96%)</title><rect x="95.9180%" y="581" width="1.9648%" height="15" fill="rgb(219,149,6)"/><text x="96.1680%" y="591.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="565" width="1.9648%" height="15" fill="rgb(241,51,42)"/><text x="96.1680%" y="575.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="549" width="1.9648%" height="15" fill="rgb(226,128,27)"/><text x="96.1680%" y="559.50">&lt;..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (116 samples, 1.96%)</title><rect x="95.9180%" y="533" width="1.9648%" height="15" fill="rgb(244,144,4)"/><text x="96.1680%" y="543.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (115 samples, 1.95%)</title><rect x="95.9350%" y="517" width="1.9478%" height="15" fill="rgb(221,4,13)"/><text x="96.1850%" y="527.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (115 samples, 1.95%)</title><rect x="95.9350%" y="501" width="1.9478%" height="15" fill="rgb(208,170,28)"/><text x="96.1850%" y="511.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (115 samples, 1.95%)</title><rect x="95.9350%" y="485" width="1.9478%" height="15" fill="rgb(226,131,13)"/><text x="96.1850%" y="495.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (33 samples, 0.56%)</title><rect x="97.3238%" y="469" width="0.5589%" height="15" fill="rgb(215,72,41)"/><text x="97.5738%" y="479.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (13 samples, 0.22%)</title><rect x="97.6626%" y="453" width="0.2202%" height="15" fill="rgb(243,108,20)"/><text x="97.9126%" y="463.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (13 samples, 0.22%)</title><rect x="97.6626%" y="437" width="0.2202%" height="15" fill="rgb(230,189,17)"/><text x="97.9126%" y="447.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (13 samples, 0.22%)</title><rect x="97.6626%" y="421" width="0.2202%" height="15" fill="rgb(220,50,17)"/><text x="97.9126%" y="431.50"></text></g><g><title>tracing::span::Span::record_all (2 samples, 0.03%)</title><rect x="97.8489%" y="405" width="0.0339%" height="15" fill="rgb(248,152,48)"/><text x="98.0989%" y="415.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (117 samples, 1.98%)</title><rect x="95.9180%" y="1013" width="1.9817%" height="15" fill="rgb(244,91,11)"/><text x="96.1680%" y="1023.50">t..</text></g><g><title>tokio::runtime::basic_scheduler::enter::{{closure}} (117 samples, 1.98%)</title><rect x="95.9180%" y="997" width="1.9817%" height="15" fill="rgb(220,157,5)"/><text x="96.1680%" y="1007.50">t..</text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::{{closure}} (117 samples, 1.98%)</title><rect x="95.9180%" y="981" width="1.9817%" height="15" fill="rgb(253,137,8)"/><text x="96.1680%" y="991.50">t..</text></g><g><title>tokio::coop::budget (117 samples, 1.98%)</title><rect x="95.9180%" y="965" width="1.9817%" height="15" fill="rgb(217,137,51)"/><text x="96.1680%" y="975.50">t..</text></g><g><title>tokio::coop::with_budget (117 samples, 1.98%)</title><rect x="95.9180%" y="949" width="1.9817%" height="15" fill="rgb(218,209,53)"/><text x="96.1680%" y="959.50">t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (117 samples, 1.98%)</title><rect x="95.9180%" y="933" width="1.9817%" height="15" fill="rgb(249,137,25)"/><text x="96.1680%" y="943.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (117 samples, 1.98%)</title><rect x="95.9180%" y="917" width="1.9817%" height="15" fill="rgb(239,155,26)"/><text x="96.1680%" y="927.50">s..</text></g><g><title>tokio::coop::with_budget::{{closure}} (117 samples, 1.98%)</title><rect x="95.9180%" y="901" width="1.9817%" height="15" fill="rgb(227,85,46)"/><text x="96.1680%" y="911.50">t..</text></g><g><title>tokio::runtime::shell::Shell::block_on::{{closure}} (1 samples, 0.02%)</title><rect x="97.8828%" y="885" width="0.0169%" height="15" fill="rgb(251,107,43)"/><text x="98.1328%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="97.8828%" y="869" width="0.0169%" height="15" fill="rgb(234,170,33)"/><text x="98.1328%" y="879.50"></text></g><g><title>cf_log_sender::main::{{closure}} (1 samples, 0.02%)</title><rect x="97.8828%" y="853" width="0.0169%" height="15" fill="rgb(206,29,35)"/><text x="98.1328%" y="863.50"></text></g><g><title>__rust_probestack (1 samples, 0.02%)</title><rect x="97.8828%" y="837" width="0.0169%" height="15" fill="rgb(227,138,25)"/><text x="98.1328%" y="847.50"></text></g><g><title>&lt;mio::poll::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.0014%" y="853" width="0.0169%" height="15" fill="rgb(249,131,35)"/><text x="98.2514%" y="863.50"></text></g><g><title>mio::sys::unix::epoll::Events::get (1 samples, 0.02%)</title><rect x="98.0014%" y="837" width="0.0169%" height="15" fill="rgb(239,6,40)"/><text x="98.2514%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.02%)</title><rect x="98.0014%" y="821" width="0.0169%" height="15" fill="rgb(246,136,47)"/><text x="98.2514%" y="831.50"></text></g><g><title>mio::event_imp::Event::token (1 samples, 0.02%)</title><rect x="98.0183%" y="853" width="0.0169%" height="15" fill="rgb(253,58,26)"/><text x="98.2683%" y="863.50"></text></g><g><title>mio::poll::Events::iter (6 samples, 0.10%)</title><rect x="98.0352%" y="853" width="0.1016%" height="15" fill="rgb(237,141,10)"/><text x="98.2852%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (1 samples, 0.02%)</title><rect x="98.1538%" y="821" width="0.0169%" height="15" fill="rgb(234,156,12)"/><text x="98.4038%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_and (1 samples, 0.02%)</title><rect x="98.1538%" y="805" width="0.0169%" height="15" fill="rgb(243,224,36)"/><text x="98.4038%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="98.2215%" y="789" width="0.0169%" height="15" fill="rgb(205,229,51)"/><text x="98.4715%" y="799.50"></text></g><g><title>mio::poll::ReadinessQueueInner::dequeue_node (5 samples, 0.08%)</title><rect x="98.2385%" y="789" width="0.0847%" height="15" fill="rgb(223,189,4)"/><text x="98.4885%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.02%)</title><rect x="98.3062%" y="773" width="0.0169%" height="15" fill="rgb(249,167,54)"/><text x="98.5562%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.02%)</title><rect x="98.3062%" y="757" width="0.0169%" height="15" fill="rgb(218,34,28)"/><text x="98.5562%" y="767.50"></text></g><g><title>mio::poll::ReadinessQueue::poll (7 samples, 0.12%)</title><rect x="98.2215%" y="805" width="0.1186%" height="15" fill="rgb(232,109,42)"/><text x="98.4715%" y="815.50"></text></g><g><title>mio::sys::unix::epoll::Events::len (1 samples, 0.02%)</title><rect x="98.3232%" y="789" width="0.0169%" height="15" fill="rgb(248,214,46)"/><text x="98.5732%" y="799.50"></text></g><g><title>mio::poll::ReadinessQueue::prepare_for_sleep (1 samples, 0.02%)</title><rect x="98.3401%" y="805" width="0.0169%" height="15" fill="rgb(244,216,40)"/><text x="98.5901%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.4079%" y="773" width="0.0847%" height="15" fill="rgb(231,226,31)"/><text x="98.6579%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.4079%" y="757" width="0.0847%" height="15" fill="rgb(238,38,43)"/><text x="98.6579%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.08%)</title><rect x="98.4079%" y="741" width="0.0847%" height="15" fill="rgb(208,88,43)"/><text x="98.6579%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4248%" y="725" width="0.0678%" height="15" fill="rgb(205,136,37)"/><text x="98.6748%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.07%)</title><rect x="98.4248%" y="709" width="0.0678%" height="15" fill="rgb(237,34,14)"/><text x="98.6748%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4417%" y="693" width="0.0508%" height="15" fill="rgb(236,193,44)"/><text x="98.6917%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4417%" y="677" width="0.0508%" height="15" fill="rgb(231,48,10)"/><text x="98.6917%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="98.4417%" y="661" width="0.0508%" height="15" fill="rgb(213,141,34)"/><text x="98.6917%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="98.4756%" y="645" width="0.0169%" height="15" fill="rgb(249,130,34)"/><text x="98.7256%" y="655.50"></text></g><g><title>epoll_wait (9 samples, 0.15%)</title><rect x="98.3909%" y="789" width="0.1524%" height="15" fill="rgb(219,42,41)"/><text x="98.6409%" y="799.50"></text></g><g><title>__libc_disable_asynccancel (3 samples, 0.05%)</title><rect x="98.4925%" y="773" width="0.0508%" height="15" fill="rgb(224,100,54)"/><text x="98.7425%" y="783.50"></text></g><g><title>mio::poll::Poll::poll (33 samples, 0.56%)</title><rect x="98.1369%" y="853" width="0.5589%" height="15" fill="rgb(229,200,27)"/><text x="98.3869%" y="863.50"></text></g><g><title>mio::poll::Poll::poll1 (32 samples, 0.54%)</title><rect x="98.1538%" y="837" width="0.5420%" height="15" fill="rgb(217,118,10)"/><text x="98.4038%" y="847.50"></text></g><g><title>mio::poll::Poll::poll2 (31 samples, 0.53%)</title><rect x="98.1707%" y="821" width="0.5251%" height="15" fill="rgb(206,22,3)"/><text x="98.4207%" y="831.50"></text></g><g><title>mio::sys::unix::epoll::Selector::select (20 samples, 0.34%)</title><rect x="98.3570%" y="805" width="0.3388%" height="15" fill="rgb(232,163,46)"/><text x="98.6070%" y="815.50"></text></g><g><title>mio::sys::unix::cvt (9 samples, 0.15%)</title><rect x="98.5434%" y="789" width="0.1524%" height="15" fill="rgb(206,95,13)"/><text x="98.7934%" y="799.50"></text></g><g><title>&lt;mio::event_imp::Ready as core::ops::bit::BitAnd&lt;T&gt;&gt;::bitand (1 samples, 0.02%)</title><rect x="98.7127%" y="837" width="0.0169%" height="15" fill="rgb(253,154,18)"/><text x="98.9627%" y="847.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.9329%" y="709" width="0.0508%" height="15" fill="rgb(219,32,23)"/><text x="99.1829%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="98.9329%" y="693" width="0.0508%" height="15" fill="rgb(230,191,45)"/><text x="99.1829%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.05%)</title><rect x="98.9329%" y="677" width="0.0508%" height="15" fill="rgb(229,64,36)"/><text x="99.1829%" y="687.50"></text></g><g><title>tokio::runtime::basic_scheduler::CURRENT::FOO::__getit (3 samples, 0.05%)</title><rect x="98.9329%" y="661" width="0.0508%" height="15" fill="rgb(205,129,25)"/><text x="99.1829%" y="671.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (3 samples, 0.05%)</title><rect x="98.9329%" y="645" width="0.0508%" height="15" fill="rgb(254,112,7)"/><text x="99.1829%" y="655.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (3 samples, 0.05%)</title><rect x="98.9329%" y="629" width="0.0508%" height="15" fill="rgb(226,53,48)"/><text x="99.1829%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.05%)</title><rect x="98.9329%" y="613" width="0.0508%" height="15" fill="rgb(214,153,38)"/><text x="99.1829%" y="623.50"></text></g><g><title>tokio::runtime::basic_scheduler::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;::schedule::{{closure}} (1 samples, 0.02%)</title><rect x="98.9837%" y="693" width="0.0169%" height="15" fill="rgb(243,101,7)"/><text x="99.2337%" y="703.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::schedule (7 samples, 0.12%)</title><rect x="98.8991%" y="773" width="0.1186%" height="15" fill="rgb(240,140,22)"/><text x="99.1491%" y="783.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (7 samples, 0.12%)</title><rect x="98.8991%" y="757" width="0.1186%" height="15" fill="rgb(235,114,2)"/><text x="99.1491%" y="767.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::schedule::{{closure}} (7 samples, 0.12%)</title><rect x="98.8991%" y="741" width="0.1186%" height="15" fill="rgb(242,59,12)"/><text x="99.1491%" y="751.50"></text></g><g><title>tokio::runtime::basic_scheduler::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;::schedule (7 samples, 0.12%)</title><rect x="98.8991%" y="725" width="0.1186%" height="15" fill="rgb(252,134,9)"/><text x="99.1491%" y="735.50"></text></g><g><title>tokio::runtime::basic_scheduler::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;::schedule (2 samples, 0.03%)</title><rect x="98.9837%" y="709" width="0.0339%" height="15" fill="rgb(236,4,44)"/><text x="99.2337%" y="719.50"></text></g><g><title>tokio::runtime::basic_scheduler::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::basic_scheduler::Shared&gt;&gt;::schedule::_{{closure}} (1 samples, 0.02%)</title><rect x="99.0007%" y="693" width="0.0169%" height="15" fill="rgb(254,172,41)"/><text x="99.2507%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::to_task (5 samples, 0.08%)</title><rect x="99.0176%" y="773" width="0.0847%" height="15" fill="rgb(244,63,20)"/><text x="99.2676%" y="783.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (5 samples, 0.08%)</title><rect x="99.0176%" y="757" width="0.0847%" height="15" fill="rgb(250,73,31)"/><text x="99.2676%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (5 samples, 0.08%)</title><rect x="99.0176%" y="741" width="0.0847%" height="15" fill="rgb(241,38,36)"/><text x="99.2676%" y="751.50"></text></g><g><title>core::task::wake::Waker::wake (30 samples, 0.51%)</title><rect x="98.7297%" y="837" width="0.5081%" height="15" fill="rgb(245,211,2)"/><text x="98.9797%" y="847.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (30 samples, 0.51%)</title><rect x="98.7297%" y="821" width="0.5081%" height="15" fill="rgb(206,120,28)"/><text x="98.9797%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_val (20 samples, 0.34%)</title><rect x="98.8991%" y="805" width="0.3388%" height="15" fill="rgb(211,59,34)"/><text x="99.1491%" y="815.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::wake_by_ref (20 samples, 0.34%)</title><rect x="98.8991%" y="789" width="0.3388%" height="15" fill="rgb(233,168,5)"/><text x="99.1491%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified (8 samples, 0.14%)</title><rect x="99.1023%" y="773" width="0.1355%" height="15" fill="rgb(234,33,13)"/><text x="99.3523%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (8 samples, 0.14%)</title><rect x="99.1023%" y="757" width="0.1355%" height="15" fill="rgb(231,150,26)"/><text x="99.3523%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_or (8 samples, 0.14%)</title><rect x="99.1023%" y="741" width="0.1355%" height="15" fill="rgb(217,191,4)"/><text x="99.3523%" y="751.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (1 samples, 0.02%)</title><rect x="99.2378%" y="837" width="0.0169%" height="15" fill="rgb(246,198,38)"/><text x="99.4878%" y="847.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.02%)</title><rect x="99.2378%" y="821" width="0.0169%" height="15" fill="rgb(245,64,37)"/><text x="99.4878%" y="831.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (1 samples, 0.02%)</title><rect x="99.2547%" y="837" width="0.0169%" height="15" fill="rgb(250,30,36)"/><text x="99.5047%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (1 samples, 0.02%)</title><rect x="99.2547%" y="821" width="0.0169%" height="15" fill="rgb(217,86,53)"/><text x="99.5047%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_and (1 samples, 0.02%)</title><rect x="99.2547%" y="805" width="0.0169%" height="15" fill="rgb(228,157,16)"/><text x="99.5047%" y="815.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (82 samples, 1.39%)</title><rect x="97.9336%" y="901" width="1.3889%" height="15" fill="rgb(217,59,31)"/><text x="98.1836%" y="911.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (82 samples, 1.39%)</title><rect x="97.9336%" y="885" width="1.3889%" height="15" fill="rgb(237,138,41)"/><text x="98.1836%" y="895.50"></text></g><g><title>tokio::io::driver::Driver::turn (79 samples, 1.34%)</title><rect x="97.9844%" y="869" width="1.3381%" height="15" fill="rgb(227,91,49)"/><text x="98.2344%" y="879.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (37 samples, 0.63%)</title><rect x="98.6958%" y="853" width="0.6267%" height="15" fill="rgb(247,21,44)"/><text x="98.9458%" y="863.50"></text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::get (3 samples, 0.05%)</title><rect x="99.2717%" y="837" width="0.0508%" height="15" fill="rgb(219,210,51)"/><text x="99.5217%" y="847.50"></text></g><g><title>tokio::util::slab::shard::Shard&lt;T&gt;::get (3 samples, 0.05%)</title><rect x="99.2717%" y="821" width="0.0508%" height="15" fill="rgb(209,140,6)"/><text x="99.5217%" y="831.50"></text></g><g><title>tokio::util::slab::page::Shared&lt;T&gt;::get (3 samples, 0.05%)</title><rect x="99.2717%" y="805" width="0.0508%" height="15" fill="rgb(221,188,24)"/><text x="99.5217%" y="815.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (3 samples, 0.05%)</title><rect x="99.2717%" y="789" width="0.0508%" height="15" fill="rgb(232,154,20)"/><text x="99.5217%" y="799.50"></text></g><g><title>tokio::util::slab::page::Shared&lt;T&gt;::get::{{closure}} (3 samples, 0.05%)</title><rect x="99.2717%" y="773" width="0.0508%" height="15" fill="rgb(244,137,50)"/><text x="99.5217%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.05%)</title><rect x="99.2717%" y="757" width="0.0508%" height="15" fill="rgb(225,185,43)"/><text x="99.5217%" y="767.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.08%)</title><rect x="99.3902%" y="885" width="0.0847%" height="15" fill="rgb(213,205,38)"/><text x="99.6402%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.08%)</title><rect x="99.3902%" y="869" width="0.0847%" height="15" fill="rgb(236,73,12)"/><text x="99.6402%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.08%)</title><rect x="99.3902%" y="853" width="0.0847%" height="15" fill="rgb(235,219,13)"/><text x="99.6402%" y="863.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.02%)</title><rect x="99.4580%" y="837" width="0.0169%" height="15" fill="rgb(218,59,36)"/><text x="99.7080%" y="847.50"></text></g><g><title>tokio::time::driver::Driver&lt;T&gt;::process (10 samples, 0.17%)</title><rect x="99.3225%" y="901" width="0.1694%" height="15" fill="rgb(205,110,39)"/><text x="99.5725%" y="911.50"></text></g><g><title>tokio::time::wheel::Wheel&lt;T&gt;::poll (1 samples, 0.02%)</title><rect x="99.4749%" y="885" width="0.0169%" height="15" fill="rgb(218,206,42)"/><text x="99.7249%" y="895.50"></text></g><g><title>tokio::time::wheel::Wheel&lt;T&gt;::next_expiration (1 samples, 0.02%)</title><rect x="99.4749%" y="869" width="0.0169%" height="15" fill="rgb(248,125,24)"/><text x="99.7249%" y="879.50"></text></g><g><title>tokio::time::wheel::level::Level&lt;T&gt;::next_expiration (1 samples, 0.02%)</title><rect x="99.4749%" y="853" width="0.0169%" height="15" fill="rgb(242,28,27)"/><text x="99.7249%" y="863.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (95 samples, 1.61%)</title><rect x="97.8997%" y="933" width="1.6091%" height="15" fill="rgb(216,228,15)"/><text x="98.1497%" y="943.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;T&gt; as tokio::park::Park&gt;::park (95 samples, 1.61%)</title><rect x="97.8997%" y="917" width="1.6091%" height="15" fill="rgb(235,116,46)"/><text x="98.1497%" y="927.50"></text></g><g><title>tokio::time::driver::Driver&lt;T&gt;::process_queue (1 samples, 0.02%)</title><rect x="99.4919%" y="901" width="0.0169%" height="15" fill="rgb(224,18,32)"/><text x="99.7419%" y="911.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (1 samples, 0.02%)</title><rect x="99.5088%" y="933" width="0.0169%" height="15" fill="rgb(252,5,12)"/><text x="99.7588%" y="943.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="99.5257%" y="933" width="0.0169%" height="15" fill="rgb(251,36,5)"/><text x="99.7757%" y="943.50"></text></g><g><title>tokio::coop::Budget::initial (1 samples, 0.02%)</title><rect x="99.5427%" y="917" width="0.0169%" height="15" fill="rgb(217,53,14)"/><text x="99.7927%" y="927.50"></text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::{{closure}}::{{closure}} (5 samples, 0.08%)</title><rect x="99.5596%" y="853" width="0.0847%" height="15" fill="rgb(215,86,45)"/><text x="99.8096%" y="863.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (5 samples, 0.08%)</title><rect x="99.5596%" y="837" width="0.0847%" height="15" fill="rgb(242,169,11)"/><text x="99.8096%" y="847.50"></text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.08%)</title><rect x="99.5596%" y="821" width="0.0847%" height="15" fill="rgb(211,213,45)"/><text x="99.8096%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.03%)</title><rect x="99.6104%" y="805" width="0.0339%" height="15" fill="rgb(205,88,11)"/><text x="99.8604%" y="815.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="99.6104%" y="789" width="0.0339%" height="15" fill="rgb(252,69,26)"/><text x="99.8604%" y="799.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="99.6104%" y="773" width="0.0339%" height="15" fill="rgb(246,123,37)"/><text x="99.8604%" y="783.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="99.6104%" y="757" width="0.0339%" height="15" fill="rgb(212,205,5)"/><text x="99.8604%" y="767.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="99.6104%" y="741" width="0.0339%" height="15" fill="rgb(253,148,0)"/><text x="99.8604%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.03%)</title><rect x="99.6104%" y="725" width="0.0339%" height="15" fill="rgb(239,22,4)"/><text x="99.8604%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (2 samples, 0.03%)</title><rect x="99.6104%" y="709" width="0.0339%" height="15" fill="rgb(226,26,53)"/><text x="99.8604%" y="719.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.02%)</title><rect x="99.6274%" y="693" width="0.0169%" height="15" fill="rgb(225,229,45)"/><text x="99.8774%" y="703.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.02%)</title><rect x="99.6274%" y="677" width="0.0169%" height="15" fill="rgb(220,60,37)"/><text x="99.8774%" y="687.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 0.02%)</title><rect x="99.6274%" y="661" width="0.0169%" height="15" fill="rgb(217,180,35)"/><text x="99.8774%" y="671.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.6274%" y="645" width="0.0169%" height="15" fill="rgb(229,7,53)"/><text x="99.8774%" y="655.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.6274%" y="629" width="0.0169%" height="15" fill="rgb(254,137,3)"/><text x="99.8774%" y="639.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.6274%" y="613" width="0.0169%" height="15" fill="rgb(215,140,41)"/><text x="99.8774%" y="623.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="99.6274%" y="597" width="0.0169%" height="15" fill="rgb(250,80,15)"/><text x="99.8774%" y="607.50"></text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (105 samples, 1.78%)</title><rect x="97.8997%" y="1013" width="1.7785%" height="15" fill="rgb(252,191,6)"/><text x="98.1497%" y="1023.50">t..</text></g><g><title>tokio::runtime::basic_scheduler::enter (105 samples, 1.78%)</title><rect x="97.8997%" y="997" width="1.7785%" height="15" fill="rgb(246,217,18)"/><text x="98.1497%" y="1007.50">t..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (105 samples, 1.78%)</title><rect x="97.8997%" y="981" width="1.7785%" height="15" fill="rgb(223,93,7)"/><text x="98.1497%" y="991.50">t..</text></g><g><title>tokio::runtime::basic_scheduler::enter::{{closure}} (105 samples, 1.78%)</title><rect x="97.8997%" y="965" width="1.7785%" height="15" fill="rgb(225,55,52)"/><text x="98.1497%" y="975.50">t..</text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on::{{closure}} (105 samples, 1.78%)</title><rect x="97.8997%" y="949" width="1.7785%" height="15" fill="rgb(240,31,24)"/><text x="98.1497%" y="959.50">t..</text></g><g><title>tokio::coop::budget (8 samples, 0.14%)</title><rect x="99.5427%" y="933" width="0.1355%" height="15" fill="rgb(205,56,52)"/><text x="99.7927%" y="943.50"></text></g><g><title>tokio::coop::with_budget (7 samples, 0.12%)</title><rect x="99.5596%" y="917" width="0.1186%" height="15" fill="rgb(246,146,12)"/><text x="99.8096%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.12%)</title><rect x="99.5596%" y="901" width="0.1186%" height="15" fill="rgb(239,84,36)"/><text x="99.8096%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.12%)</title><rect x="99.5596%" y="885" width="0.1186%" height="15" fill="rgb(207,41,40)"/><text x="99.8096%" y="895.50"></text></g><g><title>tokio::coop::with_budget::{{closure}} (7 samples, 0.12%)</title><rect x="99.5596%" y="869" width="0.1186%" height="15" fill="rgb(241,179,25)"/><text x="99.8096%" y="879.50"></text></g><g><title>tokio::runtime::shell::Shell::block_on::{{closure}} (2 samples, 0.03%)</title><rect x="99.6443%" y="853" width="0.0339%" height="15" fill="rgb(210,0,34)"/><text x="99.8943%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.03%)</title><rect x="99.6443%" y="837" width="0.0339%" height="15" fill="rgb(225,217,29)"/><text x="99.8943%" y="847.50"></text></g><g><title>cf_log_sender::main::_{{closure}} (2 samples, 0.03%)</title><rect x="99.6443%" y="821" width="0.0339%" height="15" fill="rgb(216,191,38)"/><text x="99.8943%" y="831.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.7121%" y="341" width="0.0508%" height="15" fill="rgb(232,140,52)"/><text x="99.9621%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.7121%" y="325" width="0.0508%" height="15" fill="rgb(223,158,51)"/><text x="99.9621%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.7121%" y="309" width="0.0508%" height="15" fill="rgb(235,29,51)"/><text x="99.9621%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.7121%" y="293" width="0.0508%" height="15" fill="rgb(215,181,18)"/><text x="99.9621%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.05%)</title><rect x="99.7121%" y="277" width="0.0508%" height="15" fill="rgb(227,125,34)"/><text x="99.9621%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.7290%" y="261" width="0.0339%" height="15" fill="rgb(230,197,49)"/><text x="99.9790%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.7459%" y="245" width="0.0169%" height="15" fill="rgb(239,141,16)"/><text x="99.9959%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.08%)</title><rect x="99.6951%" y="453" width="0.0847%" height="15" fill="rgb(225,105,43)"/><text x="99.9451%" y="463.50"></text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.08%)</title><rect x="99.6951%" y="437" width="0.0847%" height="15" fill="rgb(214,131,14)"/><text x="99.9451%" y="447.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.08%)</title><rect x="99.6951%" y="421" width="0.0847%" height="15" fill="rgb(229,177,11)"/><text x="99.9451%" y="431.50"></text></g><g><title>std::sys_common::net::TcpStream::read (4 samples, 0.07%)</title><rect x="99.7121%" y="405" width="0.0678%" height="15" fill="rgb(231,180,14)"/><text x="99.9621%" y="415.50"></text></g><g><title>std::sys::unix::net::Socket::read (4 samples, 0.07%)</title><rect x="99.7121%" y="389" width="0.0678%" height="15" fill="rgb(232,88,2)"/><text x="99.9621%" y="399.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (4 samples, 0.07%)</title><rect x="99.7121%" y="373" width="0.0678%" height="15" fill="rgb(205,220,8)"/><text x="99.9621%" y="383.50"></text></g><g><title>__libc_recv (4 samples, 0.07%)</title><rect x="99.7121%" y="357" width="0.0678%" height="15" fill="rgb(225,23,53)"/><text x="99.9621%" y="367.50"></text></g><g><title>__libc_enable_asynccancel (1 samples, 0.02%)</title><rect x="99.7629%" y="341" width="0.0169%" height="15" fill="rgb(213,62,29)"/><text x="100.0129%" y="351.50"></text></g><g><title>mio::sys::unix::ready::&lt;impl core::convert::From&lt;mio::sys::unix::ready::UnixReady&gt; for mio::event_imp::Ready&gt;::from (1 samples, 0.02%)</title><rect x="99.7798%" y="437" width="0.0169%" height="15" fill="rgb(227,75,7)"/><text x="100.0298%" y="447.50"></text></g><g><title>tokio::runtime::task::raw::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="1013" width="0.1694%" height="15" fill="rgb(207,105,14)"/><text x="99.9282%" y="1023.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="997" width="0.1694%" height="15" fill="rgb(245,62,29)"/><text x="99.9282%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.17%)</title><rect x="99.6782%" y="981" width="0.1694%" height="15" fill="rgb(236,202,4)"/><text x="99.9282%" y="991.50"></text></g><g><title>std::panicking::try (10 samples, 0.17%)</title><rect x="99.6782%" y="965" width="0.1694%" height="15" fill="rgb(250,67,1)"/><text x="99.9282%" y="975.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.17%)</title><rect x="99.6782%" y="949" width="0.1694%" height="15" fill="rgb(253,115,44)"/><text x="99.9282%" y="959.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 0.17%)</title><rect x="99.6782%" y="933" width="0.1694%" height="15" fill="rgb(251,139,18)"/><text x="99.9282%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.17%)</title><rect x="99.6782%" y="917" width="0.1694%" height="15" fill="rgb(218,22,32)"/><text x="99.9282%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::{{closure}} (10 samples, 0.17%)</title><rect x="99.6782%" y="901" width="0.1694%" height="15" fill="rgb(243,53,5)"/><text x="99.9282%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="885" width="0.1694%" height="15" fill="rgb(227,56,16)"/><text x="99.9282%" y="895.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.17%)</title><rect x="99.6782%" y="869" width="0.1694%" height="15" fill="rgb(245,53,0)"/><text x="99.9282%" y="879.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (10 samples, 0.17%)</title><rect x="99.6782%" y="853" width="0.1694%" height="15" fill="rgb(216,170,35)"/><text x="99.9282%" y="863.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="837" width="0.1694%" height="15" fill="rgb(211,200,8)"/><text x="99.9282%" y="847.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="821" width="0.1694%" height="15" fill="rgb(228,204,44)"/><text x="99.9282%" y="831.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="805" width="0.1694%" height="15" fill="rgb(214,121,17)"/><text x="99.9282%" y="815.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="789" width="0.1694%" height="15" fill="rgb(233,64,38)"/><text x="99.9282%" y="799.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="773" width="0.1694%" height="15" fill="rgb(253,54,19)"/><text x="99.9282%" y="783.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="757" width="0.1694%" height="15" fill="rgb(253,94,18)"/><text x="99.9282%" y="767.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (10 samples, 0.17%)</title><rect x="99.6782%" y="741" width="0.1694%" height="15" fill="rgb(227,57,52)"/><text x="99.9282%" y="751.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="725" width="0.1694%" height="15" fill="rgb(230,228,50)"/><text x="99.9282%" y="735.50"></text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="709" width="0.1694%" height="15" fill="rgb(217,205,27)"/><text x="99.9282%" y="719.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (10 samples, 0.17%)</title><rect x="99.6782%" y="693" width="0.1694%" height="15" fill="rgb(252,71,50)"/><text x="99.9282%" y="703.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (10 samples, 0.17%)</title><rect x="99.6782%" y="677" width="0.1694%" height="15" fill="rgb(209,86,4)"/><text x="99.9282%" y="687.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (10 samples, 0.17%)</title><rect x="99.6782%" y="661" width="0.1694%" height="15" fill="rgb(229,94,0)"/><text x="99.9282%" y="671.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (10 samples, 0.17%)</title><rect x="99.6782%" y="645" width="0.1694%" height="15" fill="rgb(252,223,21)"/><text x="99.9282%" y="655.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (10 samples, 0.17%)</title><rect x="99.6782%" y="629" width="0.1694%" height="15" fill="rgb(230,210,4)"/><text x="99.9282%" y="639.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (10 samples, 0.17%)</title><rect x="99.6782%" y="613" width="0.1694%" height="15" fill="rgb(240,149,38)"/><text x="99.9282%" y="623.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (10 samples, 0.17%)</title><rect x="99.6782%" y="597" width="0.1694%" height="15" fill="rgb(254,105,20)"/><text x="99.9282%" y="607.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (10 samples, 0.17%)</title><rect x="99.6782%" y="581" width="0.1694%" height="15" fill="rgb(253,87,46)"/><text x="99.9282%" y="591.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (10 samples, 0.17%)</title><rect x="99.6782%" y="565" width="0.1694%" height="15" fill="rgb(253,116,33)"/><text x="99.9282%" y="575.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read_buf (10 samples, 0.17%)</title><rect x="99.6782%" y="549" width="0.1694%" height="15" fill="rgb(229,198,5)"/><text x="99.9282%" y="559.50"></text></g><g><title>tokio::io::async_read::AsyncRead::poll_read_buf (10 samples, 0.17%)</title><rect x="99.6782%" y="533" width="0.1694%" height="15" fill="rgb(242,38,37)"/><text x="99.9282%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.17%)</title><rect x="99.6782%" y="517" width="0.1694%" height="15" fill="rgb(242,69,53)"/><text x="99.9282%" y="527.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.17%)</title><rect x="99.6782%" y="501" width="0.1694%" height="15" fill="rgb(249,80,16)"/><text x="99.9282%" y="511.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.17%)</title><rect x="99.6782%" y="485" width="0.1694%" height="15" fill="rgb(206,128,11)"/><text x="99.9282%" y="495.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (10 samples, 0.17%)</title><rect x="99.6782%" y="469" width="0.1694%" height="15" fill="rgb(212,35,20)"/><text x="99.9282%" y="479.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read_ready (4 samples, 0.07%)</title><rect x="99.7798%" y="453" width="0.0678%" height="15" fill="rgb(236,79,13)"/><text x="100.0298%" y="463.50"></text></g><g><title>tokio::io::registration::Registration::poll_read_ready (3 samples, 0.05%)</title><rect x="99.7967%" y="437" width="0.0508%" height="15" fill="rgb(233,123,3)"/><text x="100.0467%" y="447.50"></text></g><g><title>tokio::io::registration::Registration::poll_ready (1 samples, 0.02%)</title><rect x="99.8306%" y="421" width="0.0169%" height="15" fill="rgb(214,93,52)"/><text x="100.0806%" y="431.50"></text></g><g><title>mio::sys::unix::ready::&lt;impl core::convert::From&lt;mio::sys::unix::ready::UnixReady&gt; for mio::event_imp::Ready&gt;::from (1 samples, 0.02%)</title><rect x="99.8306%" y="405" width="0.0169%" height="15" fill="rgb(251,37,40)"/><text x="100.0806%" y="415.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (1 samples, 0.02%)</title><rect x="99.8476%" y="1013" width="0.0169%" height="15" fill="rgb(227,80,54)"/><text x="100.0976%" y="1023.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.02%)</title><rect x="99.8476%" y="997" width="0.0169%" height="15" fill="rgb(254,48,11)"/><text x="100.0976%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8476%" y="981" width="0.0169%" height="15" fill="rgb(235,193,26)"/><text x="100.0976%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8476%" y="965" width="0.0169%" height="15" fill="rgb(229,99,21)"/><text x="100.0976%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8476%" y="949" width="0.0169%" height="15" fill="rgb(211,140,41)"/><text x="100.0976%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8476%" y="933" width="0.0169%" height="15" fill="rgb(240,227,30)"/><text x="100.0976%" y="943.50"></text></g><g><title>cf-log-sender (5,897 samples, 99.88%)</title><rect x="0.0000%" y="1029" width="99.8814%" height="15" fill="rgb(215,224,45)"/><text x="0.2500%" y="1039.50">cf-log-sender</text></g><g><title>tracing::span::Span::log (1 samples, 0.02%)</title><rect x="99.8645%" y="1013" width="0.0169%" height="15" fill="rgb(206,123,31)"/><text x="100.1145%" y="1023.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1 samples, 0.02%)</title><rect x="99.8645%" y="997" width="0.0169%" height="15" fill="rgb(210,138,16)"/><text x="100.1145%" y="1007.50"></text></g><g><title>&lt;&amp;mio::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="99.8645%" y="981" width="0.0169%" height="15" fill="rgb(228,57,28)"/><text x="100.1145%" y="991.50"></text></g><g><title>&lt;&amp;mio::sys::unix::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="99.8645%" y="965" width="0.0169%" height="15" fill="rgb(242,170,10)"/><text x="100.1145%" y="975.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.02%)</title><rect x="99.8645%" y="949" width="0.0169%" height="15" fill="rgb(228,214,39)"/><text x="100.1145%" y="959.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.02%)</title><rect x="99.8645%" y="933" width="0.0169%" height="15" fill="rgb(218,179,33)"/><text x="100.1145%" y="943.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.02%)</title><rect x="99.8645%" y="917" width="0.0169%" height="15" fill="rgb(235,193,39)"/><text x="100.1145%" y="927.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.02%)</title><rect x="99.8645%" y="901" width="0.0169%" height="15" fill="rgb(219,221,36)"/><text x="100.1145%" y="911.50"></text></g><g><title>__libc_recv (1 samples, 0.02%)</title><rect x="99.8645%" y="885" width="0.0169%" height="15" fill="rgb(248,218,19)"/><text x="100.1145%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8645%" y="869" width="0.0169%" height="15" fill="rgb(205,50,9)"/><text x="100.1145%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="981" width="0.0169%" height="15" fill="rgb(238,81,28)"/><text x="100.1314%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="965" width="0.0169%" height="15" fill="rgb(235,110,19)"/><text x="100.1314%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="949" width="0.0169%" height="15" fill="rgb(214,7,14)"/><text x="100.1314%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="933" width="0.0169%" height="15" fill="rgb(211,77,3)"/><text x="100.1314%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="917" width="0.0169%" height="15" fill="rgb(229,5,9)"/><text x="100.1314%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.8814%" y="901" width="0.0169%" height="15" fill="rgb(225,90,11)"/><text x="100.1314%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.8984%" y="933" width="0.0169%" height="15" fill="rgb(242,56,8)"/><text x="100.1484%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9153%" y="789" width="0.0169%" height="15" fill="rgb(249,212,39)"/><text x="100.1653%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9153%" y="773" width="0.0169%" height="15" fill="rgb(236,90,9)"/><text x="100.1653%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9153%" y="757" width="0.0169%" height="15" fill="rgb(206,88,35)"/><text x="100.1653%" y="767.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9153%" y="741" width="0.0169%" height="15" fill="rgb(205,126,30)"/><text x="100.1653%" y="751.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9153%" y="725" width="0.0169%" height="15" fill="rgb(230,176,12)"/><text x="100.1653%" y="735.50"></text></g><g><title>core::mem::drop (1 samples, 0.02%)</title><rect x="99.9322%" y="725" width="0.0169%" height="15" fill="rgb(243,19,9)"/><text x="100.1822%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9322%" y="709" width="0.0169%" height="15" fill="rgb(245,171,17)"/><text x="100.1822%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9322%" y="693" width="0.0169%" height="15" fill="rgb(227,52,21)"/><text x="100.1822%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.02%)</title><rect x="99.9322%" y="677" width="0.0169%" height="15" fill="rgb(238,69,14)"/><text x="100.1822%" y="687.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (1 samples, 0.02%)</title><rect x="99.9322%" y="661" width="0.0169%" height="15" fill="rgb(241,156,39)"/><text x="100.1822%" y="671.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.02%)</title><rect x="99.9322%" y="645" width="0.0169%" height="15" fill="rgb(212,227,28)"/><text x="100.1822%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9322%" y="629" width="0.0169%" height="15" fill="rgb(209,118,27)"/><text x="100.1822%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9322%" y="613" width="0.0169%" height="15" fill="rgb(226,102,5)"/><text x="100.1822%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9322%" y="597" width="0.0169%" height="15" fill="rgb(223,34,3)"/><text x="100.1822%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9322%" y="581" width="0.0169%" height="15" fill="rgb(221,81,38)"/><text x="100.1822%" y="591.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.05%)</title><rect x="99.9153%" y="901" width="0.0508%" height="15" fill="rgb(236,219,28)"/><text x="100.1653%" y="911.50"></text></g><g><title>std::panicking::try (3 samples, 0.05%)</title><rect x="99.9153%" y="885" width="0.0508%" height="15" fill="rgb(213,200,14)"/><text x="100.1653%" y="895.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.05%)</title><rect x="99.9153%" y="869" width="0.0508%" height="15" fill="rgb(240,33,19)"/><text x="100.1653%" y="879.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.05%)</title><rect x="99.9153%" y="853" width="0.0508%" height="15" fill="rgb(233,113,27)"/><text x="100.1653%" y="863.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3 samples, 0.05%)</title><rect x="99.9153%" y="837" width="0.0508%" height="15" fill="rgb(220,221,18)"/><text x="100.1653%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.05%)</title><rect x="99.9153%" y="821" width="0.0508%" height="15" fill="rgb(238,92,8)"/><text x="100.1653%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (3 samples, 0.05%)</title><rect x="99.9153%" y="805" width="0.0508%" height="15" fill="rgb(222,164,16)"/><text x="100.1653%" y="815.50"></text></g><g><title>tokio::runtime::handle::Handle::enter (2 samples, 0.03%)</title><rect x="99.9322%" y="789" width="0.0339%" height="15" fill="rgb(241,119,3)"/><text x="100.1822%" y="799.50"></text></g><g><title>tokio::runtime::context::enter (2 samples, 0.03%)</title><rect x="99.9322%" y="773" width="0.0339%" height="15" fill="rgb(241,44,8)"/><text x="100.1822%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}::{{closure}} (2 samples, 0.03%)</title><rect x="99.9322%" y="757" width="0.0339%" height="15" fill="rgb(230,36,40)"/><text x="100.1822%" y="767.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.03%)</title><rect x="99.9322%" y="741" width="0.0339%" height="15" fill="rgb(243,16,36)"/><text x="100.1822%" y="751.50"></text></g><g><title>std::sync::barrier::BarrierWaitResult::is_leader (1 samples, 0.02%)</title><rect x="99.9492%" y="725" width="0.0169%" height="15" fill="rgb(231,4,26)"/><text x="100.1992%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (5 samples, 0.08%)</title><rect x="99.8984%" y="965" width="0.0847%" height="15" fill="rgb(240,9,31)"/><text x="100.1484%" y="975.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (5 samples, 0.08%)</title><rect x="99.8984%" y="949" width="0.0847%" height="15" fill="rgb(207,173,15)"/><text x="100.1484%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (4 samples, 0.07%)</title><rect x="99.9153%" y="933" width="0.0678%" height="15" fill="rgb(224,192,53)"/><text x="100.1653%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (4 samples, 0.07%)</title><rect x="99.9153%" y="917" width="0.0678%" height="15" fill="rgb(223,67,28)"/><text x="100.1653%" y="927.50"></text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.02%)</title><rect x="99.9661%" y="901" width="0.0169%" height="15" fill="rgb(211,20,47)"/><text x="100.2161%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="99.9661%" y="885" width="0.0169%" height="15" fill="rgb(240,228,2)"/><text x="100.2161%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="99.9661%" y="869" width="0.0169%" height="15" fill="rgb(248,151,12)"/><text x="100.2161%" y="879.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.02%)</title><rect x="99.9661%" y="853" width="0.0169%" height="15" fill="rgb(244,8,39)"/><text x="100.2161%" y="863.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.9661%" y="837" width="0.0169%" height="15" fill="rgb(222,26,8)"/><text x="100.2161%" y="847.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.9661%" y="821" width="0.0169%" height="15" fill="rgb(213,106,44)"/><text x="100.2161%" y="831.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.02%)</title><rect x="99.9661%" y="805" width="0.0169%" height="15" fill="rgb(214,129,20)"/><text x="100.2161%" y="815.50"></text></g><g><title>std::sys::unix::thread_local_dtor::register_dtor (1 samples, 0.02%)</title><rect x="99.9661%" y="789" width="0.0169%" height="15" fill="rgb(212,32,13)"/><text x="100.2161%" y="799.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.02%)</title><rect x="99.9661%" y="773" width="0.0169%" height="15" fill="rgb(208,168,33)"/><text x="100.2161%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.02%)</title><rect x="99.9661%" y="757" width="0.0169%" height="15" fill="rgb(231,207,8)"/><text x="100.2161%" y="767.50"></text></g><g><title>all (5,904 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(235,219,23)"/><text x="0.2500%" y="1055.50"></text></g><g><title>tokio-runtime-w (7 samples, 0.12%)</title><rect x="99.8814%" y="1029" width="0.1186%" height="15" fill="rgb(226,216,26)"/><text x="100.1314%" y="1039.50"></text></g><g><title>__GI___clone (7 samples, 0.12%)</title><rect x="99.8814%" y="1013" width="0.1186%" height="15" fill="rgb(239,137,16)"/><text x="100.1314%" y="1023.50"></text></g><g><title>start_thread (7 samples, 0.12%)</title><rect x="99.8814%" y="997" width="0.1186%" height="15" fill="rgb(207,12,36)"/><text x="100.1314%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6 samples, 0.10%)</title><rect x="99.8984%" y="981" width="0.1016%" height="15" fill="rgb(210,214,24)"/><text x="100.1484%" y="991.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.02%)</title><rect x="99.9831%" y="965" width="0.0169%" height="15" fill="rgb(206,56,30)"/><text x="100.2331%" y="975.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9831%" y="949" width="0.0169%" height="15" fill="rgb(228,143,26)"/><text x="100.2331%" y="959.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.02%)</title><rect x="99.9831%" y="933" width="0.0169%" height="15" fill="rgb(216,218,46)"/><text x="100.2331%" y="943.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.02%)</title><rect x="99.9831%" y="917" width="0.0169%" height="15" fill="rgb(206,6,19)"/><text x="100.2331%" y="927.50"></text></g><g><title>__GI___sysconf (1 samples, 0.02%)</title><rect x="99.9831%" y="901" width="0.0169%" height="15" fill="rgb(239,177,51)"/><text x="100.2331%" y="911.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.02%)</title><rect x="99.9831%" y="885" width="0.0169%" height="15" fill="rgb(216,55,25)"/><text x="100.2331%" y="895.50"></text></g></svg></svg>